{
  "address": "0x67893865686C22f0a243114B0893De65117d2f3b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fusePoolId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newFusePoolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldCToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newCToken",
          "type": "address"
        }
      ],
      "name": "FusePoolChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRouterIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOracleConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSwapSlippage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "convertFrom18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fusePoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressListFactory",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPoolId",
          "type": "uint256"
        }
      ],
      "name": "migrateFusePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRouterIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setupOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValueCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "updateOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1c50b0176d12f07b013c0f866eac37fc04260a4e988022b82d5d8c34a169f2f0",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0x67893865686C22f0a243114B0893De65117d2f3b",
    "transactionIndex": 63,
    "gasUsed": "3394238",
    "logsBloom": "0x
    "blockHash": "0x4366f46a132ef8aab309b5b7641d5e19b477eb3bcc65190b255763e163e03a9c",
    "transactionHash": "0x1c50b0176d12f07b013c0f866eac37fc04260a4e988022b82d5d8c34a169f2f0",
    "logs": [],
    "blockNumber": 13445757,
    "cumulativeGasUsed": "7878147",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd1C117319B3595fbc39b471AB1fd485629eb05F2",
    "0xe382d9f2394A359B01006faa8A1864b8a60d2710",
    18
  ],
  "solcInputHash": "5f04fba5c8a61bceef48ee4c9b8cb8c1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fusePoolId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFusePoolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCToken\",\"type\":\"address\"}],\"name\":\"FusePoolChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertFrom18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fusePoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressListFactory\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPoolId\",\"type\":\"uint256\"}],\"name\":\"migrateFusePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"convertFrom18(uint256)\":{\"details\":\"Convert from 18 decimals to token defined decimals. Default no conversion.\"},\"init(address)\":{\"params\":{\"_addressListFactory\":\"To support same code in eth side chain, user _addressListFactory as param ethereum- 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3 polygon-0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291\"}},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"migrateFusePool(uint256)\":{\"details\":\"Redeems cTokens from current fuse pool and mints cTokens of new Fuse Pool\",\"params\":{\"_newPoolId\":\"Fuse Pool ID\"}},\"rebalance()\":{\"details\":\"Rebalance profit, loss and investment of this strategy\"},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweepERC20(address)\":{\"details\":\"sweep given token to feeCollector of strategy\",\"params\":{\"_fromToken\":\"token address to sweep\"}},\"totalValue()\":{\"details\":\"Report total value in collateral token\"},\"totalValueCurrent()\":{\"details\":\"Report total value in collateral token\"},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapManager(address)\":{\"params\":{\"_swapManager\":\"swap manager address\"}},\"withdraw(uint256)\":{\"details\":\"Withdraw collateral token from lending pool.\",\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"Deposit ETH in a Rari Fuse Pool and earn interest.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"init(address)\":{\"notice\":\"Create keeper list NOTE: Any function with onlyKeeper modifier will not work until this function is called. NOTE: Due to gas constraint this function cannot be called in constructor.\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"migrateFusePool(uint256)\":{\"notice\":\"Changes the underlying Fuse Pool to a new one\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"token()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"totalValue()\":{\"notice\":\"Calculate total value using underlying token\"},\"totalValueCurrent()\":{\"notice\":\"Calculate total value of asset under management (in real-time)\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/rari-fuse/RariFuseStrategyETH.sol\":\"RariFuseStrategyETH\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/interfaces/bloq/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    function add(address a) external returns (bool);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function length() external view returns (uint256);\\n\\n    function grantRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x573e4beae1fcf79639afaf2ab3eb606b599fb71d678ca64e69f07620a3091af3\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressListFactory {\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0x150ffedb5ad13b6f3ed4802b9eb4400567aecbac4faf9615be0f46d27ac40087\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0xbfaebdde57187f71c2c9f430002c310cd51638967deb4cc9d58877e1f2bf562e\",\"license\":\"MIT\"},\"contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface CToken {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function repayBorrow() external payable; // For ETH\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256); // For ERC20\\n\\n    function transfer(address user, uint256 amount) external returns (bool);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function transferFrom(\\n        address owner,\\n        address user,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function underlying() external view returns (address);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function markets(address market)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isCompted\\n        );\\n}\\n\",\"keccak256\":\"0x75e5522f5de8a74130bb58bbf6700f11ec2534984cf71b4ee6cdc609625a3eec\",\"license\":\"MIT\"},\"contracts/interfaces/rari-fuse/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IComptroller {\\n    function cTokensByUnderlying(address) external view returns (address cToken);\\n}\\n\",\"keccak256\":\"0x86721a6a8948feeeb372243635fb186710cdf90b82ed65cc20aff7e69480f0a5\",\"license\":\"MIT\"},\"contracts/interfaces/rari-fuse/IFusePoolDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IFusePoolDirectory {\\n    function pools(uint256)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            address creator,\\n            address comptroller,\\n            uint256 blockPosted,\\n            uint256 timestampPosted\\n        );\\n}\\n\",\"keccak256\":\"0xfe10490e42959fb36a7342603166985e2e8cb559d3f8512ff383b01d00f921ab\",\"license\":\"MIT\"},\"contracts/interfaces/token/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface TokenLike is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x0ca44fa24917d55f54cb00a484d7826bae677747a2110203e2cfe642ba1eec5e\",\"license\":\"MIT\"},\"contracts/interfaces/paycer/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalValueCurrent() external returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7187d0e7ed2af48c8f603b0dd5b34afd7e2c0792d8089cc909e765c478c20b8c\",\"license\":\"MIT\"},\"contracts/interfaces/paycer/IPaycerPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../bloq/IAddressList.sol\\\";\\n\\ninterface IPaycerPool is IERC20 {\\n    function deposit() external payable;\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function poolRewards() external returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function resetApproval() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawETH(uint256 _amount) external;\\n\\n    function whitelistedWithdraw(uint256 _amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function keepers() external view returns (IAddressList);\\n\\n    function maintainers() external view returns (IAddressList);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee,\\n            uint256 _debtRate,\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio\\n        );\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0725eb59a54238cbdcf2d14d2759a2fb4bd7550b9e4183c9350ff72e46a2b674\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../interfaces/bloq/IAddressList.sol\\\";\\nimport \\\"../interfaces/bloq/IAddressListFactory.sol\\\";\\nimport \\\"../interfaces/paycer/IStrategy.sol\\\";\\nimport \\\"../interfaces/paycer/IPaycerPool.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    IAddressList public keepers;\\n    address public override feeCollector;\\n    ISwapManager public swapManager;\\n\\n    uint256 public oraclePeriod = 3600; // 1h\\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        swapManager = ISwapManager(_swapManager);\\n        pool = _pool;\\n        collateralToken = IPaycerPool(_pool).token();\\n        receiptToken = _receiptToken;\\n    }\\n\\n    modifier onlyGovernor {\\n        require(_msgSender() == IPaycerPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-paycer-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Create keeper list\\n     * NOTE: Any function with onlyKeeper modifier will not work until this function is called.\\n     * NOTE: Due to gas constraint this function cannot be called in constructor.\\n     * @param _addressListFactory To support same code in eth side chain, user _addressListFactory as param\\n     * ethereum- 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3\\n     * polygon-0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291\\n     */\\n    function init(address _addressListFactory) external onlyGovernor {\\n        require(address(keepers) == address(0), \\\"keeper-list-already-created\\\");\\n        // Prepare keeper list\\n        IAddressListFactory _factory = IAddressListFactory(_addressListFactory);\\n        keepers = IAddressList(_factory.createList());\\n        require(keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyGovernor {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\\n        require(_newSwapSlippage <= 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\\n        swapSlippage = _newSwapSlippage;\\n    }\\n\\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\\n        require(_newRouterIdx < swapManager.N_DEX(), \\\"invalid-router-index\\\");\\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\\n        require(_newPeriod > 59, \\\"invalid-oracle-period\\\");\\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\\n        oraclePeriod = _newPeriod;\\n        oracleRouterIdx = _newRouterIdx;\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function setupOracles() external onlyKeeper {\\n        _setupOracles();\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral token from lending pool.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Rebalance profit, loss and investment of this strategy\\n     */\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IPaycerPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n    }\\n\\n    /**\\n     * @dev sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @dev Convert from 18 decimals to token defined decimals. Default no conversion.\\n    function convertFrom18(uint256 amount) public pure virtual returns (uint256) {\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _value);\\n\\n    /**\\n     * @notice Calculate total value of asset under management (in real-time)\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValueCurrent() external virtual override returns (uint256) {\\n        return totalValue();\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration. \\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\\n     * excess debt, if any.\\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IPaycerPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IPaycerPool(pool).totalDebtOf(address(this));\\n        _profit = _realizeProfit(_totalDebt);\\n        _loss = _realizeLoss(_totalDebt);\\n        _payback = _liquidate(_excessDebt);\\n    }\\n\\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\\n        return (_amount * (10000 - _slippage)) / (10000);\\n    }\\n\\n    function _simpleOraclePath(address _from, address _to) internal pure returns (address[] memory path) {\\n        if (_from == WETH || _to == WETH) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WETH;\\n            path[2] = _to;\\n        }\\n    }\\n\\n    function _consultOracle(\\n        address _from,\\n        address _to,\\n        uint256 _amt\\n    ) internal returns (uint256, bool) {\\n        // from, to, amountIn, period, router\\n        (uint256 rate, uint256 lastUpdate, ) = swapManager.consult(_from, _to, _amt, oraclePeriod, oracleRouterIdx);\\n        // We're looking at a TWAP ORACLE with a 1 hr Period that has been updated within the last hour\\n        if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\\n        return (0, false);\\n    }\\n\\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\\n        require(path.length > 1, \\\"invalid-oracle-path\\\");\\n        amountOut = _amountIn;\\n        bool isValid;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\\n            require(isValid, \\\"invalid-oracle-rate\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\\n     * however, this method will throw minAmountOut is not met\\n     * @param _from address of from token\\n     * @param _to address of to token\\n     * @param _amountIn Amount to be swapped\\n     * @param _minAmountOut minimum amount out\\n     */\\n    function _safeSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) internal {\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\\n        if (_minAmountOut == 0) _minAmountOut = 1;\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _amountIn,\\n                _minAmountOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    // These methods can be implemented by the inheriting strategy.\\n    /* solhint-disable no-empty-blocks */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\\n\\n    /**\\n     * @notice Set up any oracles that are needed for this strategy.\\n     */\\n    function _setupOracles() internal virtual {}\\n\\n    /* solhint-enable */\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _approveToken(uint256 _amount) internal virtual;\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\\n\\n    /**\\n     * @notice Calculate earning and withdraw/convert it into collateral token.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _profit Profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\\n\\n    /**\\n     * @notice Calculate loss\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\\n\\n    /**\\n     * @notice Reinvest collateral.\\n     * @dev Once we file report back in pool, we might have some collateral in hand\\n     * which we want to reinvest aka deposit in lender/provider.\\n     */\\n    function _reinvest() internal virtual;\\n}\\n\",\"keccak256\":\"0x16d264ec864209c8cbd6d9bd70d3fbfb58490cae0d4a2c2789672cebb8e74362\",\"license\":\"MIT\"},\"contracts/strategies/compound/CompoundStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"../../interfaces/compound/ICompound.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Compound and earn interest.\\nabstract contract CompoundStrategy is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    CToken internal cToken;\\n    address internal constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\\n    Comptroller internal constant COMPTROLLER = Comptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) Strategy(_pool, _swapManager, _receiptToken) {\\n        require(_receiptToken != address(0), \\\"cToken-address-is-zero\\\");\\n        cToken = CToken(_receiptToken);\\n        swapSlippage = 10000; // disable oracles on reward swaps by default\\n    }\\n\\n    /**\\n     * @notice Calculate total value using COMP accrued and cToken\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\\n        _totalValue = _calculateTotalValue(COMPTROLLER.compAccrued(address(this)));\\n    }\\n\\n    function totalValueCurrent() external virtual override returns (uint256 _totalValue) {\\n        _claimComp();\\n        _totalValue = _calculateTotalValue(IERC20(COMP).balanceOf(address(this)));\\n    }\\n\\n    function _calculateTotalValue(uint256 _compAccrued) internal view returns (uint256 _totalValue) {\\n        if (_compAccrued != 0) {\\n            (, _totalValue) = swapManager.bestPathFixedInput(COMP, address(collateralToken), _compAccrued, 0);\\n        }\\n        _totalValue += _convertToCollateral(cToken.balanceOf(address(this)));\\n    }\\n\\n    function isReservedToken(address _token) public view virtual override returns (bool) {\\n        return _token == address(cToken) || _token == COMP;\\n    }\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        collateralToken.safeApprove(pool, _amount);\\n        collateralToken.safeApprove(address(cToken), _amount);\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            IERC20(COMP).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim COMP and transfer to new strategy\\n     * @param _newStrategy Address of new strategy.\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual override {\\n        _claimComp();\\n        IERC20(COMP).safeTransfer(_newStrategy, IERC20(COMP).balanceOf(address(this)));\\n    }\\n\\n    /// @notice Claim comp\\n    function _claimComp() internal {\\n        address[] memory _markets = new address[](1);\\n        _markets[0] = address(cToken);\\n        COMPTROLLER.claimComp(address(this), _markets);\\n    }\\n\\n    /// @notice Claim COMP and convert COMP into collateral token.\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\\n        _claimComp();\\n        uint256 _compAmount = IERC20(COMP).balanceOf(address(this));\\n        if (_compAmount != 0) {\\n            uint256 minAmtOut =\\n                (swapSlippage != 10000)\\n                    ? _calcAmtOutAfterSlippage(\\n                        _getOracleRate(_simpleOraclePath(COMP, _toToken), _compAmount),\\n                        swapSlippage\\n                    )\\n                    : 1;\\n            _safeSwap(COMP, _toToken, _compAmount, minAmtOut);\\n        }\\n    }\\n\\n    /// @notice Withdraw collateral to payback excess debt\\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\\n        if (_excessDebt != 0) {\\n            _payback = _safeWithdraw(_excessDebt);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate earning and withdraw it from Compound.\\n     * @dev Claim COMP and convert into collateral\\n     * @dev If somehow we got some collateral token in strategy then we want to\\n     *  include those in profit. That's why we used 'return' outside 'if' condition.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\\n        if (_collateralBalance > _totalDebt) {\\n            _withdrawHere(_collateralBalance - _totalDebt);\\n        }\\n        return collateralToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Calculate realized loss.\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\\n        if (_collateralBalance < _totalDebt) {\\n            _loss = _totalDebt - _collateralBalance;\\n        }\\n    }\\n\\n    /// @notice Deposit collateral in Compound\\n    function _reinvest() internal virtual override {\\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\\n        if (_collateralBalance != 0) {\\n            require(cToken.mint(_collateralBalance) == 0, \\\"deposit-to-compound-failed\\\");\\n        }\\n    }\\n\\n    /// @dev Withdraw collateral and transfer it to pool\\n    function _withdraw(uint256 _amount) internal override {\\n        _safeWithdraw(_amount);\\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\\n     * @param _amount Amount of collateral to withdraw.\\n     * @return Actual collateral withdrawn\\n     */\\n    function _safeWithdraw(uint256 _amount) internal returns (uint256) {\\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\\n        // Get available liquidity from Compound\\n        uint256 _availableLiquidity = cToken.getCash();\\n        // Get minimum of _amount and _avaialbleLiquidity\\n        uint256 _withdrawAmount = _amount < _availableLiquidity ? _amount : _availableLiquidity;\\n        // Get minimum of _withdrawAmount and _collateralBalance\\n        return _withdrawHere(_withdrawAmount < _collateralBalance ? _withdrawAmount : _collateralBalance);\\n    }\\n\\n    /// @dev Withdraw collateral here. Do not transfer to pool\\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\\n        if (_amount != 0) {\\n            require(cToken.redeemUnderlying(_amount) == 0, \\\"withdraw-from-compound-failed\\\");\\n            _afterRedeem();\\n        }\\n        return _amount;\\n    }\\n\\n    function _setupOracles() internal virtual override {\\n        swapManager.createOrUpdateOracle(COMP, WETH, oraclePeriod, oracleRouterIdx);\\n        if (address(collateralToken) != WETH) {\\n            swapManager.createOrUpdateOracle(WETH, address(collateralToken), oraclePeriod, oracleRouterIdx);\\n        }\\n    }\\n\\n    /**\\n     * @dev Compound support ETH as collateral not WETH. This hook will take\\n     * care of conversion from WETH to ETH and vice versa.\\n     * @dev This will be used in ETH strategy only, hence empty implementation\\n     */\\n    //solhint-disable-next-line no-empty-blocks\\n    function _afterRedeem() internal virtual {}\\n\\n    function _convertToCollateral(uint256 _cTokenAmount) internal view returns (uint256) {\\n        return (_cTokenAmount * cToken.exchangeRateStored()) / 1e18;\\n    }\\n}\\n\",\"keccak256\":\"0xff26717dae570695199720533c1a40cf8b0daedb20f750c730b8e7f3af16cb57\",\"license\":\"MIT\"},\"contracts/strategies/rari-fuse/RariFuseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../compound/CompoundStrategy.sol\\\";\\nimport \\\"../../interfaces/rari-fuse/IComptroller.sol\\\";\\nimport \\\"../../interfaces/rari-fuse/IFusePoolDirectory.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in a Rari Fuse Pool and earn interest.\\ncontract RariFuseStrategy is CompoundStrategy {\\n    using SafeERC20 for IERC20;\\n    string public constant NAME = \\\"RariFuse-Strategy\\\";\\n    string public constant VERSION = \\\"3.0.13\\\";\\n    uint256 public fusePoolId;\\n    address private constant FUSE_POOL_DIRECTORY = 0x835482FE0532f169024d5E9410199369aAD5C77E;\\n    event FusePoolChanged(uint256 indexed newFusePoolId, address indexed oldCToken, address indexed newCToken);\\n\\n    // solhint-disable no-empty-blocks\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        uint256 _fusePoolId\\n    ) CompoundStrategy(_pool, _swapManager, _cTokenByUnderlying(_fusePoolId, address(IPaycerPool(_pool).token()))) {\\n        fusePoolId = _fusePoolId;\\n    }\\n\\n    // solhint-enable no-empty-blocks\\n\\n    /**\\n     * @notice Calculate total value using underlying token\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view override returns (uint256 _totalValue) {\\n        _totalValue = _convertToCollateral(cToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Changes the underlying Fuse Pool to a new one\\n     * @dev Redeems cTokens from current fuse pool and mints cTokens of new Fuse Pool\\n     * @param _newPoolId Fuse Pool ID\\n     */\\n    function migrateFusePool(uint256 _newPoolId) external virtual onlyGovernor {\\n        address _newCToken = _cTokenByUnderlying(_newPoolId, address(collateralToken));\\n        require(address(cToken) != _newCToken, \\\"same-fuse-pool\\\");\\n        require(cToken.redeem(cToken.balanceOf(address(this))) == 0, \\\"withdraw-from-fuse-pool-failed\\\");\\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\\n        collateralToken.safeApprove(_newCToken, _collateralBalance);\\n        require(CToken(_newCToken).mint(_collateralBalance) == 0, \\\"deposit-to-fuse-pool-failed\\\");\\n        emit FusePoolChanged(_newPoolId, address(cToken), _newCToken);\\n        cToken = CToken(_newCToken);\\n        receiptToken = _newCToken;\\n        fusePoolId = _newPoolId;\\n    }\\n\\n    function isReservedToken(address _token) public view override returns (bool) {\\n        return _token == address(cToken);\\n    }\\n\\n    /**\\n     * @notice Gets the cToken to mint for a Fuse Pool\\n     * @param _poolId Fuse Pool ID\\n     * @param _collateralToken address of the collateralToken\\n     */\\n    function _cTokenByUnderlying(uint256 _poolId, address _collateralToken) internal view returns (address) {\\n        (, , address _comptroller, , ) = IFusePoolDirectory(FUSE_POOL_DIRECTORY).pools(_poolId);\\n        require(_comptroller != address(0), \\\"rari-fuse-invalid-comptroller\\\");\\n        if (_collateralToken == WETH) {\\n            // cETH is mapped with 0x0\\n            _collateralToken = address(0x0);\\n        }\\n        address _cToken = IComptroller(_comptroller).cTokensByUnderlying(_collateralToken);\\n        require(_cToken != address(0), \\\"rari-fuse-invalid-ctoken\\\");\\n        return _cToken;\\n    }\\n\\n    // solhint-disable-next-line\\n    function _beforeMigration(address _newStrategy) internal override {}\\n\\n    /**\\n     * @notice Calculate earning and withdraw it from Rari Fuse\\n     * @dev If somehow we got some collateral token in strategy then we want to\\n     *  include those in profit. That's why we used 'return' outside 'if' condition.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {\\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\\n\\n        if (_collateralBalance > _totalDebt) {\\n            _withdrawHere(_collateralBalance - _totalDebt);\\n        }\\n        return collateralToken.balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x750fc67af2f2c6e68e3f82cb6cbcdcc3dd70ee9628fc6b8268ba49ff4c4bde41\",\"license\":\"MIT\"},\"contracts/strategies/rari-fuse/RariFuseStrategyETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./RariFuseStrategy.sol\\\";\\nimport \\\"../../interfaces/token/IToken.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n/// @title Deposit ETH in a Rari Fuse Pool and earn interest.\\ncontract RariFuseStrategyETH is RariFuseStrategy {\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        uint256 _fusePoolId\\n    ) RariFuseStrategy(_pool, _swapManager, _fusePoolId) {}\\n\\n    /// @dev Only receive ETH from either cToken or WETH\\n    receive() external payable {\\n        require(msg.sender == address(cToken) || msg.sender == WETH, \\\"not-allowed-to-send-ether\\\");\\n    }\\n\\n    function migrateFusePool(uint256 _newPoolId) external override onlyKeeper {\\n        address _newCToken = _cTokenByUnderlying(_newPoolId, address(collateralToken));\\n        require(address(cToken) != _newCToken, \\\"same-fuse-pool\\\");\\n        require(cToken.redeem(cToken.balanceOf(address(this))) == 0, \\\"withdraw-from-fuse-pool-failed\\\");\\n        CToken(_newCToken).mint{value: address(this).balance}();\\n        emit FusePoolChanged(_newPoolId, address(cToken), _newCToken);\\n        cToken = CToken(_newCToken);\\n        receiptToken = _newCToken;\\n        fusePoolId = _newPoolId;\\n    }\\n\\n    /**\\n     * @dev This hook get called after collateral is redeemed from a Rari Fuse Pool\\n     * Paycer deals in WETH as collateral so convert ETH to WETH\\n     */\\n    function _afterRedeem() internal override {\\n        TokenLike(WETH).deposit{value: address(this).balance}();\\n    }\\n\\n    /**\\n     * @dev During reinvest we have WETH as collateral but Rari Fuse accepts ETH.\\n     * Withdraw ETH from WETH before calling mint in Rari Fuse Pool.\\n     */\\n    function _reinvest() internal override {\\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\\n        if (_collateralBalance != 0) {\\n            TokenLike(WETH).withdraw(_collateralBalance);\\n            cToken.mint{value: _collateralBalance}();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x600f5ba17f94029cdc1186983ddd868054b2e5b397ee26f65ac8ce62b4156bee\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052610e1060045560006005556127106006553480156200002257600080fd5b50604051620040363803806200403683398101604081905262000045916200050c565b8282828282620000ca83866001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200008957600080fd5b505afa1580156200009e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c49190620004e6565b620002d7565b8282826001600160a01b038316620001295760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620001765760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b604482015260640162000120565b600380546001600160a01b0319166001600160a01b0384811691909117909155606084901b6001600160601b03191660a05260408051637e062a3560e11b815290519185169163fc0c546a91600480820192602092909190829003018186803b158015620001e357600080fd5b505afa158015620001f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021e9190620004e6565b60601b6001600160601b031916608052600080546001600160a01b0319166001600160a01b03928316179055831615159150620002a090505760405162461bcd60e51b815260206004820152601660248201527f63546f6b656e2d616464726573732d69732d7a65726f00000000000000000000604482015260640162000120565b600780546001600160a01b0319166001600160a01b0392909216919091179055505061271060065560085550620006929350505050565b6040516315895f4760e31b815260048101839052600090819073835482fe0532f169024d5e9410199369aad5c77e9063ac4afa389060240160006040518083038186803b1580156200032857600080fd5b505afa1580156200033d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000367919081019062000553565b509093505050506001600160a01b038116620003c65760405162461bcd60e51b815260206004820152601d60248201527f726172692d667573652d696e76616c69642d636f6d7074726f6c6c6572000000604482015260640162000120565b6001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21415620003f157600092505b6040516318ffa3fd60e11b81526001600160a01b038481166004830152600091908316906331ff47fa9060240160206040518083038186803b1580156200043757600080fd5b505afa1580156200044c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004729190620004e6565b90506001600160a01b038116620004cc5760405162461bcd60e51b815260206004820152601860248201527f726172692d667573652d696e76616c69642d63746f6b656e0000000000000000604482015260640162000120565b949350505050565b8051620004e18162000679565b919050565b600060208284031215620004f8578081fd5b8151620005058162000679565b9392505050565b60008060006060848603121562000521578182fd5b83516200052e8162000679565b6020850151909350620005418162000679565b80925050604084015190509250925092565b600080600080600060a086880312156200056b578081fd5b85516001600160401b038082111562000582578283fd5b818801915088601f83011262000596578283fd5b815181811115620005ab57620005ab62000663565b604051601f8201601f19908116603f01168101908382118183101715620005d657620005d662000663565b81604052828152602093508b84848701011115620005f2578586fd5b8591505b82821015620006155784820184015181830185015290830190620005f6565b828211156200062657858484830101525b985062000638915050888201620004d4565b955050506200064a60408701620004d4565b6060870151608090970151959894975095949392505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200068f57600080fd5b50565b60805160601c60a05160601c6138bb6200077b60003960008181610297015281816106830152818161080901528181610a8401528181610b0001528181610c970152818161116e0152818161139e015281816114c5015281816117a80152818161187101528181611abe01528181612065015281816122d40152818161237101526125b701526000818161051101528181610ef501528181611a1001528181611a9501528181611e090152818161208f0152818161242d01528181612595015281816125ed0152818161280a0152818161289101528181612c4f0152612e6b01526138bb6000f3fe6080604052600436106101dc5760003560e01c80639b0db5d011610102578063d2c35ce811610095578063ec78e83211610064578063ec78e832146105f3578063fb589de214610613578063fc0c546a14610631578063ffa1ad741461064f57610260565b8063d2c35ce814610589578063d4c3eea0146105a9578063e00af4a7146105be578063e645c202146105de57610260565b8063b2016bd4116100d1578063b2016bd4146104ff578063c415b95c14610533578063cd2d7ebe14610553578063ce5494bb1461056957610260565b80639b0db5d01461046a578063a3f4df7e14610480578063a923b2a6146104ca578063aa101886146104ea57610260565b8063440d72481161017a578063709d039d11610149578063709d039d146104005780637d7c2a1c14610420578063951dc22c1461043557806399b71d5c1461045557610260565b8063440d7248146103705780634c36fad7146103a05780634dda5222146103c057806367f5e4b8146103e057610260565b80631aedeabe116101b65780631aedeabe146102f65780632e1a7d4d1461031a5780634032b72b1461033a57806342189c8f1461035a57610260565b806314ae9f2e1461026557806316f0115b1461028557806319ab453c146102d657610260565b36610260576007546001600160a01b031633148061020d57503373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b61025e5760405162461bcd60e51b815260206004820152601960248201527f6e6f742d616c6c6f7765642d746f2d73656e642d65746865720000000000000060448201526064015b60405180910390fd5b005b600080fd5b34801561027157600080fd5b5061025e6102803660046133f5565b610681565b34801561029157600080fd5b506102b97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102e257600080fd5b5061025e6102f13660046133f5565b610807565b34801561030257600080fd5b5061030c60065481565b6040519081526020016102cd565b34801561032657600080fd5b5061025e6103353660046135ce565b610a81565b34801561034657600080fd5b5061025e6103553660046133f5565b610afe565b34801561036657600080fd5b5061030c60045481565b34801561037c57600080fd5b5061039061038b3660046133f5565b610c7e565b60405190151581526020016102cd565b3480156103ac57600080fd5b5061025e6103bb3660046133f5565b610c95565b3480156103cc57600080fd5b5061025e6103db3660046135ce565b610e48565b3480156103ec57600080fd5b5061025e6103fb3660046135ce565b61116c565b34801561040c57600080fd5b506003546102b9906001600160a01b031681565b34801561042c57600080fd5b5061025e6112b8565b34801561044157600080fd5b506001546102b9906001600160a01b031681565b34801561046157600080fd5b5061025e611407565b34801561047657600080fd5b5061030c60085481565b34801561048c57600080fd5b506104bd6040518060400160405280601181526020017052617269467573652d537472617465677960781b81525081565b6040516102cd91906136c0565b3480156104d657600080fd5b5061025e6104e53660046135fe565b6114c3565b3480156104f657600080fd5b5061025e6116f8565b34801561050b57600080fd5b506102b97f000000000000000000000000000000000000000000000000000000000000000081565b34801561053f57600080fd5b506002546102b9906001600160a01b031681565b34801561055f57600080fd5b5061030c60055481565b34801561057557600080fd5b5061025e6105843660046133f5565b6117a5565b34801561059557600080fd5b5061025e6105a43660046133f5565b611abc565b3480156105b557600080fd5b5061030c611c85565b3480156105ca57600080fd5b5061025e6105d93660046133f5565b611d12565b3480156105ea57600080fd5b5061030c611fad565b3480156105ff57600080fd5b506000546102b9906001600160a01b031681565b34801561061f57600080fd5b5061030c61062e3660046135ce565b90565b34801561063d57600080fd5b506000546001600160a01b03166102b9565b34801561065b57600080fd5b506104bd60405180604001604052806006815260200165332e302e313360d01b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156106da57600080fd5b505afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107129190613411565b6001600160a01b0316336001600160a01b0316146107425760405162461bcd60e51b815260040161025590613723565b600154604051631484968760e11b81526001600160a01b038381166004830152909116906329092d0e90602401602060405180830381600087803b15801561078957600080fd5b505af115801561079d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c191906134e9565b6108045760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610255565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561086057600080fd5b505afa158015610874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108989190613411565b6001600160a01b0316336001600160a01b0316146108c85760405162461bcd60e51b815260040161025590613723565b6001546001600160a01b0316156109215760405162461bcd60e51b815260206004820152601b60248201527f6b65657065722d6c6973742d616c72656164792d6372656174656400000000006044820152606401610255565b6000819050806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561096157600080fd5b505af1158015610975573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109999190613411565b600180546001600160a01b0319166001600160a01b03929092169182179055630a3b0a4f6109c43390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b158015610a0557600080fd5b505af1158015610a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3d91906134e9565b610a7d5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610255565b5050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610af55760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b6044820152606401610255565b61080481612042565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5757600080fd5b505afa158015610b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8f9190613411565b6001600160a01b0316336001600160a01b031614610bbf5760405162461bcd60e51b815260040161025590613723565b600154604051630a3b0a4f60e01b81526001600160a01b03838116600483015290911690630a3b0a4f90602401602060405180830381600087803b158015610c0657600080fd5b505af1158015610c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3e91906134e9565b6108045760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610255565b6007546001600160a01b038281169116145b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610cee57600080fd5b505afa158015610d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d269190613411565b6001600160a01b0316336001600160a01b031614610d565760405162461bcd60e51b815260040161025590613723565b6001600160a01b038116610da15760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401610255565b6003546001600160a01b0382811691161415610dec5760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b6044820152606401610255565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610e9957600080fd5b505afa158015610ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed191906134e9565b610eed5760405162461bcd60e51b8152600401610255906136f3565b6000610f19827f00000000000000000000000000000000000000000000000000000000000000006120be565b6007549091506001600160a01b0380831691161415610f6b5760405162461bcd60e51b815260206004820152600e60248201526d1cd85b594b599d5cd94b5c1bdbdb60921b6044820152606401610255565b6007546040516370a0823160e01b81523060048201526001600160a01b039091169063db006a759082906370a082319060240160206040518083038186803b158015610fb657600080fd5b505afa158015610fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fee91906135e6565b6040518263ffffffff1660e01b815260040161100c91815260200190565b602060405180830381600087803b15801561102657600080fd5b505af115801561103a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105e91906135e6565b156110ab5760405162461bcd60e51b815260206004820152601e60248201527f77697468647261772d66726f6d2d667573652d706f6f6c2d6661696c656400006044820152606401610255565b806001600160a01b0316631249c58b476040518263ffffffff1660e01b81526004016000604051808303818588803b1580156110e657600080fd5b505af11580156110fa573d6000803e3d6000fd5b50506007546040516001600160a01b03868116955090911692508591507f7725294be69fa7d941c001b388e2086daa9acdf58fbbc7aef3fd8cce3c316b6e90600090a4600780546001600160a01b039092166001600160a01b0319928316811790915560008054909216179055600855565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156111c557600080fd5b505afa1580156111d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fd9190613411565b6001600160a01b0316336001600160a01b03161461122d5760405162461bcd60e51b815260040161025590613723565b6127108111156112785760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b6044820152606401610255565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561130957600080fd5b505afa15801561131d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134191906134e9565b61135d5760405162461bcd60e51b8152600401610255906136f3565b600080600061136a6122ae565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b1580156113e257600080fd5b505af11580156113f6573d6000803e3d6000fd5b50505050611402612415565b505050565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561145857600080fd5b505afa15801561146c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149091906134e9565b6114ac5760405162461bcd60e51b8152600401610255906136f3565b6114b66000612588565b6114c1600019612588565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561151c57600080fd5b505afa158015611530573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115549190613411565b6001600160a01b0316336001600160a01b0316146115845760405162461bcd60e51b815260040161025590613723565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156115d257600080fd5b505afa1580156115e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160a91906135e6565b811061164f5760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b6044820152606401610255565b8161165a5760045491505b603b82116116a25760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b6044820152606401610255565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561174957600080fd5b505afa15801561175d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178191906134e9565b61179d5760405162461bcd60e51b8152600401610255906136f3565b6114c1612752565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146118195760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b6044820152606401610255565b6001600160a01b03811661186f5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610255565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118d257600080fd5b505afa1580156118e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190a9190613411565b6001600160a01b0316146119595760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610255565b6000546040516370a0823160e01b81523060048201526119ed9183916001600160a01b03909116906370a082319060240160206040518083038186803b1580156119a257600080fd5b505afa1580156119b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119da91906135e6565b6000546001600160a01b0316919061290d565b6040516370a0823160e01b81523060048201526108049082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906024015b60206040518083038186803b158015611a5357600080fd5b505afa158015611a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8b91906135e6565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061290d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611b1557600080fd5b505afa158015611b29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4d9190613411565b6001600160a01b0316336001600160a01b031614611b7d5760405162461bcd60e51b815260040161025590613723565b6001600160a01b038116611bd35760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610255565b6002546001600160a01b0382811691161415611c295760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610255565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6007546040516370a0823160e01b8152306004820152600091611d0d916001600160a01b03909116906370a08231906024015b60206040518083038186803b158015611cd057600080fd5b505afa158015611ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0891906135e6565b612970565b905090565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611d6357600080fd5b505afa158015611d77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9b91906134e9565b611db75760405162461bcd60e51b8152600401610255906136f3565b6002546001600160a01b0316611e075760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610255565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611e895760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610255565b611e9281610c7e565b15611ed65760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610255565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611f1657600254611f11906001600160a01b031647612a1b565b610804565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611f5857600080fd5b505afa158015611f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9091906135e6565b600254909150610a7d906001600160a01b0384811691168361290d565b6000611fb7612b34565b6040516370a0823160e01b8152306004820152611d0d9073c00e94cb662c3520282e6f5717214004a7f26888906370a082319060240160206040518083038186803b15801561200557600080fd5b505afa158015612019573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203d91906135e6565b612c09565b61204b81612d10565b506040516370a0823160e01b8152306004820152610804907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401611a3b565b6040516315895f4760e31b815260048101839052600090819073835482fe0532f169024d5e9410199369aad5c77e9063ac4afa389060240160006040518083038186803b15801561210e57600080fd5b505afa158015612122573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261214a9190810190613509565b509093505050506001600160a01b0381166121a75760405162461bcd60e51b815260206004820152601d60248201527f726172692d667573652d696e76616c69642d636f6d7074726f6c6c65720000006044820152606401610255565b6001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214156121d157600092505b6040516318ffa3fd60e11b81526001600160a01b038481166004830152600091908316906331ff47fa9060240160206040518083038186803b15801561221657600080fd5b505afa15801561222a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224e9190613411565b90506001600160a01b0381166122a65760405162461bcd60e51b815260206004820152601860248201527f726172692d667573652d696e76616c69642d63746f6b656e00000000000000006044820152606401610255565b949350505050565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b15801561231657600080fd5b505afa15801561232a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234e91906135e6565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b1580156123b357600080fd5b505afa1580156123c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123eb91906135e6565b90506123f681612e06565b945061240181612ef4565b935061240c82612f45565b92505050909192565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561247757600080fd5b505afa15801561248b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124af91906135e6565b9050801561080457604051632e1a7d4d60e01b81526004810182905273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290632e1a7d4d90602401600060405180830381600087803b15801561250457600080fd5b505af1158015612518573d6000803e3d6000fd5b50505050600760009054906101000a90046001600160a01b03166001600160a01b0316631249c58b826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561256c57600080fd5b505af1158015612580573d6000803e3d6000fd5b505050505050565b6125dc6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612f56565b600754612616906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683612f56565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561266757600080fd5b505afa15801561267b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269f91906135e6565b811015610a7d57600354604051636e74a6f760e01b815260048101839052612740916001600160a01b031690636e74a6f79060240160206040518083038186803b1580156126ec57600080fd5b505afa158015612700573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127249190613411565b73c00e94cb662c3520282e6f5717214004a7f268889084612f56565b8061274a81613829565b915050612619565b60035460048054600554604051630f30f2d360e21b81526001600160a01b0390941693633cc3cb4c936127b59373c00e94cb662c3520282e6f5717214004a7f268889373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc293919290910161363b565b602060405180830381600087803b1580156127cf57600080fd5b505af11580156127e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128079190613411565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2146114c15760035460048054600554604051630f30f2d360e21b81526001600160a01b0390941693633cc3cb4c936128bb9373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2937f000000000000000000000000000000000000000000000000000000000000000093919290910161363b565b602060405180830381600087803b1580156128d557600080fd5b505af11580156128e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108049190613411565b6040516001600160a01b03831660248201526044810182905261140290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261307a565b6000670de0b6b3a7640000600760009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156129c957600080fd5b505afa1580156129dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0191906135e6565b612a0b90846137c3565b612a1591906137a3565b92915050565b80471015612a6b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610255565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612ab8576040519150601f19603f3d011682016040523d82523d6000602084013e612abd565b606091505b50509050806114025760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610255565b60408051600180825281830190925260009160208083019080368337505060075482519293506001600160a01b031691839150600090612b8457634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015260405162e1ed9760e51b8152733d9819210a31b4961b30ef54be2aed79b9c9cd3b90631c3db2e090612bd49030908590600401613664565b600060405180830381600087803b158015612bee57600080fd5b505af1158015612c02573d6000803e3d6000fd5b5050505050565b60008115612cd4576003546040516340b4c54560e11b81526001600160a01b03909116906381698a8a90612c7c9073c00e94cb662c3520282e6f5717214004a7f26888907f000000000000000000000000000000000000000000000000000000000000000090879060009060040161363b565b60006040518083038186803b158015612c9457600080fd5b505afa158015612ca8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612cd0919081019061342d565b9150505b6007546040516370a0823160e01b8152306004820152612d06916001600160a01b0316906370a0823190602401611cb8565b612a15908261378b565b6007546040516370a0823160e01b81523060048201526000918291612d47916001600160a01b0316906370a0823190602401611cb8565b90506000600760009054906101000a90046001600160a01b03166001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b158015612d9957600080fd5b505afa158015612dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd191906135e6565b90506000818510612de25781612de4565b845b9050612dfd838210612df65783612df8565b815b61314c565b95945050505050565b6007546040516370a0823160e01b81523060048201526000918291612e3d916001600160a01b0316906370a0823190602401611cb8565b905082811115612e5657612e54612df884836137e2565b505b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612eb557600080fd5b505afa158015612ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eed91906135e6565b9392505050565b6007546040516370a0823160e01b81523060048201526000918291612f2b916001600160a01b0316906370a0823190602401611cb8565b905082811015612f3f57612eed81846137e2565b50919050565b60008115610c9057612a1582612d10565b801580612fdf5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612fa557600080fd5b505afa158015612fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fdd91906135e6565b155b61304a5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610255565b6040516001600160a01b03831660248201526044810182905261140290849063095ea7b360e01b90606401612939565b60006130cf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661322b9092919063ffffffff16565b80519091501561140257808060200190518101906130ed91906134e9565b6114025760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610255565b600081156132275760075460405163852a12e360e01b8152600481018490526001600160a01b039091169063852a12e390602401602060405180830381600087803b15801561319a57600080fd5b505af11580156131ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d291906135e6565b1561321f5760405162461bcd60e51b815260206004820152601d60248201527f77697468647261772d66726f6d2d636f6d706f756e642d6661696c65640000006044820152606401610255565b61322761323a565b5090565b60606122a68484600085613289565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b158015612bee57600080fd5b6060824710156132ea5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610255565b843b6133385760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610255565b600080866001600160a01b03168587604051613354919061361f565b60006040518083038185875af1925050503d8060008114613391576040519150601f19603f3d011682016040523d82523d6000602084013e613396565b606091505b50915091506133a68282866133b1565b979650505050505050565b606083156133c0575081612eed565b8251156133d05782518084602001fd5b8160405162461bcd60e51b815260040161025591906136c0565b8051610c9081613870565b600060208284031215613406578081fd5b8135612eed81613870565b600060208284031215613422578081fd5b8151612eed81613870565b6000806040838503121561343f578081fd5b825167ffffffffffffffff80821115613456578283fd5b818501915085601f830112613469578283fd5b815160208282111561347d5761347d61385a565b8160051b925061348e81840161375a565b8281528181019085830185870184018b10156134a8578788fd5b8796505b848710156134d657805195506134c186613870565b858352600196909601959183019183016134ac565b5097909101519698969750505050505050565b6000602082840312156134fa578081fd5b81518015158114612eed578182fd5b600080600080600060a08688031215613520578081fd5b855167ffffffffffffffff80821115613537578283fd5b818801915088601f83011261354a578283fd5b81518181111561355c5761355c61385a565b61356f601f8201601f191660200161375a565b9150808252896020828501011115613585578384fd5b6135968160208401602086016137f9565b5095506135a79050602087016133ea565b93506135b5604087016133ea565b6060870151608090970151959894975095949392505050565b6000602082840312156135df578081fd5b5035919050565b6000602082840312156135f7578081fd5b5051919050565b60008060408385031215613610578182fd5b50508035926020909101359150565b600082516136318184602087016137f9565b9190910192915050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b818110156136b2578551851683529483019491830191600101613694565b509098975050505050505050565b60006020825282518060208401526136df8160408501602087016137f9565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156137835761378361385a565b604052919050565b6000821982111561379e5761379e613844565b500190565b6000826137be57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156137dd576137dd613844565b500290565b6000828210156137f4576137f4613844565b500390565b60005b838110156138145781810151838201526020016137fc565b83811115613823576000848401525b50505050565b600060001982141561383d5761383d613844565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461080457600080fdfea264697066735822122064b511f1ca3a9f94d2a421d1f0ce00a3010f91e46069e51fd6d825ceb823bc5d64736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106101dc5760003560e01c80639b0db5d011610102578063d2c35ce811610095578063ec78e83211610064578063ec78e832146105f3578063fb589de214610613578063fc0c546a14610631578063ffa1ad741461064f57610260565b8063d2c35ce814610589578063d4c3eea0146105a9578063e00af4a7146105be578063e645c202146105de57610260565b8063b2016bd4116100d1578063b2016bd4146104ff578063c415b95c14610533578063cd2d7ebe14610553578063ce5494bb1461056957610260565b80639b0db5d01461046a578063a3f4df7e14610480578063a923b2a6146104ca578063aa101886146104ea57610260565b8063440d72481161017a578063709d039d11610149578063709d039d146104005780637d7c2a1c14610420578063951dc22c1461043557806399b71d5c1461045557610260565b8063440d7248146103705780634c36fad7146103a05780634dda5222146103c057806367f5e4b8146103e057610260565b80631aedeabe116101b65780631aedeabe146102f65780632e1a7d4d1461031a5780634032b72b1461033a57806342189c8f1461035a57610260565b806314ae9f2e1461026557806316f0115b1461028557806319ab453c146102d657610260565b36610260576007546001600160a01b031633148061020d57503373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b61025e5760405162461bcd60e51b815260206004820152601960248201527f6e6f742d616c6c6f7765642d746f2d73656e642d65746865720000000000000060448201526064015b60405180910390fd5b005b600080fd5b34801561027157600080fd5b5061025e6102803660046133f5565b610681565b34801561029157600080fd5b506102b97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102e257600080fd5b5061025e6102f13660046133f5565b610807565b34801561030257600080fd5b5061030c60065481565b6040519081526020016102cd565b34801561032657600080fd5b5061025e6103353660046135ce565b610a81565b34801561034657600080fd5b5061025e6103553660046133f5565b610afe565b34801561036657600080fd5b5061030c60045481565b34801561037c57600080fd5b5061039061038b3660046133f5565b610c7e565b60405190151581526020016102cd565b3480156103ac57600080fd5b5061025e6103bb3660046133f5565b610c95565b3480156103cc57600080fd5b5061025e6103db3660046135ce565b610e48565b3480156103ec57600080fd5b5061025e6103fb3660046135ce565b61116c565b34801561040c57600080fd5b506003546102b9906001600160a01b031681565b34801561042c57600080fd5b5061025e6112b8565b34801561044157600080fd5b506001546102b9906001600160a01b031681565b34801561046157600080fd5b5061025e611407565b34801561047657600080fd5b5061030c60085481565b34801561048c57600080fd5b506104bd6040518060400160405280601181526020017052617269467573652d537472617465677960781b81525081565b6040516102cd91906136c0565b3480156104d657600080fd5b5061025e6104e53660046135fe565b6114c3565b3480156104f657600080fd5b5061025e6116f8565b34801561050b57600080fd5b506102b97f000000000000000000000000000000000000000000000000000000000000000081565b34801561053f57600080fd5b506002546102b9906001600160a01b031681565b34801561055f57600080fd5b5061030c60055481565b34801561057557600080fd5b5061025e6105843660046133f5565b6117a5565b34801561059557600080fd5b5061025e6105a43660046133f5565b611abc565b3480156105b557600080fd5b5061030c611c85565b3480156105ca57600080fd5b5061025e6105d93660046133f5565b611d12565b3480156105ea57600080fd5b5061030c611fad565b3480156105ff57600080fd5b506000546102b9906001600160a01b031681565b34801561061f57600080fd5b5061030c61062e3660046135ce565b90565b34801561063d57600080fd5b506000546001600160a01b03166102b9565b34801561065b57600080fd5b506104bd60405180604001604052806006815260200165332e302e313360d01b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156106da57600080fd5b505afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107129190613411565b6001600160a01b0316336001600160a01b0316146107425760405162461bcd60e51b815260040161025590613723565b600154604051631484968760e11b81526001600160a01b038381166004830152909116906329092d0e90602401602060405180830381600087803b15801561078957600080fd5b505af115801561079d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c191906134e9565b6108045760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610255565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561086057600080fd5b505afa158015610874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108989190613411565b6001600160a01b0316336001600160a01b0316146108c85760405162461bcd60e51b815260040161025590613723565b6001546001600160a01b0316156109215760405162461bcd60e51b815260206004820152601b60248201527f6b65657065722d6c6973742d616c72656164792d6372656174656400000000006044820152606401610255565b6000819050806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561096157600080fd5b505af1158015610975573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109999190613411565b600180546001600160a01b0319166001600160a01b03929092169182179055630a3b0a4f6109c43390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b158015610a0557600080fd5b505af1158015610a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3d91906134e9565b610a7d5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610255565b5050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610af55760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b6044820152606401610255565b61080481612042565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5757600080fd5b505afa158015610b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8f9190613411565b6001600160a01b0316336001600160a01b031614610bbf5760405162461bcd60e51b815260040161025590613723565b600154604051630a3b0a4f60e01b81526001600160a01b03838116600483015290911690630a3b0a4f90602401602060405180830381600087803b158015610c0657600080fd5b505af1158015610c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3e91906134e9565b6108045760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610255565b6007546001600160a01b038281169116145b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610cee57600080fd5b505afa158015610d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d269190613411565b6001600160a01b0316336001600160a01b031614610d565760405162461bcd60e51b815260040161025590613723565b6001600160a01b038116610da15760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401610255565b6003546001600160a01b0382811691161415610dec5760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b6044820152606401610255565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610e9957600080fd5b505afa158015610ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed191906134e9565b610eed5760405162461bcd60e51b8152600401610255906136f3565b6000610f19827f00000000000000000000000000000000000000000000000000000000000000006120be565b6007549091506001600160a01b0380831691161415610f6b5760405162461bcd60e51b815260206004820152600e60248201526d1cd85b594b599d5cd94b5c1bdbdb60921b6044820152606401610255565b6007546040516370a0823160e01b81523060048201526001600160a01b039091169063db006a759082906370a082319060240160206040518083038186803b158015610fb657600080fd5b505afa158015610fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fee91906135e6565b6040518263ffffffff1660e01b815260040161100c91815260200190565b602060405180830381600087803b15801561102657600080fd5b505af115801561103a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105e91906135e6565b156110ab5760405162461bcd60e51b815260206004820152601e60248201527f77697468647261772d66726f6d2d667573652d706f6f6c2d6661696c656400006044820152606401610255565b806001600160a01b0316631249c58b476040518263ffffffff1660e01b81526004016000604051808303818588803b1580156110e657600080fd5b505af11580156110fa573d6000803e3d6000fd5b50506007546040516001600160a01b03868116955090911692508591507f7725294be69fa7d941c001b388e2086daa9acdf58fbbc7aef3fd8cce3c316b6e90600090a4600780546001600160a01b039092166001600160a01b0319928316811790915560008054909216179055600855565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156111c557600080fd5b505afa1580156111d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fd9190613411565b6001600160a01b0316336001600160a01b03161461122d5760405162461bcd60e51b815260040161025590613723565b6127108111156112785760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b6044820152606401610255565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561130957600080fd5b505afa15801561131d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134191906134e9565b61135d5760405162461bcd60e51b8152600401610255906136f3565b600080600061136a6122ae565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b1580156113e257600080fd5b505af11580156113f6573d6000803e3d6000fd5b50505050611402612415565b505050565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561145857600080fd5b505afa15801561146c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149091906134e9565b6114ac5760405162461bcd60e51b8152600401610255906136f3565b6114b66000612588565b6114c1600019612588565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561151c57600080fd5b505afa158015611530573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115549190613411565b6001600160a01b0316336001600160a01b0316146115845760405162461bcd60e51b815260040161025590613723565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156115d257600080fd5b505afa1580156115e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160a91906135e6565b811061164f5760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b6044820152606401610255565b8161165a5760045491505b603b82116116a25760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b6044820152606401610255565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561174957600080fd5b505afa15801561175d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178191906134e9565b61179d5760405162461bcd60e51b8152600401610255906136f3565b6114c1612752565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146118195760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b6044820152606401610255565b6001600160a01b03811661186f5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610255565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118d257600080fd5b505afa1580156118e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190a9190613411565b6001600160a01b0316146119595760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610255565b6000546040516370a0823160e01b81523060048201526119ed9183916001600160a01b03909116906370a082319060240160206040518083038186803b1580156119a257600080fd5b505afa1580156119b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119da91906135e6565b6000546001600160a01b0316919061290d565b6040516370a0823160e01b81523060048201526108049082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906024015b60206040518083038186803b158015611a5357600080fd5b505afa158015611a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8b91906135e6565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061290d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611b1557600080fd5b505afa158015611b29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4d9190613411565b6001600160a01b0316336001600160a01b031614611b7d5760405162461bcd60e51b815260040161025590613723565b6001600160a01b038116611bd35760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610255565b6002546001600160a01b0382811691161415611c295760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610255565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6007546040516370a0823160e01b8152306004820152600091611d0d916001600160a01b03909116906370a08231906024015b60206040518083038186803b158015611cd057600080fd5b505afa158015611ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0891906135e6565b612970565b905090565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611d6357600080fd5b505afa158015611d77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9b91906134e9565b611db75760405162461bcd60e51b8152600401610255906136f3565b6002546001600160a01b0316611e075760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610255565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611e895760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610255565b611e9281610c7e565b15611ed65760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610255565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611f1657600254611f11906001600160a01b031647612a1b565b610804565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611f5857600080fd5b505afa158015611f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9091906135e6565b600254909150610a7d906001600160a01b0384811691168361290d565b6000611fb7612b34565b6040516370a0823160e01b8152306004820152611d0d9073c00e94cb662c3520282e6f5717214004a7f26888906370a082319060240160206040518083038186803b15801561200557600080fd5b505afa158015612019573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203d91906135e6565b612c09565b61204b81612d10565b506040516370a0823160e01b8152306004820152610804907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401611a3b565b6040516315895f4760e31b815260048101839052600090819073835482fe0532f169024d5e9410199369aad5c77e9063ac4afa389060240160006040518083038186803b15801561210e57600080fd5b505afa158015612122573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261214a9190810190613509565b509093505050506001600160a01b0381166121a75760405162461bcd60e51b815260206004820152601d60248201527f726172692d667573652d696e76616c69642d636f6d7074726f6c6c65720000006044820152606401610255565b6001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214156121d157600092505b6040516318ffa3fd60e11b81526001600160a01b038481166004830152600091908316906331ff47fa9060240160206040518083038186803b15801561221657600080fd5b505afa15801561222a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224e9190613411565b90506001600160a01b0381166122a65760405162461bcd60e51b815260206004820152601860248201527f726172692d667573652d696e76616c69642d63746f6b656e00000000000000006044820152606401610255565b949350505050565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b15801561231657600080fd5b505afa15801561232a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234e91906135e6565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b1580156123b357600080fd5b505afa1580156123c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123eb91906135e6565b90506123f681612e06565b945061240181612ef4565b935061240c82612f45565b92505050909192565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561247757600080fd5b505afa15801561248b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124af91906135e6565b9050801561080457604051632e1a7d4d60e01b81526004810182905273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290632e1a7d4d90602401600060405180830381600087803b15801561250457600080fd5b505af1158015612518573d6000803e3d6000fd5b50505050600760009054906101000a90046001600160a01b03166001600160a01b0316631249c58b826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561256c57600080fd5b505af1158015612580573d6000803e3d6000fd5b505050505050565b6125dc6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612f56565b600754612616906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683612f56565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561266757600080fd5b505afa15801561267b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269f91906135e6565b811015610a7d57600354604051636e74a6f760e01b815260048101839052612740916001600160a01b031690636e74a6f79060240160206040518083038186803b1580156126ec57600080fd5b505afa158015612700573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127249190613411565b73c00e94cb662c3520282e6f5717214004a7f268889084612f56565b8061274a81613829565b915050612619565b60035460048054600554604051630f30f2d360e21b81526001600160a01b0390941693633cc3cb4c936127b59373c00e94cb662c3520282e6f5717214004a7f268889373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc293919290910161363b565b602060405180830381600087803b1580156127cf57600080fd5b505af11580156127e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128079190613411565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2146114c15760035460048054600554604051630f30f2d360e21b81526001600160a01b0390941693633cc3cb4c936128bb9373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2937f000000000000000000000000000000000000000000000000000000000000000093919290910161363b565b602060405180830381600087803b1580156128d557600080fd5b505af11580156128e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108049190613411565b6040516001600160a01b03831660248201526044810182905261140290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261307a565b6000670de0b6b3a7640000600760009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156129c957600080fd5b505afa1580156129dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0191906135e6565b612a0b90846137c3565b612a1591906137a3565b92915050565b80471015612a6b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610255565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612ab8576040519150601f19603f3d011682016040523d82523d6000602084013e612abd565b606091505b50509050806114025760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610255565b60408051600180825281830190925260009160208083019080368337505060075482519293506001600160a01b031691839150600090612b8457634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015260405162e1ed9760e51b8152733d9819210a31b4961b30ef54be2aed79b9c9cd3b90631c3db2e090612bd49030908590600401613664565b600060405180830381600087803b158015612bee57600080fd5b505af1158015612c02573d6000803e3d6000fd5b5050505050565b60008115612cd4576003546040516340b4c54560e11b81526001600160a01b03909116906381698a8a90612c7c9073c00e94cb662c3520282e6f5717214004a7f26888907f000000000000000000000000000000000000000000000000000000000000000090879060009060040161363b565b60006040518083038186803b158015612c9457600080fd5b505afa158015612ca8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612cd0919081019061342d565b9150505b6007546040516370a0823160e01b8152306004820152612d06916001600160a01b0316906370a0823190602401611cb8565b612a15908261378b565b6007546040516370a0823160e01b81523060048201526000918291612d47916001600160a01b0316906370a0823190602401611cb8565b90506000600760009054906101000a90046001600160a01b03166001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b158015612d9957600080fd5b505afa158015612dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd191906135e6565b90506000818510612de25781612de4565b845b9050612dfd838210612df65783612df8565b815b61314c565b95945050505050565b6007546040516370a0823160e01b81523060048201526000918291612e3d916001600160a01b0316906370a0823190602401611cb8565b905082811115612e5657612e54612df884836137e2565b505b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612eb557600080fd5b505afa158015612ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eed91906135e6565b9392505050565b6007546040516370a0823160e01b81523060048201526000918291612f2b916001600160a01b0316906370a0823190602401611cb8565b905082811015612f3f57612eed81846137e2565b50919050565b60008115610c9057612a1582612d10565b801580612fdf5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612fa557600080fd5b505afa158015612fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fdd91906135e6565b155b61304a5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610255565b6040516001600160a01b03831660248201526044810182905261140290849063095ea7b360e01b90606401612939565b60006130cf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661322b9092919063ffffffff16565b80519091501561140257808060200190518101906130ed91906134e9565b6114025760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610255565b600081156132275760075460405163852a12e360e01b8152600481018490526001600160a01b039091169063852a12e390602401602060405180830381600087803b15801561319a57600080fd5b505af11580156131ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d291906135e6565b1561321f5760405162461bcd60e51b815260206004820152601d60248201527f77697468647261772d66726f6d2d636f6d706f756e642d6661696c65640000006044820152606401610255565b61322761323a565b5090565b60606122a68484600085613289565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b158015612bee57600080fd5b6060824710156132ea5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610255565b843b6133385760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610255565b600080866001600160a01b03168587604051613354919061361f565b60006040518083038185875af1925050503d8060008114613391576040519150601f19603f3d011682016040523d82523d6000602084013e613396565b606091505b50915091506133a68282866133b1565b979650505050505050565b606083156133c0575081612eed565b8251156133d05782518084602001fd5b8160405162461bcd60e51b815260040161025591906136c0565b8051610c9081613870565b600060208284031215613406578081fd5b8135612eed81613870565b600060208284031215613422578081fd5b8151612eed81613870565b6000806040838503121561343f578081fd5b825167ffffffffffffffff80821115613456578283fd5b818501915085601f830112613469578283fd5b815160208282111561347d5761347d61385a565b8160051b925061348e81840161375a565b8281528181019085830185870184018b10156134a8578788fd5b8796505b848710156134d657805195506134c186613870565b858352600196909601959183019183016134ac565b5097909101519698969750505050505050565b6000602082840312156134fa578081fd5b81518015158114612eed578182fd5b600080600080600060a08688031215613520578081fd5b855167ffffffffffffffff80821115613537578283fd5b818801915088601f83011261354a578283fd5b81518181111561355c5761355c61385a565b61356f601f8201601f191660200161375a565b9150808252896020828501011115613585578384fd5b6135968160208401602086016137f9565b5095506135a79050602087016133ea565b93506135b5604087016133ea565b6060870151608090970151959894975095949392505050565b6000602082840312156135df578081fd5b5035919050565b6000602082840312156135f7578081fd5b5051919050565b60008060408385031215613610578182fd5b50508035926020909101359150565b600082516136318184602087016137f9565b9190910192915050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b818110156136b2578551851683529483019491830191600101613694565b509098975050505050505050565b60006020825282518060208401526136df8160408501602087016137f9565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156137835761378361385a565b604052919050565b6000821982111561379e5761379e613844565b500190565b6000826137be57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156137dd576137dd613844565b500290565b6000828210156137f4576137f4613844565b500390565b60005b838110156138145781810151838201526020016137fc565b83811115613823576000848401525b50505050565b600060001982141561383d5761383d613844565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461080457600080fdfea264697066735822122064b511f1ca3a9f94d2a421d1f0ce00a3010f91e46069e51fd6d825ceb823bc5d64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "convertFrom18(uint256)": {
        "details": "Convert from 18 decimals to token defined decimals. Default no conversion."
      },
      "init(address)": {
        "params": {
          "_addressListFactory": "To support same code in eth side chain, user _addressListFactory as param ethereum- 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3 polygon-0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291"
        }
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "migrateFusePool(uint256)": {
        "details": "Redeems cTokens from current fuse pool and mints cTokens of new Fuse Pool",
        "params": {
          "_newPoolId": "Fuse Pool ID"
        }
      },
      "rebalance()": {
        "details": "Rebalance profit, loss and investment of this strategy"
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweepERC20(address)": {
        "details": "sweep given token to feeCollector of strategy",
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "totalValue()": {
        "details": "Report total value in collateral token"
      },
      "totalValueCurrent()": {
        "details": "Report total value in collateral token"
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_swapManager": "swap manager address"
        }
      },
      "withdraw(uint256)": {
        "details": "Withdraw collateral token from lending pool.",
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "Deposit ETH in a Rari Fuse Pool and earn interest.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "init(address)": {
        "notice": "Create keeper list NOTE: Any function with onlyKeeper modifier will not work until this function is called. NOTE: Due to gas constraint this function cannot be called in constructor."
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "migrateFusePool(uint256)": {
        "notice": "Changes the underlying Fuse Pool to a new one"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "token()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "totalValue()": {
        "notice": "Calculate total value using underlying token"
      },
      "totalValueCurrent()": {
        "notice": "Calculate total value of asset under management (in real-time)"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13425,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyETH.sol:RariFuseStrategyETH",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13431,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyETH.sol:RariFuseStrategyETH",
        "label": "keepers",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAddressList)4320"
      },
      {
        "astId": 13434,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyETH.sol:RariFuseStrategyETH",
        "label": "feeCollector",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13437,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyETH.sol:RariFuseStrategyETH",
        "label": "swapManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISwapManager)4623"
      },
      {
        "astId": 13440,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyETH.sol:RariFuseStrategyETH",
        "label": "oraclePeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 13443,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyETH.sol:RariFuseStrategyETH",
        "label": "oracleRouterIdx",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 13446,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyETH.sol:RariFuseStrategyETH",
        "label": "swapSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 20185,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyETH.sol:RariFuseStrategyETH",
        "label": "cToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(CToken)4753"
      },
      {
        "astId": 32528,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyETH.sol:RariFuseStrategyETH",
        "label": "fusePoolId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(CToken)4753": {
        "encoding": "inplace",
        "label": "contract CToken",
        "numberOfBytes": "20"
      },
      "t_contract(IAddressList)4320": {
        "encoding": "inplace",
        "label": "contract IAddressList",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)4623": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}