{
  "address": "0xaBC64889601F01e7B26277Ef8756250d6ABf8c18",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gemJoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ilk",
          "type": "bytes32"
        }
      ],
      "name": "AddedGemJoin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultNum",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "CreatedVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultNum",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "TransferredVaultOwnership",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "mcdManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mcdDaiJoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mcdSpot",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mcdJug",
          "type": "address"
        }
      ],
      "name": "UpdatedMCDAddresses",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousTreasury",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "UpdatedTreasury",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gemJoins",
          "type": "address[]"
        }
      ],
      "name": "addGemJoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collateralType",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_collateralType",
          "type": "bytes32"
        }
      ],
      "name": "createVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNum",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultOwner",
          "type": "address"
        }
      ],
      "name": "getVaultBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateralLocked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultOwner",
          "type": "address"
        }
      ],
      "name": "getVaultDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "daiDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultOwner",
          "type": "address"
        }
      ],
      "name": "getVaultInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateralLocked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daiDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralUsdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_collateralType",
          "type": "bytes32"
        }
      ],
      "name": "maxAvailableDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mcdDaiJoin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "mcdGemJoin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mcdJug",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mcdManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mcdSpot",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "payback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposedGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferVaultOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferVaultOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mcdManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mcdDaiJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mcdSpot",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mcdJug",
          "type": "address"
        }
      ],
      "name": "updateMCDAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "whatWouldWithdrawDo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateralLocked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daiDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralUsdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x787250443d3b363388b83e6248428abf7d51acc72f52df87e74e2173afc0e12c",
  "receipt": {
    "to": null,
    "from": "0xB5AbDABE50b5193d4dB92a16011792B22bA3Ef51",
    "contractAddress": "0xaBC64889601F01e7B26277Ef8756250d6ABf8c18",
    "transactionIndex": 21,
    "gasUsed": "3248527",
    "logsBloom": "0x
    "blockHash": "0xb05663c62314f6a0f05da341a4285596124449255086abd9082446642550255c",
    "transactionHash": "0x787250443d3b363388b83e6248428abf7d51acc72f52df87e74e2173afc0e12c",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 12807972,
        "transactionHash": "0x787250443d3b363388b83e6248428abf7d51acc72f52df87e74e2173afc0e12c",
        "address": "0xaBC64889601F01e7B26277Ef8756250d6ABf8c18",
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b5abdabe50b5193d4db92a16011792b22ba3ef51"
        ],
        "data": "0x",
        "logIndex": 53,
        "blockHash": "0xb05663c62314f6a0f05da341a4285596124449255086abd9082446642550255c"
      }
    ],
    "blockNumber": 12807972,
    "cumulativeGasUsed": "5275016",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c3d492b34dbdb93ec393fc77342e476c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"AddedGemJoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultNum\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"CreatedVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultNum\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferredVaultOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mcdManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mcdDaiJoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mcdSpot\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mcdJug\",\"type\":\"address\"}],\"name\":\"UpdatedMCDAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousTreasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"UpdatedTreasury\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gemJoins\",\"type\":\"address[]\"}],\"name\":\"addGemJoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_collateralType\",\"type\":\"bytes32\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNum\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultOwner\",\"type\":\"address\"}],\"name\":\"getVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultOwner\",\"type\":\"address\"}],\"name\":\"getVaultDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daiDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultOwner\",\"type\":\"address\"}],\"name\":\"getVaultInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralUsdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_collateralType\",\"type\":\"bytes32\"}],\"name\":\"maxAvailableDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcdDaiJoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"mcdGemJoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcdJug\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcdManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcdSpot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferVaultOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferVaultOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mcdManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mcdDaiJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mcdSpot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mcdJug\",\"type\":\"address\"}],\"name\":\"updateMCDAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"whatWouldWithdrawDo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralUsdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptGovernorship()\":{\"details\":\"Allows new governor to accept governorship of the contract.\"},\"addGemJoin(address[])\":{\"details\":\"Add gemJoin adapter address from Maker in mapping\",\"params\":{\"_gemJoins\":\"Array of gem join addresses\"}},\"borrow(uint256)\":{\"details\":\"In edge case, when we hit DAI mint limit, we might end up borrowing less than what is being asked.\",\"params\":{\"_amount\":\"Dai amount to borrow. Actual borrow amount may be less than \\\"amount\\\"\"}},\"createVault(bytes32)\":{\"details\":\"Store caller of this function as vault owner.\",\"params\":{\"_collateralType\":\"Collateral type for Maker vault\"},\"returns\":{\"_vaultNum\":\"Newly created vault number\"}},\"depositCollateral(uint256)\":{\"details\":\"Deposit ERC20 collateral.\",\"params\":{\"_amount\":\"ERC20 amount to deposit.\"}},\"getVaultBalance(address)\":{\"details\":\"Get current collateral balance of vault.\",\"params\":{\"_vaultOwner\":\"Address of vault owner\"}},\"getVaultDebt(address)\":{\"details\":\"Get current dai debt of vault.\",\"params\":{\"_vaultOwner\":\"Address of vault owner\"}},\"getVaultInfo(address)\":{\"details\":\"Get vault info\",\"params\":{\"_vaultOwner\":\"Address of vault owner\"}},\"maxAvailableDai(bytes32)\":{\"params\":{\"_collateralType\":\"Collateral type.\"}},\"payback(uint256)\":{\"details\":\"Payback borrowed DAI.\",\"params\":{\"_amount\":\"Dai amount to payback.\"}},\"sweepErc20(address)\":{\"details\":\"sweep given ERC20 token to treasury pool\"},\"transferGovernorship(address)\":{\"details\":\"Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner.\"},\"transferVaultOwnership(address)\":{\"params\":{\"_newOwner\":\"Address of new owner of vault\"}},\"transferVaultOwnership(uint256,address,address)\":{\"params\":{\"_newOwner\":\"Address of new owner of vault\",\"_owner\":\"Address of owner of vault\",\"_vaultNum\":\"Number of vault being transferred\"}},\"updateMCDAddresses(address,address,address,address)\":{\"details\":\"Update MCD addresses.\"},\"whatWouldWithdrawDo(address,uint256)\":{\"details\":\"Calculate state based on withdraw amount.\",\"params\":{\"_amount\":\"Collateral amount to withdraw.\",\"_vaultOwner\":\"Address of vault owner\"}},\"withdrawCollateral(uint256)\":{\"details\":\"Withdraw collateral.\",\"params\":{\"_amount\":\"Collateral amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(uint256)\":{\"notice\":\"Borrow DAI.\"},\"createVault(bytes32)\":{\"notice\":\"Create new Maker vault\"},\"maxAvailableDai(bytes32)\":{\"notice\":\"Get max available DAI safe to borrow for given collateral type.\"},\"transferVaultOwnership(address)\":{\"notice\":\"Transfer vault ownership to another address/strategy\"},\"transferVaultOwnership(uint256,address,address)\":{\"notice\":\"Transfer vault ownership to another address/strategy\"},\"updateTreasury(address)\":{\"notice\":\"Update treasure address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/maker/CollateralManager.sol\":\"CollateralManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/Governed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\ncontract Governed is Context, Initializable {\\n    address public governor;\\n    address private proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * _initializeGoverned() function to initialization this contract\\n     */\\n    function _initializeGoverned() internal initializer {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor {\\n        require(governor == _msgSender(), \\\"not-the-governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(proposedGovernor == _msgSender(), \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x84da13fab3e3864d38d587d860a14f37693a14f0c585e7db9fb4d2d305d0bc0b\",\"license\":\"MIT\"},\"contracts/interfaces/maker/IMakerDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface ManagerLike {\\n    function cdpCan(\\n        address,\\n        uint256,\\n        address\\n    ) external view returns (uint256);\\n\\n    function ilks(uint256) external view returns (bytes32);\\n\\n    function owns(uint256) external view returns (address);\\n\\n    function urns(uint256) external view returns (address);\\n\\n    function vat() external view returns (address);\\n\\n    function open(bytes32, address) external returns (uint256);\\n\\n    function give(uint256, address) external;\\n\\n    function cdpAllow(\\n        uint256,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function urnAllow(address, uint256) external;\\n\\n    function frob(\\n        uint256,\\n        int256,\\n        int256\\n    ) external;\\n\\n    function flux(\\n        uint256,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function move(\\n        uint256,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function exit(\\n        address,\\n        uint256,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function quit(uint256, address) external;\\n\\n    function enter(address, uint256) external;\\n\\n    function shift(uint256, uint256) external;\\n}\\n\\ninterface VatLike {\\n    function can(address, address) external view returns (uint256);\\n\\n    function ilks(bytes32)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function dai(address) external view returns (uint256);\\n\\n    function urns(bytes32, address) external view returns (uint256, uint256);\\n\\n    function frob(\\n        bytes32,\\n        address,\\n        address,\\n        address,\\n        int256,\\n        int256\\n    ) external;\\n\\n    function hope(address) external;\\n\\n    function nope(address) external;\\n\\n    function move(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n}\\n\\ninterface GemJoinLike {\\n    function dec() external view returns (uint256);\\n\\n    function gem() external view returns (address);\\n\\n    function ilk() external view returns (bytes32);\\n\\n    function join(address, uint256) external payable;\\n\\n    function exit(address, uint256) external;\\n}\\n\\ninterface DaiJoinLike {\\n    function vat() external returns (VatLike);\\n\\n    function dai() external view returns (address);\\n\\n    function join(address, uint256) external payable;\\n\\n    function exit(address, uint256) external;\\n}\\n\\ninterface JugLike {\\n    function drip(bytes32) external returns (uint256);\\n}\\n\\ninterface SpotterLike {\\n    function ilks(bytes32) external view returns (address, uint256);\\n}\\n\",\"keccak256\":\"0xda4a32f9ce8c23893be4a69826b6ee7b2904b17dec104fcb7ceb61feef70d150\",\"license\":\"MIT\"},\"contracts/interfaces/paycer/ICollateralManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface ICollateralManager {\\n    function addGemJoin(address[] calldata _gemJoins) external;\\n\\n    function borrow(uint256 _amount) external;\\n\\n    function createVault(bytes32 _collateralType) external returns (uint256 _vaultNum);\\n\\n    function depositCollateral(uint256 _amount) external;\\n\\n    function payback(uint256 _amount) external;\\n\\n    function transferVaultOwnership(address _newOwner) external;\\n\\n    function withdrawCollateral(uint256 _amount) external;\\n\\n    function getVaultBalance(address _vaultOwner) external view returns (uint256 collateralLocked);\\n\\n    function getVaultDebt(address _vaultOwner) external view returns (uint256 daiDebt);\\n\\n    function getVaultInfo(address _vaultOwner)\\n        external\\n        view\\n        returns (\\n            uint256 collateralLocked,\\n            uint256 daiDebt,\\n            uint256 collateralUsdRate,\\n            uint256 collateralRatio,\\n            uint256 minimumDebt\\n        );\\n\\n    function mcdManager() external view returns (address);\\n\\n    function vaultNum(address _vaultOwner) external view returns (uint256 _vaultNum);\\n\\n    function whatWouldWithdrawDo(address _vaultOwner, uint256 _amount)\\n        external\\n        view\\n        returns (\\n            uint256 collateralLocked,\\n            uint256 daiDebt,\\n            uint256 collateralUsdRate,\\n            uint256 collateralRatio,\\n            uint256 minimumDebt\\n        );\\n}\\n\",\"keccak256\":\"0xedf3e2ac8ce311ac2b11686597eea017fce8ddae04cc3b5b5c46f81f3aa0ea11\",\"license\":\"MIT\"},\"contracts/strategies/maker/CollateralManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../Governed.sol\\\";\\nimport \\\"../../interfaces//maker/IMakerDAO.sol\\\";\\nimport \\\"../../interfaces/paycer/ICollateralManager.sol\\\";\\n\\ncontract DSMath {\\n    uint256 internal constant RAY = 10**27;\\n    uint256 internal constant WAD = 10**18;\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = ((x * y) + (RAY / 2)) / RAY;\\n    }\\n\\n    function toRad(uint256 wad) internal pure returns (uint256 rad) {\\n        rad = wad * RAY;\\n    }\\n\\n    /// @notice It will work only if _dec < 18\\n    function convertTo18(uint256 _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = _amt * 10**(18 - _dec);\\n    }\\n}\\n\\ncontract CollateralManager is ICollateralManager, DSMath, ReentrancyGuard, Governed {\\n    using SafeERC20 for IERC20;\\n\\n    // Vault number to collateral type\\n    mapping(uint256 => bytes32) public collateralType;\\n    // Vault owner to vault num mapping\\n    mapping(address => uint256) public override vaultNum;\\n    // Collateral type to Gem join address of that type\\n    mapping(bytes32 => address) public mcdGemJoin;\\n\\n    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address public override mcdManager = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\\n    address public mcdDaiJoin = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\\n    address public mcdSpot = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\\n    address public mcdJug = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\\n    address public treasury;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    event AddedGemJoin(address indexed gemJoin, bytes32 ilk);\\n    event CreatedVault(address indexed owner, uint256 indexed vaultNum, bytes32 indexed collateralType);\\n    event TransferredVaultOwnership(uint256 indexed vaultNum, address indexed previousOwner, address indexed newOwner);\\n    event UpdatedMCDAddresses(address mcdManager, address mcdDaiJoin, address mcdSpot, address mcdJug);\\n    event UpdatedTreasury(address indexed previousTreasury, address indexed newTreasury);\\n\\n    modifier onlyVaultOwner() {\\n        require(vaultNum[msg.sender] != 0, \\\"caller-doesn't-own-any-vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add gemJoin adapter address from Maker in mapping\\n     * @param _gemJoins Array of gem join addresses\\n     */\\n    function addGemJoin(address[] calldata _gemJoins) external override onlyGovernor {\\n        require(_gemJoins.length != 0, \\\"no-gemJoin-address\\\");\\n        for (uint256 i; i < _gemJoins.length; i++) {\\n            address gemJoin = _gemJoins[i];\\n            bytes32 ilk = GemJoinLike(gemJoin).ilk();\\n            mcdGemJoin[ilk] = gemJoin;\\n            emit AddedGemJoin(gemJoin, ilk);\\n        }\\n    }\\n\\n    /**\\n     * @notice Create new Maker vault\\n     * @dev Store caller of this function as vault owner.\\n     * @param _collateralType Collateral type for Maker vault\\n     * @return _vaultNum Newly created vault number\\n     */\\n    function createVault(bytes32 _collateralType) external override returns (uint256 _vaultNum) {\\n        require(vaultNum[msg.sender] == 0, \\\"caller-owns-another-vault\\\");\\n        ManagerLike manager = ManagerLike(mcdManager);\\n        _vaultNum = manager.open(_collateralType, address(this));\\n        manager.cdpAllow(_vaultNum, address(this), 1);\\n\\n        vaultNum[msg.sender] = _vaultNum;\\n        collateralType[_vaultNum] = _collateralType;\\n        emit CreatedVault(msg.sender, _vaultNum, _collateralType);\\n    }\\n\\n    /**\\n     * @notice Transfer vault ownership to another address/strategy\\n     * @param _newOwner Address of new owner of vault\\n     */\\n    function transferVaultOwnership(address _newOwner) external override onlyVaultOwner {\\n        _transferVaultOwnership(vaultNum[msg.sender], msg.sender, _newOwner);\\n    }\\n\\n    /**\\n     * @notice Transfer vault ownership to another address/strategy\\n     * @param _vaultNum Number of vault being transferred\\n     * @param _owner Address of owner of vault\\n     * @param _newOwner Address of new owner of vault\\n     */\\n    function transferVaultOwnership(\\n        uint256 _vaultNum,\\n        address _owner,\\n        address _newOwner\\n    ) external onlyGovernor {\\n        require(_vaultNum != 0, \\\"vault-number-is-zero\\\");\\n        require(_owner != address(0), \\\"owner-address-zero\\\");\\n        _transferVaultOwnership(_vaultNum, _owner, _newOwner);\\n    }\\n\\n    /**\\n     * @dev Update MCD addresses.\\n     */\\n    function updateMCDAddresses(\\n        address _mcdManager,\\n        address _mcdDaiJoin,\\n        address _mcdSpot,\\n        address _mcdJug\\n    ) external onlyGovernor {\\n        require(_mcdManager != address(0), \\\"mcdManager-address-is-zero\\\");\\n        require(_mcdDaiJoin != address(0), \\\"mcdDaiJoin-address-is-zero\\\");\\n        require(_mcdSpot != address(0), \\\"mcdSpot-address-is-zero\\\");\\n        require(_mcdJug != address(0), \\\"mcdJug-address-is-zero\\\");\\n        mcdManager = _mcdManager;\\n        mcdDaiJoin = _mcdDaiJoin;\\n        mcdSpot = _mcdSpot;\\n        mcdJug = _mcdJug;\\n        emit UpdatedMCDAddresses(_mcdManager, _mcdDaiJoin, _mcdSpot, _mcdJug);\\n    }\\n\\n    /**\\n     * @notice Update treasure address\\n     */\\n    function updateTreasury(address _treasury) external onlyGovernor {\\n        require(_treasury != address(0), \\\"treasury-address-is-zero\\\");\\n        emit UpdatedTreasury(treasury, _treasury);\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @dev Deposit ERC20 collateral.\\n     * @param _amount ERC20 amount to deposit.\\n     */\\n    function depositCollateral(uint256 _amount) external override nonReentrant onlyVaultOwner {\\n        uint256 _vaultNum = vaultNum[msg.sender];\\n        // Receives Gem amount, approve and joins it into the vat.\\n        // Also convert amount to 18 decimal\\n        _amount = _joinGem(mcdGemJoin[collateralType[_vaultNum]], _amount);\\n\\n        ManagerLike manager = ManagerLike(mcdManager);\\n        // Locks Gem amount into the CDP\\n        VatLike(manager.vat()).frob(\\n            collateralType[_vaultNum],\\n            manager.urns(_vaultNum),\\n            address(this),\\n            address(this),\\n            int256(_amount),\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral.\\n     * @param _amount Collateral amount to withdraw.\\n     */\\n    function withdrawCollateral(uint256 _amount) external override nonReentrant onlyVaultOwner {\\n        uint256 _vaultNum = vaultNum[msg.sender];\\n        ManagerLike manager = ManagerLike(mcdManager);\\n        GemJoinLike gemJoin = GemJoinLike(mcdGemJoin[collateralType[_vaultNum]]);\\n        uint256 amount18 = convertTo18(gemJoin.dec(), _amount);\\n        // Unlocks Gem amount18 from the CDP\\n        manager.frob(_vaultNum, -int256(amount18), 0);\\n        // Moves Gem amount18 from the CDP urn to this address\\n        manager.flux(_vaultNum, address(this), amount18);\\n        // Exits Gem amount to this address as a token\\n        gemJoin.exit(address(this), _amount);\\n        // Send Gem to pool's address\\n        IERC20(gemJoin.gem()).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev Payback borrowed DAI.\\n     * @param _amount Dai amount to payback.\\n     */\\n    function payback(uint256 _amount) external override onlyVaultOwner {\\n        uint256 _vaultNum = vaultNum[msg.sender];\\n        ManagerLike manager = ManagerLike(mcdManager);\\n        address urn = manager.urns(_vaultNum);\\n        address vat = manager.vat();\\n        bytes32 ilk = collateralType[_vaultNum];\\n        // Calculate dai debt\\n        uint256 _daiDebt = _getVaultDebt(ilk, urn, vat);\\n        require(_daiDebt >= _amount, \\\"paying-excess-debt\\\");\\n        // Approve and join dai in vat\\n        _joinDai(urn, _amount);\\n        manager.frob(_vaultNum, 0, _getWipeAmount(ilk, urn, vat));\\n    }\\n\\n    /**\\n     * @notice Borrow DAI.\\n     * @dev In edge case, when we hit DAI mint limit, we might end up borrowing\\n     * less than what is being asked.\\n     * @param _amount Dai amount to borrow. Actual borrow amount may be less than \\\"amount\\\"\\n     */\\n    function borrow(uint256 _amount) external override onlyVaultOwner {\\n        uint256 _vaultNum = vaultNum[msg.sender];\\n        ManagerLike manager = ManagerLike(mcdManager);\\n        address vat = manager.vat();\\n        // Safety check in scenario where current debt and request borrow will exceed max dai limit\\n        uint256 _maxAmount = _maxAvailableDai(vat, collateralType[_vaultNum]);\\n        if (_amount > _maxAmount) {\\n            _amount = _maxAmount;\\n        }\\n\\n        // Generates debt in the CDP\\n        manager.frob(_vaultNum, 0, _getBorrowAmount(vat, manager.urns(_vaultNum), _vaultNum, _amount));\\n        // Moves the DAI amount (balance in the vat in rad) to pool's address\\n        manager.move(_vaultNum, address(this), toRad(_amount));\\n        // Allows adapter to access to pool's DAI balance in the vat\\n        if (VatLike(vat).can(address(this), mcdDaiJoin) == 0) {\\n            VatLike(vat).hope(mcdDaiJoin);\\n        }\\n        // Exits DAI as a token to user's address\\n        DaiJoinLike(mcdDaiJoin).exit(msg.sender, _amount);\\n    }\\n\\n    /// @dev sweep given ERC20 token to treasury pool\\n    function sweepErc20(address _fromToken) external {\\n        require(treasury != address(0), \\\"treasury-not-set\\\");\\n        uint256 amount = IERC20(_fromToken).balanceOf(address(this));\\n        IERC20(_fromToken).safeTransfer(treasury, amount);\\n    }\\n\\n    /**\\n     * @dev Get current dai debt of vault.\\n     * @param _vaultOwner Address of vault owner\\n     */\\n    function getVaultDebt(address _vaultOwner) external view override returns (uint256 daiDebt) {\\n        uint256 _vaultNum = vaultNum[_vaultOwner];\\n        require(_vaultNum != 0, \\\"invalid-vault-number\\\");\\n        address _urn = ManagerLike(mcdManager).urns(_vaultNum);\\n        address _vat = ManagerLike(mcdManager).vat();\\n        bytes32 _ilk = collateralType[_vaultNum];\\n        daiDebt = _getVaultDebt(_ilk, _urn, _vat);\\n    }\\n\\n    /**\\n     * @dev Get current collateral balance of vault.\\n     * @param _vaultOwner Address of vault owner\\n     */\\n    function getVaultBalance(address _vaultOwner) external view override returns (uint256 collateralLocked) {\\n        uint256 _vaultNum = vaultNum[_vaultOwner];\\n        require(_vaultNum != 0, \\\"invalid-vault-number\\\");\\n        address _vat = ManagerLike(mcdManager).vat();\\n        address _urn = ManagerLike(mcdManager).urns(_vaultNum);\\n        (collateralLocked, ) = VatLike(_vat).urns(collateralType[_vaultNum], _urn);\\n    }\\n\\n    /**\\n     * @dev Calculate state based on withdraw amount.\\n     * @param _vaultOwner Address of vault owner\\n     * @param _amount Collateral amount to withdraw.\\n     */\\n    function whatWouldWithdrawDo(address _vaultOwner, uint256 _amount)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 collateralLocked,\\n            uint256 daiDebt,\\n            uint256 collateralUsdRate,\\n            uint256 collateralRatio,\\n            uint256 minimumDebt\\n        )\\n    {\\n        uint256 _vaultNum = vaultNum[_vaultOwner];\\n        require(_vaultNum != 0, \\\"invalid-vault-number\\\");\\n        (collateralLocked, daiDebt, collateralUsdRate, collateralRatio, minimumDebt) = getVaultInfo(_vaultOwner);\\n\\n        GemJoinLike _gemJoin = GemJoinLike(mcdGemJoin[collateralType[_vaultNum]]);\\n        uint256 _amount18 = convertTo18(_gemJoin.dec(), _amount);\\n        require(_amount18 <= collateralLocked, \\\"insufficient-collateral-locked\\\");\\n        collateralLocked = collateralLocked - _amount18;\\n        collateralRatio = _getCollateralRatio(collateralLocked, collateralUsdRate, daiDebt);\\n    }\\n\\n    /**\\n     * @dev Get vault info\\n     * @param _vaultOwner Address of vault owner\\n     */\\n    function getVaultInfo(address _vaultOwner)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 collateralLocked,\\n            uint256 daiDebt,\\n            uint256 collateralUsdRate,\\n            uint256 collateralRatio,\\n            uint256 minimumDebt\\n        )\\n    {\\n        uint256 _vaultNum = vaultNum[_vaultOwner];\\n        require(_vaultNum != 0, \\\"invalid-vault-number\\\");\\n        (collateralLocked, collateralUsdRate, daiDebt, minimumDebt) = _getVaultInfo(_vaultNum);\\n        collateralRatio = _getCollateralRatio(collateralLocked, collateralUsdRate, daiDebt);\\n    }\\n\\n    /**\\n     * @notice Get max available DAI safe to borrow for given collateral type.\\n     * @param _collateralType Collateral type.\\n     */\\n    function maxAvailableDai(bytes32 _collateralType) public view returns (uint256) {\\n        return _maxAvailableDai(ManagerLike(mcdManager).vat(), _collateralType);\\n    }\\n\\n    /**\\n     * @notice Get max available DAI safe to borrow\\n     * @dev Calculation based on current DAI debt and DAI limit for given collateral type.\\n     * @param _vat Vat address\\n     * @param _collateralType Vault collateral type.\\n     */\\n    function _maxAvailableDai(address _vat, bytes32 _collateralType) internal view returns (uint256) {\\n        // Get stable coin Art(debt) [wad], rate [ray], line [rad]\\n        //solhint-disable-next-line var-name-mixedcase\\n        (uint256 Art, uint256 rate, , uint256 line, ) = VatLike(_vat).ilks(_collateralType);\\n        // Calculate total issued debt is Art * rate [rad]\\n        // Calculate total available dai [wad]\\n        uint256 _totalAvailableDai = (line - (Art * rate)) / RAY;\\n        // For safety reason, return 99% of available\\n        return (_totalAvailableDai * 99) / 100;\\n    }\\n\\n    function _joinDai(address _urn, uint256 _amount) internal {\\n        DaiJoinLike _daiJoin = DaiJoinLike(mcdDaiJoin);\\n        // Transfer Dai from strategy or pool to here\\n        IERC20(DAI).safeTransferFrom(msg.sender, address(this), _amount);\\n        // Approves adapter to move dai.\\n        IERC20(DAI).safeApprove(mcdDaiJoin, 0);\\n        IERC20(DAI).safeApprove(mcdDaiJoin, _amount);\\n        // Joins DAI into the vat\\n        _daiJoin.join(_urn, _amount);\\n    }\\n\\n    function _joinGem(address _adapter, uint256 _amount) internal returns (uint256) {\\n        GemJoinLike gemJoin = GemJoinLike(_adapter);\\n\\n        IERC20 token = IERC20(gemJoin.gem());\\n        // Transfer token from strategy or pool to here\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n        // Approves adapter to take the Gem amount\\n        token.safeApprove(_adapter, 0);\\n        token.safeApprove(_adapter, _amount);\\n        // Joins Gem collateral into the vat\\n        gemJoin.join(address(this), _amount);\\n        // Convert amount to 18 decimal\\n        return convertTo18(gemJoin.dec(), _amount);\\n    }\\n\\n    /**\\n     * @dev Get borrow dai amount.\\n     */\\n    function _getBorrowAmount(\\n        address _vat,\\n        address _urn,\\n        uint256 _vaultNum,\\n        uint256 _wad\\n    ) internal returns (int256 amount) {\\n        // Updates stability fee rate\\n        uint256 rate = JugLike(mcdJug).drip(collateralType[_vaultNum]);\\n        // Gets DAI balance of the urn in the vat\\n        uint256 dai = VatLike(_vat).dai(_urn);\\n        // If there was already enough DAI in the vat balance, just exits it without adding more debt\\n        if (dai < _wad * RAY) {\\n            // Calculates the needed amt so together with the existing dai in the vat is enough to exit wad amount of DAI tokens\\n            amount = int256(((_wad * RAY) - dai) / rate);\\n            // This is needed due lack of precision. It might need to sum an extra amt wei (for the given DAI wad amount)\\n            amount = (uint256(amount) * rate) < (_wad * RAY) ? amount + 1 : amount;\\n        }\\n    }\\n\\n    /// @notice Transfer vault ownership\\n    function _transferVaultOwnership(\\n        uint256 _vaultNum,\\n        address _owner,\\n        address _newOwner\\n    ) internal {\\n        require(_newOwner != address(0), \\\"new-owner-address-is-zero\\\");\\n        require(vaultNum[_owner] == _vaultNum, \\\"invalid-vault-num\\\");\\n        require(vaultNum[_newOwner] == 0, \\\"new-owner-owns-another-vault\\\");\\n\\n        vaultNum[_newOwner] = _vaultNum;\\n        vaultNum[_owner] = 0;\\n        emit TransferredVaultOwnership(_vaultNum, _owner, _newOwner);\\n    }\\n\\n    /**\\n     * @dev Get Vault Debt Amount.\\n     */\\n    function _getVaultDebt(\\n        bytes32 _ilk,\\n        address _urn,\\n        address _vat\\n    ) internal view returns (uint256 wad) {\\n        // Get normalized debt [wad]\\n        (, uint256 art) = VatLike(_vat).urns(_ilk, _urn);\\n        // Get stable coin rate [ray]\\n        (, uint256 rate, , , ) = VatLike(_vat).ilks(_ilk);\\n        // Get balance from vat [rad]\\n        uint256 dai = VatLike(_vat).dai(_urn);\\n        wad = _getVaultDebt(art, rate, dai);\\n    }\\n\\n    function _getVaultInfo(uint256 _vaultNum)\\n        internal\\n        view\\n        returns (\\n            uint256 collateralLocked,\\n            uint256 collateralUsdRate,\\n            uint256 daiDebt,\\n            uint256 minimumDebt\\n        )\\n    {\\n        address _urn = ManagerLike(mcdManager).urns(_vaultNum);\\n        address _vat = ManagerLike(mcdManager).vat();\\n        bytes32 _ilk = collateralType[_vaultNum];\\n        // Get minimum liquidation ratio [ray]\\n        (, uint256 mat) = SpotterLike(mcdSpot).ilks(_ilk);\\n        // Get collateral locked and normalized debt [wad] [wad]\\n        (uint256 ink, uint256 art) = VatLike(_vat).urns(_ilk, _urn);\\n        // Get stable coin and collateral rate  and min debt [ray] [ray] [rad]\\n        (, uint256 rate, uint256 spot, , uint256 dust) = VatLike(_vat).ilks(_ilk);\\n\\n        collateralLocked = ink;\\n        daiDebt = _getVaultDebt(art, rate, VatLike(_vat).dai(_urn));\\n        minimumDebt = dust / RAY;\\n        // Calculate collateral rate in 18 decimals\\n        collateralUsdRate = rmul(mat, spot) / 10**9;\\n    }\\n\\n    /**\\n     * @dev Get Payback amount.\\n     * @notice We need to fetch latest art, rate and dai to calculate payback amount.\\n     */\\n    function _getWipeAmount(\\n        bytes32 _ilk,\\n        address _urn,\\n        address _vat\\n    ) internal view returns (int256 amount) {\\n        // Get normalize debt, rate and dai balance from Vat\\n        (, uint256 _art) = VatLike(_vat).urns(_ilk, _urn);\\n        (, uint256 _rate, , , ) = VatLike(_vat).ilks(_ilk);\\n        uint256 _dai = VatLike(_vat).dai(_urn);\\n\\n        // Uses the whole dai balance in the vat to reduce the debt\\n        amount = int256(_dai / _rate);\\n        // Checks the calculated amt is not higher than urn.art (total debt), otherwise uses its value\\n        amount = uint256(amount) <= _art ? -amount : -int256(_art);\\n    }\\n\\n    /// @notice Get collateral ratio\\n    function _getCollateralRatio(\\n        uint256 _collateralLocked,\\n        uint256 _collateralRate,\\n        uint256 _daiDebt\\n    ) internal pure returns (uint256) {\\n        if (_collateralLocked == 0) {\\n            return 0;\\n        }\\n\\n        if (_daiDebt == 0) {\\n            return MAX_UINT_VALUE;\\n        }\\n\\n        require(_collateralRate != 0, \\\"collateral-rate-is-zero\\\");\\n        return wdiv(wmul(_collateralLocked, _collateralRate), _daiDebt);\\n    }\\n\\n    /// @notice Get vault debt\\n    function _getVaultDebt(\\n        uint256 _art,\\n        uint256 _rate,\\n        uint256 _dai\\n    ) internal pure returns (uint256 wad) {\\n        if (_dai < (_art * _rate)) {\\n            uint256 rad = ((_art * _rate) - _dai);\\n            wad = rad / RAY;\\n            wad = (wad * RAY) < rad ? wad + 1 : wad;\\n        } else {\\n            wad = 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8646c77bcd5b929ca911c730a26b123a3d9ce8b0afb95b472d70fe887f545793\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600680546001600160a01b0319908116735ef30b9986345249bc32d8928b7ee64de9435e3917909155600780548216739759a6ac90977b93b58547b4a71c78317f391a281790556008805482167365c79fcb50ca1594b025960e539ed7a9a6d434a3179055600980549091167319c0976f590d67707e62397c87829d896dc0f1f117905534801561009457600080fd5b5060016000818155815462010000600160b01b03191633620100008102919091179092556040518291907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a350613754806100f36000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063a6062d20116100f9578063cd1adb6111610097578063e071c0ca11610071578063e071c0ca1461041c578063e0bab4c41461042f578063eb64287c1461044a578063f3b27bc31461045d576101c4565b8063cd1adb61146103d6578063d3d7c002146103f6578063d9fe3eae14610409576101c4565b8063b6aa515b116100d3578063b6aa515b1461038a578063bad4a01f1461039d578063c0af0d3b146103b0578063c5ebeaec146103c3576101c4565b8063a6062d201461033b578063a846c2fd14610364578063b5719be114610377576101c4565b806357f6af2f1161016657806375efffaa1161014057806375efffaa146102ef5780637f51bb1f1461030257806390229af714610315578063921452ba14610328576101c4565b806357f6af2f146102b65780636112fe2e146102c957806361d027b3146102dc576101c4565b80632c8db08e116101a25780632c8db08e146102355780634ddda40c1461024857806352d5aee81461026857806353746ff7146102a3576101c4565b80630c340a24146101c957806311f5947e146101ff57806317799f3614610214575b600080fd5b6001546101e2906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61021261020d36600461334e565b610465565b005b61022761022236600461331e565b61053e565b6040519081526020016101f6565b61022761024336600461331e565b6106dd565b61022761025636600461331e565b60036020526000908152604090205481565b61027b610276366004613236565b610774565b604080519586526020860194909452928401919091526060830152608082015260a0016101f6565b6102126102b136600461328e565b6108dc565b6007546101e2906001600160a01b031681565b6102126102d736600461331e565b610a7e565b600a546101e2906001600160a01b031681565b6006546101e2906001600160a01b031681565b6102126103103660046131a3565b610d85565b61027b6103233660046131a3565b610e68565b6008546101e2906001600160a01b031681565b6101e261034936600461331e565b6005602052600090815260409020546001600160a01b031681565b61021261037236600461331e565b610ecf565b6009546101e2906001600160a01b031681565b6102126103983660046131a3565b6110f2565b6102126103ab36600461331e565b61119b565b6102276103be3660046131a3565b6113ff565b6102126103d136600461331e565b611563565b6102276103e43660046131a3565b60046020526000908152604090205481565b6102276104043660046131a3565b611914565b6102126104173660046131a3565b611af3565b61021261042a3660046131a3565b611bd9565b6101e2736b175474e89094c44da98b954eedeac495271d0f81565b6102126104583660046131db565b611c22565b610212611e3f565b6001546001600160a01b036201000090910416331461049f5760405162461bcd60e51b8152600401610496906134a5565b60405180910390fd5b826104e35760405162461bcd60e51b81526020600482015260146024820152737661756c742d6e756d6265722d69732d7a65726f60601b6044820152606401610496565b6001600160a01b03821661052e5760405162461bcd60e51b81526020600482015260126024820152716f776e65722d616464726573732d7a65726f60701b6044820152606401610496565b610539838383611f13565b505050565b336000908152600460205260408120541561059b5760405162461bcd60e51b815260206004820152601960248201527f63616c6c65722d6f776e732d616e6f746865722d7661756c74000000000000006044820152606401610496565b600654604051636090dec560e01b8152600481018490523060248201526001600160a01b03909116908190636090dec590604401602060405180830381600087803b1580156105e957600080fd5b505af11580156105fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106219190613336565b6040516305b1fdb160e11b815260048101829052306024820152600160448201529092506001600160a01b03821690630b63fb6290606401600060405180830381600087803b15801561067357600080fd5b505af1158015610687573d6000803e3d6000fd5b50503360008181526004602090815260408083208890558783526003909152808220889055518794508693507fa3e36cfe4cdf8e34133ab1f6a951dea0e51152268f1af758ebc5c464d348c05a9190a450919050565b600061076e600660009054906101000a90046001600160a01b03166001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561073057600080fd5b505afa158015610744573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076891906131bf565b83612082565b92915050565b6001600160a01b0382166000908152600460205260408120548190819081908190806107b25760405162461bcd60e51b815260040161049690613440565b6107bb88610e68565b6000868152600360209081526040808320548352600582528083205481516359de7d4160e11b81529151989e50969c50949a509298509096506001600160a01b039093169361086492859263b3bcfa8292600480840193829003018186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e9190613336565b8a612160565b9050878111156108b65760405162461bcd60e51b815260206004820152601e60248201527f696e73756666696369656e742d636f6c6c61746572616c2d6c6f636b656400006044820152606401610496565b6108c0818961367b565b97506108cd888789612189565b94505050509295509295909350565b6001546001600160a01b036201000090910416331461090d5760405162461bcd60e51b8152600401610496906134a5565b8061094f5760405162461bcd60e51b81526020600482015260126024820152716e6f2d67656d4a6f696e2d6164647265737360701b6044820152606401610496565b60005b8181101561053957600083838381811061097c57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061099191906131a3565b90506000816001600160a01b031663c5ce281e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ce57600080fd5b505afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190613336565b60008181526005602090815260409182902080546001600160a01b0319166001600160a01b038716908117909155915183815292935090917fe4a3d7d9a21eb6d0c1ebaaa1ad88c130b55df9b98d61973ec3da61725a03e308910160405180910390a250508080610a76906136be565b915050610952565b60026000541415610ad15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610496565b6002600090815533815260046020526040902054610b015760405162461bcd60e51b81526004016104969061346e565b3360009081526004602081815260408084205460065481865260038452828620548652600584528286205483516359de7d4160e11b8152935192966001600160a01b039283169691909216949193610bb493869363b3bcfa829383810193919291829003018186803b158015610b7657600080fd5b505afa158015610b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bae9190613336565b86612160565b90506001600160a01b0383166345e6bdcd85610bcf846136d9565b6040516001600160e01b031960e085901b1681526004810192909252602482015260006044820152606401600060405180830381600087803b158015610c1457600080fd5b505af1158015610c28573d6000803e3d6000fd5b50506040516313771f0760e31b815260048101879052306024820152604481018490526001600160a01b0386169250639bb8f8389150606401600060405180830381600087803b158015610c7b57600080fd5b505af1158015610c8f573d6000803e3d6000fd5b505060405163ef693bed60e01b8152306004820152602481018890526001600160a01b038516925063ef693bed9150604401600060405180830381600087803b158015610cdb57600080fd5b505af1158015610cef573d6000803e3d6000fd5b50505050610d793386846001600160a01b0316637bd2bea76040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3157600080fd5b505afa158015610d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6991906131bf565b6001600160a01b0316919061220e565b50506001600055505050565b6001546001600160a01b0362010000909104163314610db65760405162461bcd60e51b8152600401610496906134a5565b6001600160a01b038116610e0c5760405162461bcd60e51b815260206004820152601860248201527f74726561737572792d616464726573732d69732d7a65726f00000000000000006044820152606401610496565b600a546040516001600160a01b038084169216907f2ac12ebf7dfd56173c73b2e43941f0faed1c3f7fb6f959191a4ab4bdd3d32e2190600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116600090815260046020526040812054819081908190819080610ea65760405162461bcd60e51b815260040161049690613440565b610eaf81612271565b929850965094509150610ec3868587612189565b92505091939590929450565b33600090815260046020526040902054610efb5760405162461bcd60e51b81526004016104969061346e565b336000908152600460208190526040808320546006549151632726b07360e01b8152928301819052926001600160a01b03909116918290632726b0739060240160206040518083038186803b158015610f5357600080fd5b505afa158015610f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8b91906131bf565b90506000826001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc857600080fd5b505afa158015610fdc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100091906131bf565b60008581526003602052604081205491925061101d828585612601565b9050868110156110645760405162461bcd60e51b81526020600482015260126024820152711c185e5a5b99cb595e18d95cdccb5919589d60721b6044820152606401610496565b61106e8488612795565b846001600160a01b03166345e6bdcd87600061108b868989612881565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401600060405180830381600087803b1580156110d157600080fd5b505af11580156110e5573d6000803e3d6000fd5b5050505050505050505050565b6001546001600160a01b03620100009091041633146111235760405162461bcd60e51b8152600401610496906134a5565b6001600160a01b0381166111795760405162461bcd60e51b815260206004820152601960248201527f70726f706f7365642d676f7665726e6f722d69732d7a65726f000000000000006044820152606401610496565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600260005414156111ee5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610496565b600260009081553381526004602052604090205461121e5760405162461bcd60e51b81526004016104969061346e565b336000908152600460209081526040808320548084526003835281842054845260059092529091205461125a906001600160a01b031683612a35565b600654604080516336569e7760e01b815290519294506001600160a01b039091169182916336569e77916004808301926020929190829003018186803b1580156112a357600080fd5b505afa1580156112b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112db91906131bf565b6001600160a01b031663760887036003600085815260200190815260200160002054836001600160a01b0316632726b073866040518263ffffffff1660e01b815260040161132b91815260200190565b60206040518083038186803b15801561134357600080fd5b505afa158015611357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137b91906131bf565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b031660248201523060448201819052606482015260848101869052600060a482015260c401600060405180830381600087803b1580156113dd57600080fd5b505af11580156113f1573d6000803e3d6000fd5b505060016000555050505050565b6001600160a01b038116600090815260046020526040812054806114355760405162461bcd60e51b815260040161049690613440565b600654604051632726b07360e01b8152600481018390526000916001600160a01b031690632726b0739060240160206040518083038186803b15801561147a57600080fd5b505afa15801561148e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b291906131bf565b90506000600660009054906101000a90046001600160a01b03166001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561150457600080fd5b505afa158015611518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153c91906131bf565b600084815260036020526040902054909150611559818484612601565b9695505050505050565b3360009081526004602052604090205461158f5760405162461bcd60e51b81526004016104969061346e565b3360009081526004602081815260408084205460065482516336569e7760e01b8152925191956001600160a01b0390911694909385936336569e7793818401939091829003018186803b1580156115e557600080fd5b505afa1580156115f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161d91906131bf565b6000848152600360205260408120549192509061163b908390612082565b905080851115611649578094505b826001600160a01b03166345e6bdcd8560006116e486886001600160a01b0316632726b0738b6040518263ffffffff1660e01b815260040161168d91815260200190565b60206040518083038186803b1580156116a557600080fd5b505afa1580156116b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dd91906131bf565b8a8c612bd1565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401600060405180830381600087803b15801561172a57600080fd5b505af115801561173e573d6000803e3d6000fd5b50505050826001600160a01b031663f9f30db6853061175c89612d6f565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b1580156117aa57600080fd5b505af11580156117be573d6000803e3d6000fd5b5050600754604051634538c4eb60e01b81523060048201526001600160a01b0391821660248201529085169250634538c4eb915060440160206040518083038186803b15801561180d57600080fd5b505afa158015611821573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118459190613336565b6118a9576007546040516328ec8bf160e21b81526001600160a01b0391821660048201529083169063a3b22fc490602401600060405180830381600087803b15801561189057600080fd5b505af11580156118a4573d6000803e3d6000fd5b505050505b60075460405163ef693bed60e01b8152336004820152602481018790526001600160a01b039091169063ef693bed90604401600060405180830381600087803b1580156118f557600080fd5b505af1158015611909573d6000803e3d6000fd5b505050505050505050565b6001600160a01b0381166000908152600460205260408120548061194a5760405162461bcd60e51b815260040161049690613440565b600654604080516336569e7760e01b815290516000926001600160a01b0316916336569e77916004808301926020929190829003018186803b15801561198f57600080fd5b505afa1580156119a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c791906131bf565b600654604051632726b07360e01b8152600481018590529192506000916001600160a01b0390911690632726b0739060240160206040518083038186803b158015611a1157600080fd5b505afa158015611a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4991906131bf565b600084815260036020526040908190205490516309092f9760e21b81529192506001600160a01b03841691632424be5c91611a9a9185906004019182526001600160a01b0316602082015260400190565b604080518083038186803b158015611ab157600080fd5b505afa158015611ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae9919061338f565b5095945050505050565b600a546001600160a01b0316611b3e5760405162461bcd60e51b815260206004820152601060248201526f1d1c99585cdd5c9e4b5b9bdd0b5cd95d60821b6044820152606401610496565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611b8057600080fd5b505afa158015611b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb89190613336565b600a54909150611bd5906001600160a01b0384811691168361220e565b5050565b33600090815260046020526040902054611c055760405162461bcd60e51b81526004016104969061346e565b33600081815260046020526040902054611c1f9183611f13565b50565b6001546001600160a01b0362010000909104163314611c535760405162461bcd60e51b8152600401610496906134a5565b6001600160a01b038416611ca95760405162461bcd60e51b815260206004820152601a60248201527f6d63644d616e616765722d616464726573732d69732d7a65726f0000000000006044820152606401610496565b6001600160a01b038316611cff5760405162461bcd60e51b815260206004820152601a60248201527f6d63644461694a6f696e2d616464726573732d69732d7a65726f0000000000006044820152606401610496565b6001600160a01b038216611d555760405162461bcd60e51b815260206004820152601760248201527f6d636453706f742d616464726573732d69732d7a65726f0000000000000000006044820152606401610496565b6001600160a01b038116611da45760405162461bcd60e51b81526020600482015260166024820152756d63644a75672d616464726573732d69732d7a65726f60501b6044820152606401610496565b600680546001600160a01b038681166001600160a01b031992831681179093556007805487831690841681179091556008805487841690851681179091556009805493871693909416831790935560408051948552602085019190915283019190915260608201527f1c6ea4f4d62e36754911439dfcc968028b80950a549c66220947adb63435bee39060800160405180910390a150505050565b6002546001600160a01b03163314611e995760405162461bcd60e51b815260206004820152601960248201527f6e6f742d7468652d70726f706f7365642d676f7665726e6f72000000000000006044820152606401610496565b6002546001546040516001600160a01b039283169262010000909204909116907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d090600090a3600280546001805462010000600160b01b0319166001600160a01b03831662010000021790556001600160a01b0319169055565b6001600160a01b038116611f695760405162461bcd60e51b815260206004820152601960248201527f6e65772d6f776e65722d616464726573732d69732d7a65726f000000000000006044820152606401610496565b6001600160a01b0382166000908152600460205260409020548314611fc45760405162461bcd60e51b8152602060048201526011602482015270696e76616c69642d7661756c742d6e756d60781b6044820152606401610496565b6001600160a01b0381166000908152600460205260409020541561202a5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d6f776e65722d6f776e732d616e6f746865722d7661756c74000000006044820152606401610496565b6001600160a01b03808216600081815260046020526040808220879055928516808252838220829055925191929186917fec79eaf44c34230fee5c5b284135bd6df3c751840f31d612c29dab5ee349e2ac91a4505050565b600080600080856001600160a01b031663d9638d36866040518263ffffffff1660e01b81526004016120b691815260200190565b60a06040518083038186803b1580156120ce57600080fd5b505afa1580156120e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210691906133b2565b50935050925092506000676765c793fa10079d601b1b8385612128919061365c565b612132908461367b565b61213c9190613528565b9050606461214b82606361365c565b6121559190613528565b979650505050505050565b600061216d83601261367b565b61217890600a61358e565b612182908361365c565b9392505050565b60008361219857506000612182565b816121a65750600019612182565b826121f35760405162461bcd60e51b815260206004820152601760248201527f636f6c6c61746572616c2d726174652d69732d7a65726f0000000000000000006044820152606401610496565b6122066122008585612d86565b83612dba565b949350505050565b6040516001600160a01b03831660248201526044810182905261053990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612dda565b600654604051632726b07360e01b81526004810183905260009182918291829182916001600160a01b031690632726b0739060240160206040518083038186803b1580156122be57600080fd5b505afa1580156122d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f691906131bf565b90506000600660009054906101000a90046001600160a01b03166001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561234857600080fd5b505afa15801561235c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238091906131bf565b600088815260036020526040808220546008549151636cb1c69b60e11b815260048101829052939450926001600160a01b039091169063d9638d3690602401604080518083038186803b1580156123d657600080fd5b505afa1580156123ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240e9190613261565b6040516309092f9760e21b8152600481018590526001600160a01b038781166024830152919350600092508291861690632424be5c90604401604080518083038186803b15801561245e57600080fd5b505afa158015612472573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612496919061338f565b915091506000806000876001600160a01b031663d9638d36886040518263ffffffff1660e01b81526004016124cd91815260200190565b60a06040518083038186803b1580156124e557600080fd5b505afa1580156124f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251d91906133b2565b9450509350935050849c506125bd84848a6001600160a01b0316636c25b3468d6040518263ffffffff1660e01b815260040161256891906001600160a01b0391909116815260200190565b60206040518083038186803b15801561258057600080fd5b505afa158015612594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b89190613336565b612eac565b9a506125d4676765c793fa10079d601b1b82613528565b9950633b9aca006125e58784612f2d565b6125ef9190613528565b9b505050505050505050509193509193565b6040516309092f9760e21b8152600481018490526001600160a01b0383811660248301526000918291841690632424be5c90604401604080518083038186803b15801561264d57600080fd5b505afa158015612661573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612685919061338f565b604051636cb1c69b60e11b815260048101889052909250600091506001600160a01b0385169063d9638d369060240160a06040518083038186803b1580156126cc57600080fd5b505afa1580156126e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270491906133b2565b5050604051633612d9a360e11b81526001600160a01b0389811660048301529294506000935091871691636c25b346915060240160206040518083038186803b15801561275057600080fd5b505afa158015612764573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127889190613336565b9050612155838383612eac565b6007546001600160a01b03166127c1736b175474e89094c44da98b954eedeac495271d0f333085612f46565b6007546127ee90736b175474e89094c44da98b954eedeac495271d0f906001600160a01b03166000612f84565b60075461281a90736b175474e89094c44da98b954eedeac495271d0f906001600160a01b031684612f84565b604051633b4da69f60e01b81526001600160a01b03848116600483015260248201849052821690633b4da69f90604401600060405180830381600087803b15801561286457600080fd5b505af1158015612878573d6000803e3d6000fd5b50505050505050565b6040516309092f9760e21b8152600481018490526001600160a01b0383811660248301526000918291841690632424be5c90604401604080518083038186803b1580156128cd57600080fd5b505afa1580156128e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612905919061338f565b604051636cb1c69b60e11b815260048101889052909250600091506001600160a01b0385169063d9638d369060240160a06040518083038186803b15801561294c57600080fd5b505afa158015612960573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298491906133b2565b5050604051633612d9a360e11b81526001600160a01b0389811660048301529294506000935091871691636c25b346915060240160206040518083038186803b1580156129d057600080fd5b505afa1580156129e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a089190613336565b9050612a148282613528565b935082841115612a2c57612a27836136d9565b612155565b612155846136d9565b6000808390506000816001600160a01b0316637bd2bea76040518163ffffffff1660e01b815260040160206040518083038186803b158015612a7657600080fd5b505afa158015612a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aae91906131bf565b9050612ac56001600160a01b038216333087612f46565b612ada6001600160a01b038216866000612f84565b612aee6001600160a01b0382168686612f84565b604051633b4da69f60e01b8152306004820152602481018590526001600160a01b03831690633b4da69f90604401600060405180830381600087803b158015612b3657600080fd5b505af1158015612b4a573d6000803e3d6000fd5b50505050612bc8826001600160a01b031663b3bcfa826040518163ffffffff1660e01b815260040160206040518083038186803b158015612b8a57600080fd5b505afa158015612b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc29190613336565b85612160565b95945050505050565b60095460008381526003602052604080822054905163089c54b560e31b81526004810191909152909182916001600160a01b03909116906344e2a5a890602401602060405180830381600087803b158015612c2b57600080fd5b505af1158015612c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c639190613336565b604051633612d9a360e11b81526001600160a01b038781166004830152919250600091881690636c25b3469060240160206040518083038186803b158015612caa57600080fd5b505afa158015612cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce29190613336565b9050612cf9676765c793fa10079d601b1b8561365c565b811015612d65578181612d17676765c793fa10079d601b1b8761365c565b612d21919061367b565b612d2b9190613528565b9250612d42676765c793fa10079d601b1b8561365c565b612d4c838561365c565b10612d575782612d62565b612d628360016134cf565b92505b5050949350505050565b600061076e676765c793fa10079d601b1b8361365c565b6000670de0b6b3a7640000612d9c600282613528565b612da6848661365c565b612db09190613510565b6121829190613528565b600081612dc8600282613528565b612da6670de0b6b3a76400008661365c565b6000612e2f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130a89092919063ffffffff16565b8051909150156105395780806020019051810190612e4d91906132fe565b6105395760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610496565b6000612eb8838561365c565b821015612f2357600082612ecc858761365c565b612ed6919061367b565b9050612eed676765c793fa10079d601b1b82613528565b915080612f05676765c793fa10079d601b1b8461365c565b10612f105781612f1b565b612f1b826001613510565b915050612182565b5060009392505050565b6000676765c793fa10079d601b1b612d9c600282613528565b6040516001600160a01b0380851660248301528316604482015260648101829052612f7e9085906323b872dd60e01b9060840161223a565b50505050565b80158061300d5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612fd357600080fd5b505afa158015612fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300b9190613336565b155b6130785760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610496565b6040516001600160a01b03831660248201526044810182905261053990849063095ea7b360e01b9060640161223a565b6060612206848460008585843b6131015760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610496565b600080866001600160a01b0316858760405161311d91906133f1565b60006040518083038185875af1925050503d806000811461315a576040519150601f19603f3d011682016040523d82523d6000602084013e61315f565b606091505b5091509150612d6282828660608315613179575081612182565b8251156131895782518084602001fd5b8160405162461bcd60e51b8152600401610496919061340d565b6000602082840312156131b4578081fd5b813561218281613709565b6000602082840312156131d0578081fd5b815161218281613709565b600080600080608085870312156131f0578283fd5b84356131fb81613709565b9350602085013561320b81613709565b9250604085013561321b81613709565b9150606085013561322b81613709565b939692955090935050565b60008060408385031215613248578182fd5b823561325381613709565b946020939093013593505050565b60008060408385031215613273578182fd5b825161327e81613709565b6020939093015192949293505050565b600080602083850312156132a0578182fd5b823567ffffffffffffffff808211156132b7578384fd5b818501915085601f8301126132ca578384fd5b8135818111156132d8578485fd5b8660208260051b85010111156132ec578485fd5b60209290920196919550909350505050565b60006020828403121561330f578081fd5b81518015158114612182578182fd5b60006020828403121561332f578081fd5b5035919050565b600060208284031215613347578081fd5b5051919050565b600080600060608486031215613362578283fd5b83359250602084013561337481613709565b9150604084013561338481613709565b809150509250925092565b600080604083850312156133a1578182fd5b505080516020909101519092909150565b600080600080600060a086880312156133c9578081fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b60008251613403818460208701613692565b9190910192915050565b600060208252825180602084015261342c816040850160208701613692565b601f01601f19169190910160400192915050565b60208082526014908201527334b73b30b634b216bb30bab63a16b73ab6b132b960611b604082015260600190565b6020808252601c908201527f63616c6c65722d646f65736e27742d6f776e2d616e792d7661756c7400000000604082015260600190565b60208082526010908201526f3737ba16ba343296b3b7bb32b93737b960811b604082015260600190565b600080821280156001600160ff1b03849003851316156134f1576134f16136f3565b600160ff1b839003841281161561350a5761350a6136f3565b50500190565b60008219821115613523576135236136f3565b500190565b60008261354357634e487b7160e01b81526012600452602481fd5b500490565b80825b600180861161355a5750613585565b81870482111561356c5761356c6136f3565b8086161561357957918102915b9490941c93800261354b565b94509492505050565b600061218260001984846000826135a757506001612182565b816135b457506000612182565b81600181146135ca57600281146135d457613601565b6001915050612182565b60ff8411156135e5576135e56136f3565b6001841b9150848211156135fb576135fb6136f3565b50612182565b5060208310610133831016604e8410600b8410161715613634575081810a8381111561362f5761362f6136f3565b612182565b6136418484846001613548565b808604821115613653576136536136f3565b02949350505050565b6000816000190483118215151615613676576136766136f3565b500290565b60008282101561368d5761368d6136f3565b500390565b60005b838110156136ad578181015183820152602001613695565b83811115612f7e5750506000910152565b60006000198214156136d2576136d26136f3565b5060010190565b6000600160ff1b8214156136ef576136ef6136f3565b0390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114611c1f57600080fdfea2646970667358221220dd49a56e2ad61b8b9b52c6b9a78b03a556971281c5cfdd100e1a900d20535fe764736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c8063a6062d20116100f9578063cd1adb6111610097578063e071c0ca11610071578063e071c0ca1461041c578063e0bab4c41461042f578063eb64287c1461044a578063f3b27bc31461045d576101c4565b8063cd1adb61146103d6578063d3d7c002146103f6578063d9fe3eae14610409576101c4565b8063b6aa515b116100d3578063b6aa515b1461038a578063bad4a01f1461039d578063c0af0d3b146103b0578063c5ebeaec146103c3576101c4565b8063a6062d201461033b578063a846c2fd14610364578063b5719be114610377576101c4565b806357f6af2f1161016657806375efffaa1161014057806375efffaa146102ef5780637f51bb1f1461030257806390229af714610315578063921452ba14610328576101c4565b806357f6af2f146102b65780636112fe2e146102c957806361d027b3146102dc576101c4565b80632c8db08e116101a25780632c8db08e146102355780634ddda40c1461024857806352d5aee81461026857806353746ff7146102a3576101c4565b80630c340a24146101c957806311f5947e146101ff57806317799f3614610214575b600080fd5b6001546101e2906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61021261020d36600461334e565b610465565b005b61022761022236600461331e565b61053e565b6040519081526020016101f6565b61022761024336600461331e565b6106dd565b61022761025636600461331e565b60036020526000908152604090205481565b61027b610276366004613236565b610774565b604080519586526020860194909452928401919091526060830152608082015260a0016101f6565b6102126102b136600461328e565b6108dc565b6007546101e2906001600160a01b031681565b6102126102d736600461331e565b610a7e565b600a546101e2906001600160a01b031681565b6006546101e2906001600160a01b031681565b6102126103103660046131a3565b610d85565b61027b6103233660046131a3565b610e68565b6008546101e2906001600160a01b031681565b6101e261034936600461331e565b6005602052600090815260409020546001600160a01b031681565b61021261037236600461331e565b610ecf565b6009546101e2906001600160a01b031681565b6102126103983660046131a3565b6110f2565b6102126103ab36600461331e565b61119b565b6102276103be3660046131a3565b6113ff565b6102126103d136600461331e565b611563565b6102276103e43660046131a3565b60046020526000908152604090205481565b6102276104043660046131a3565b611914565b6102126104173660046131a3565b611af3565b61021261042a3660046131a3565b611bd9565b6101e2736b175474e89094c44da98b954eedeac495271d0f81565b6102126104583660046131db565b611c22565b610212611e3f565b6001546001600160a01b036201000090910416331461049f5760405162461bcd60e51b8152600401610496906134a5565b60405180910390fd5b826104e35760405162461bcd60e51b81526020600482015260146024820152737661756c742d6e756d6265722d69732d7a65726f60601b6044820152606401610496565b6001600160a01b03821661052e5760405162461bcd60e51b81526020600482015260126024820152716f776e65722d616464726573732d7a65726f60701b6044820152606401610496565b610539838383611f13565b505050565b336000908152600460205260408120541561059b5760405162461bcd60e51b815260206004820152601960248201527f63616c6c65722d6f776e732d616e6f746865722d7661756c74000000000000006044820152606401610496565b600654604051636090dec560e01b8152600481018490523060248201526001600160a01b03909116908190636090dec590604401602060405180830381600087803b1580156105e957600080fd5b505af11580156105fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106219190613336565b6040516305b1fdb160e11b815260048101829052306024820152600160448201529092506001600160a01b03821690630b63fb6290606401600060405180830381600087803b15801561067357600080fd5b505af1158015610687573d6000803e3d6000fd5b50503360008181526004602090815260408083208890558783526003909152808220889055518794508693507fa3e36cfe4cdf8e34133ab1f6a951dea0e51152268f1af758ebc5c464d348c05a9190a450919050565b600061076e600660009054906101000a90046001600160a01b03166001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561073057600080fd5b505afa158015610744573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076891906131bf565b83612082565b92915050565b6001600160a01b0382166000908152600460205260408120548190819081908190806107b25760405162461bcd60e51b815260040161049690613440565b6107bb88610e68565b6000868152600360209081526040808320548352600582528083205481516359de7d4160e11b81529151989e50969c50949a509298509096506001600160a01b039093169361086492859263b3bcfa8292600480840193829003018186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e9190613336565b8a612160565b9050878111156108b65760405162461bcd60e51b815260206004820152601e60248201527f696e73756666696369656e742d636f6c6c61746572616c2d6c6f636b656400006044820152606401610496565b6108c0818961367b565b97506108cd888789612189565b94505050509295509295909350565b6001546001600160a01b036201000090910416331461090d5760405162461bcd60e51b8152600401610496906134a5565b8061094f5760405162461bcd60e51b81526020600482015260126024820152716e6f2d67656d4a6f696e2d6164647265737360701b6044820152606401610496565b60005b8181101561053957600083838381811061097c57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061099191906131a3565b90506000816001600160a01b031663c5ce281e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ce57600080fd5b505afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190613336565b60008181526005602090815260409182902080546001600160a01b0319166001600160a01b038716908117909155915183815292935090917fe4a3d7d9a21eb6d0c1ebaaa1ad88c130b55df9b98d61973ec3da61725a03e308910160405180910390a250508080610a76906136be565b915050610952565b60026000541415610ad15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610496565b6002600090815533815260046020526040902054610b015760405162461bcd60e51b81526004016104969061346e565b3360009081526004602081815260408084205460065481865260038452828620548652600584528286205483516359de7d4160e11b8152935192966001600160a01b039283169691909216949193610bb493869363b3bcfa829383810193919291829003018186803b158015610b7657600080fd5b505afa158015610b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bae9190613336565b86612160565b90506001600160a01b0383166345e6bdcd85610bcf846136d9565b6040516001600160e01b031960e085901b1681526004810192909252602482015260006044820152606401600060405180830381600087803b158015610c1457600080fd5b505af1158015610c28573d6000803e3d6000fd5b50506040516313771f0760e31b815260048101879052306024820152604481018490526001600160a01b0386169250639bb8f8389150606401600060405180830381600087803b158015610c7b57600080fd5b505af1158015610c8f573d6000803e3d6000fd5b505060405163ef693bed60e01b8152306004820152602481018890526001600160a01b038516925063ef693bed9150604401600060405180830381600087803b158015610cdb57600080fd5b505af1158015610cef573d6000803e3d6000fd5b50505050610d793386846001600160a01b0316637bd2bea76040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3157600080fd5b505afa158015610d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6991906131bf565b6001600160a01b0316919061220e565b50506001600055505050565b6001546001600160a01b0362010000909104163314610db65760405162461bcd60e51b8152600401610496906134a5565b6001600160a01b038116610e0c5760405162461bcd60e51b815260206004820152601860248201527f74726561737572792d616464726573732d69732d7a65726f00000000000000006044820152606401610496565b600a546040516001600160a01b038084169216907f2ac12ebf7dfd56173c73b2e43941f0faed1c3f7fb6f959191a4ab4bdd3d32e2190600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116600090815260046020526040812054819081908190819080610ea65760405162461bcd60e51b815260040161049690613440565b610eaf81612271565b929850965094509150610ec3868587612189565b92505091939590929450565b33600090815260046020526040902054610efb5760405162461bcd60e51b81526004016104969061346e565b336000908152600460208190526040808320546006549151632726b07360e01b8152928301819052926001600160a01b03909116918290632726b0739060240160206040518083038186803b158015610f5357600080fd5b505afa158015610f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8b91906131bf565b90506000826001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc857600080fd5b505afa158015610fdc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100091906131bf565b60008581526003602052604081205491925061101d828585612601565b9050868110156110645760405162461bcd60e51b81526020600482015260126024820152711c185e5a5b99cb595e18d95cdccb5919589d60721b6044820152606401610496565b61106e8488612795565b846001600160a01b03166345e6bdcd87600061108b868989612881565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401600060405180830381600087803b1580156110d157600080fd5b505af11580156110e5573d6000803e3d6000fd5b5050505050505050505050565b6001546001600160a01b03620100009091041633146111235760405162461bcd60e51b8152600401610496906134a5565b6001600160a01b0381166111795760405162461bcd60e51b815260206004820152601960248201527f70726f706f7365642d676f7665726e6f722d69732d7a65726f000000000000006044820152606401610496565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600260005414156111ee5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610496565b600260009081553381526004602052604090205461121e5760405162461bcd60e51b81526004016104969061346e565b336000908152600460209081526040808320548084526003835281842054845260059092529091205461125a906001600160a01b031683612a35565b600654604080516336569e7760e01b815290519294506001600160a01b039091169182916336569e77916004808301926020929190829003018186803b1580156112a357600080fd5b505afa1580156112b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112db91906131bf565b6001600160a01b031663760887036003600085815260200190815260200160002054836001600160a01b0316632726b073866040518263ffffffff1660e01b815260040161132b91815260200190565b60206040518083038186803b15801561134357600080fd5b505afa158015611357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137b91906131bf565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b031660248201523060448201819052606482015260848101869052600060a482015260c401600060405180830381600087803b1580156113dd57600080fd5b505af11580156113f1573d6000803e3d6000fd5b505060016000555050505050565b6001600160a01b038116600090815260046020526040812054806114355760405162461bcd60e51b815260040161049690613440565b600654604051632726b07360e01b8152600481018390526000916001600160a01b031690632726b0739060240160206040518083038186803b15801561147a57600080fd5b505afa15801561148e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b291906131bf565b90506000600660009054906101000a90046001600160a01b03166001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561150457600080fd5b505afa158015611518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153c91906131bf565b600084815260036020526040902054909150611559818484612601565b9695505050505050565b3360009081526004602052604090205461158f5760405162461bcd60e51b81526004016104969061346e565b3360009081526004602081815260408084205460065482516336569e7760e01b8152925191956001600160a01b0390911694909385936336569e7793818401939091829003018186803b1580156115e557600080fd5b505afa1580156115f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161d91906131bf565b6000848152600360205260408120549192509061163b908390612082565b905080851115611649578094505b826001600160a01b03166345e6bdcd8560006116e486886001600160a01b0316632726b0738b6040518263ffffffff1660e01b815260040161168d91815260200190565b60206040518083038186803b1580156116a557600080fd5b505afa1580156116b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dd91906131bf565b8a8c612bd1565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401600060405180830381600087803b15801561172a57600080fd5b505af115801561173e573d6000803e3d6000fd5b50505050826001600160a01b031663f9f30db6853061175c89612d6f565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b1580156117aa57600080fd5b505af11580156117be573d6000803e3d6000fd5b5050600754604051634538c4eb60e01b81523060048201526001600160a01b0391821660248201529085169250634538c4eb915060440160206040518083038186803b15801561180d57600080fd5b505afa158015611821573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118459190613336565b6118a9576007546040516328ec8bf160e21b81526001600160a01b0391821660048201529083169063a3b22fc490602401600060405180830381600087803b15801561189057600080fd5b505af11580156118a4573d6000803e3d6000fd5b505050505b60075460405163ef693bed60e01b8152336004820152602481018790526001600160a01b039091169063ef693bed90604401600060405180830381600087803b1580156118f557600080fd5b505af1158015611909573d6000803e3d6000fd5b505050505050505050565b6001600160a01b0381166000908152600460205260408120548061194a5760405162461bcd60e51b815260040161049690613440565b600654604080516336569e7760e01b815290516000926001600160a01b0316916336569e77916004808301926020929190829003018186803b15801561198f57600080fd5b505afa1580156119a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c791906131bf565b600654604051632726b07360e01b8152600481018590529192506000916001600160a01b0390911690632726b0739060240160206040518083038186803b158015611a1157600080fd5b505afa158015611a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4991906131bf565b600084815260036020526040908190205490516309092f9760e21b81529192506001600160a01b03841691632424be5c91611a9a9185906004019182526001600160a01b0316602082015260400190565b604080518083038186803b158015611ab157600080fd5b505afa158015611ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae9919061338f565b5095945050505050565b600a546001600160a01b0316611b3e5760405162461bcd60e51b815260206004820152601060248201526f1d1c99585cdd5c9e4b5b9bdd0b5cd95d60821b6044820152606401610496565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611b8057600080fd5b505afa158015611b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb89190613336565b600a54909150611bd5906001600160a01b0384811691168361220e565b5050565b33600090815260046020526040902054611c055760405162461bcd60e51b81526004016104969061346e565b33600081815260046020526040902054611c1f9183611f13565b50565b6001546001600160a01b0362010000909104163314611c535760405162461bcd60e51b8152600401610496906134a5565b6001600160a01b038416611ca95760405162461bcd60e51b815260206004820152601a60248201527f6d63644d616e616765722d616464726573732d69732d7a65726f0000000000006044820152606401610496565b6001600160a01b038316611cff5760405162461bcd60e51b815260206004820152601a60248201527f6d63644461694a6f696e2d616464726573732d69732d7a65726f0000000000006044820152606401610496565b6001600160a01b038216611d555760405162461bcd60e51b815260206004820152601760248201527f6d636453706f742d616464726573732d69732d7a65726f0000000000000000006044820152606401610496565b6001600160a01b038116611da45760405162461bcd60e51b81526020600482015260166024820152756d63644a75672d616464726573732d69732d7a65726f60501b6044820152606401610496565b600680546001600160a01b038681166001600160a01b031992831681179093556007805487831690841681179091556008805487841690851681179091556009805493871693909416831790935560408051948552602085019190915283019190915260608201527f1c6ea4f4d62e36754911439dfcc968028b80950a549c66220947adb63435bee39060800160405180910390a150505050565b6002546001600160a01b03163314611e995760405162461bcd60e51b815260206004820152601960248201527f6e6f742d7468652d70726f706f7365642d676f7665726e6f72000000000000006044820152606401610496565b6002546001546040516001600160a01b039283169262010000909204909116907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d090600090a3600280546001805462010000600160b01b0319166001600160a01b03831662010000021790556001600160a01b0319169055565b6001600160a01b038116611f695760405162461bcd60e51b815260206004820152601960248201527f6e65772d6f776e65722d616464726573732d69732d7a65726f000000000000006044820152606401610496565b6001600160a01b0382166000908152600460205260409020548314611fc45760405162461bcd60e51b8152602060048201526011602482015270696e76616c69642d7661756c742d6e756d60781b6044820152606401610496565b6001600160a01b0381166000908152600460205260409020541561202a5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d6f776e65722d6f776e732d616e6f746865722d7661756c74000000006044820152606401610496565b6001600160a01b03808216600081815260046020526040808220879055928516808252838220829055925191929186917fec79eaf44c34230fee5c5b284135bd6df3c751840f31d612c29dab5ee349e2ac91a4505050565b600080600080856001600160a01b031663d9638d36866040518263ffffffff1660e01b81526004016120b691815260200190565b60a06040518083038186803b1580156120ce57600080fd5b505afa1580156120e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210691906133b2565b50935050925092506000676765c793fa10079d601b1b8385612128919061365c565b612132908461367b565b61213c9190613528565b9050606461214b82606361365c565b6121559190613528565b979650505050505050565b600061216d83601261367b565b61217890600a61358e565b612182908361365c565b9392505050565b60008361219857506000612182565b816121a65750600019612182565b826121f35760405162461bcd60e51b815260206004820152601760248201527f636f6c6c61746572616c2d726174652d69732d7a65726f0000000000000000006044820152606401610496565b6122066122008585612d86565b83612dba565b949350505050565b6040516001600160a01b03831660248201526044810182905261053990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612dda565b600654604051632726b07360e01b81526004810183905260009182918291829182916001600160a01b031690632726b0739060240160206040518083038186803b1580156122be57600080fd5b505afa1580156122d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f691906131bf565b90506000600660009054906101000a90046001600160a01b03166001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561234857600080fd5b505afa15801561235c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238091906131bf565b600088815260036020526040808220546008549151636cb1c69b60e11b815260048101829052939450926001600160a01b039091169063d9638d3690602401604080518083038186803b1580156123d657600080fd5b505afa1580156123ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240e9190613261565b6040516309092f9760e21b8152600481018590526001600160a01b038781166024830152919350600092508291861690632424be5c90604401604080518083038186803b15801561245e57600080fd5b505afa158015612472573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612496919061338f565b915091506000806000876001600160a01b031663d9638d36886040518263ffffffff1660e01b81526004016124cd91815260200190565b60a06040518083038186803b1580156124e557600080fd5b505afa1580156124f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251d91906133b2565b9450509350935050849c506125bd84848a6001600160a01b0316636c25b3468d6040518263ffffffff1660e01b815260040161256891906001600160a01b0391909116815260200190565b60206040518083038186803b15801561258057600080fd5b505afa158015612594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b89190613336565b612eac565b9a506125d4676765c793fa10079d601b1b82613528565b9950633b9aca006125e58784612f2d565b6125ef9190613528565b9b505050505050505050509193509193565b6040516309092f9760e21b8152600481018490526001600160a01b0383811660248301526000918291841690632424be5c90604401604080518083038186803b15801561264d57600080fd5b505afa158015612661573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612685919061338f565b604051636cb1c69b60e11b815260048101889052909250600091506001600160a01b0385169063d9638d369060240160a06040518083038186803b1580156126cc57600080fd5b505afa1580156126e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270491906133b2565b5050604051633612d9a360e11b81526001600160a01b0389811660048301529294506000935091871691636c25b346915060240160206040518083038186803b15801561275057600080fd5b505afa158015612764573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127889190613336565b9050612155838383612eac565b6007546001600160a01b03166127c1736b175474e89094c44da98b954eedeac495271d0f333085612f46565b6007546127ee90736b175474e89094c44da98b954eedeac495271d0f906001600160a01b03166000612f84565b60075461281a90736b175474e89094c44da98b954eedeac495271d0f906001600160a01b031684612f84565b604051633b4da69f60e01b81526001600160a01b03848116600483015260248201849052821690633b4da69f90604401600060405180830381600087803b15801561286457600080fd5b505af1158015612878573d6000803e3d6000fd5b50505050505050565b6040516309092f9760e21b8152600481018490526001600160a01b0383811660248301526000918291841690632424be5c90604401604080518083038186803b1580156128cd57600080fd5b505afa1580156128e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612905919061338f565b604051636cb1c69b60e11b815260048101889052909250600091506001600160a01b0385169063d9638d369060240160a06040518083038186803b15801561294c57600080fd5b505afa158015612960573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298491906133b2565b5050604051633612d9a360e11b81526001600160a01b0389811660048301529294506000935091871691636c25b346915060240160206040518083038186803b1580156129d057600080fd5b505afa1580156129e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a089190613336565b9050612a148282613528565b935082841115612a2c57612a27836136d9565b612155565b612155846136d9565b6000808390506000816001600160a01b0316637bd2bea76040518163ffffffff1660e01b815260040160206040518083038186803b158015612a7657600080fd5b505afa158015612a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aae91906131bf565b9050612ac56001600160a01b038216333087612f46565b612ada6001600160a01b038216866000612f84565b612aee6001600160a01b0382168686612f84565b604051633b4da69f60e01b8152306004820152602481018590526001600160a01b03831690633b4da69f90604401600060405180830381600087803b158015612b3657600080fd5b505af1158015612b4a573d6000803e3d6000fd5b50505050612bc8826001600160a01b031663b3bcfa826040518163ffffffff1660e01b815260040160206040518083038186803b158015612b8a57600080fd5b505afa158015612b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc29190613336565b85612160565b95945050505050565b60095460008381526003602052604080822054905163089c54b560e31b81526004810191909152909182916001600160a01b03909116906344e2a5a890602401602060405180830381600087803b158015612c2b57600080fd5b505af1158015612c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c639190613336565b604051633612d9a360e11b81526001600160a01b038781166004830152919250600091881690636c25b3469060240160206040518083038186803b158015612caa57600080fd5b505afa158015612cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce29190613336565b9050612cf9676765c793fa10079d601b1b8561365c565b811015612d65578181612d17676765c793fa10079d601b1b8761365c565b612d21919061367b565b612d2b9190613528565b9250612d42676765c793fa10079d601b1b8561365c565b612d4c838561365c565b10612d575782612d62565b612d628360016134cf565b92505b5050949350505050565b600061076e676765c793fa10079d601b1b8361365c565b6000670de0b6b3a7640000612d9c600282613528565b612da6848661365c565b612db09190613510565b6121829190613528565b600081612dc8600282613528565b612da6670de0b6b3a76400008661365c565b6000612e2f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130a89092919063ffffffff16565b8051909150156105395780806020019051810190612e4d91906132fe565b6105395760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610496565b6000612eb8838561365c565b821015612f2357600082612ecc858761365c565b612ed6919061367b565b9050612eed676765c793fa10079d601b1b82613528565b915080612f05676765c793fa10079d601b1b8461365c565b10612f105781612f1b565b612f1b826001613510565b915050612182565b5060009392505050565b6000676765c793fa10079d601b1b612d9c600282613528565b6040516001600160a01b0380851660248301528316604482015260648101829052612f7e9085906323b872dd60e01b9060840161223a565b50505050565b80158061300d5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612fd357600080fd5b505afa158015612fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300b9190613336565b155b6130785760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610496565b6040516001600160a01b03831660248201526044810182905261053990849063095ea7b360e01b9060640161223a565b6060612206848460008585843b6131015760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610496565b600080866001600160a01b0316858760405161311d91906133f1565b60006040518083038185875af1925050503d806000811461315a576040519150601f19603f3d011682016040523d82523d6000602084013e61315f565b606091505b5091509150612d6282828660608315613179575081612182565b8251156131895782518084602001fd5b8160405162461bcd60e51b8152600401610496919061340d565b6000602082840312156131b4578081fd5b813561218281613709565b6000602082840312156131d0578081fd5b815161218281613709565b600080600080608085870312156131f0578283fd5b84356131fb81613709565b9350602085013561320b81613709565b9250604085013561321b81613709565b9150606085013561322b81613709565b939692955090935050565b60008060408385031215613248578182fd5b823561325381613709565b946020939093013593505050565b60008060408385031215613273578182fd5b825161327e81613709565b6020939093015192949293505050565b600080602083850312156132a0578182fd5b823567ffffffffffffffff808211156132b7578384fd5b818501915085601f8301126132ca578384fd5b8135818111156132d8578485fd5b8660208260051b85010111156132ec578485fd5b60209290920196919550909350505050565b60006020828403121561330f578081fd5b81518015158114612182578182fd5b60006020828403121561332f578081fd5b5035919050565b600060208284031215613347578081fd5b5051919050565b600080600060608486031215613362578283fd5b83359250602084013561337481613709565b9150604084013561338481613709565b809150509250925092565b600080604083850312156133a1578182fd5b505080516020909101519092909150565b600080600080600060a086880312156133c9578081fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b60008251613403818460208701613692565b9190910192915050565b600060208252825180602084015261342c816040850160208701613692565b601f01601f19169190910160400192915050565b60208082526014908201527334b73b30b634b216bb30bab63a16b73ab6b132b960611b604082015260600190565b6020808252601c908201527f63616c6c65722d646f65736e27742d6f776e2d616e792d7661756c7400000000604082015260600190565b60208082526010908201526f3737ba16ba343296b3b7bb32b93737b960811b604082015260600190565b600080821280156001600160ff1b03849003851316156134f1576134f16136f3565b600160ff1b839003841281161561350a5761350a6136f3565b50500190565b60008219821115613523576135236136f3565b500190565b60008261354357634e487b7160e01b81526012600452602481fd5b500490565b80825b600180861161355a5750613585565b81870482111561356c5761356c6136f3565b8086161561357957918102915b9490941c93800261354b565b94509492505050565b600061218260001984846000826135a757506001612182565b816135b457506000612182565b81600181146135ca57600281146135d457613601565b6001915050612182565b60ff8411156135e5576135e56136f3565b6001841b9150848211156135fb576135fb6136f3565b50612182565b5060208310610133831016604e8410600b8410161715613634575081810a8381111561362f5761362f6136f3565b612182565b6136418484846001613548565b808604821115613653576136536136f3565b02949350505050565b6000816000190483118215151615613676576136766136f3565b500290565b60008282101561368d5761368d6136f3565b500390565b60005b838110156136ad578181015183820152602001613695565b83811115612f7e5750506000910152565b60006000198214156136d2576136d26136f3565b5060010190565b6000600160ff1b8214156136ef576136ef6136f3565b0390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114611c1f57600080fdfea2646970667358221220dd49a56e2ad61b8b9b52c6b9a78b03a556971281c5cfdd100e1a900d20535fe764736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptGovernorship()": {
        "details": "Allows new governor to accept governorship of the contract."
      },
      "addGemJoin(address[])": {
        "details": "Add gemJoin adapter address from Maker in mapping",
        "params": {
          "_gemJoins": "Array of gem join addresses"
        }
      },
      "borrow(uint256)": {
        "details": "In edge case, when we hit DAI mint limit, we might end up borrowing less than what is being asked.",
        "params": {
          "_amount": "Dai amount to borrow. Actual borrow amount may be less than \"amount\""
        }
      },
      "createVault(bytes32)": {
        "details": "Store caller of this function as vault owner.",
        "params": {
          "_collateralType": "Collateral type for Maker vault"
        },
        "returns": {
          "_vaultNum": "Newly created vault number"
        }
      },
      "depositCollateral(uint256)": {
        "details": "Deposit ERC20 collateral.",
        "params": {
          "_amount": "ERC20 amount to deposit."
        }
      },
      "getVaultBalance(address)": {
        "details": "Get current collateral balance of vault.",
        "params": {
          "_vaultOwner": "Address of vault owner"
        }
      },
      "getVaultDebt(address)": {
        "details": "Get current dai debt of vault.",
        "params": {
          "_vaultOwner": "Address of vault owner"
        }
      },
      "getVaultInfo(address)": {
        "details": "Get vault info",
        "params": {
          "_vaultOwner": "Address of vault owner"
        }
      },
      "maxAvailableDai(bytes32)": {
        "params": {
          "_collateralType": "Collateral type."
        }
      },
      "payback(uint256)": {
        "details": "Payback borrowed DAI.",
        "params": {
          "_amount": "Dai amount to payback."
        }
      },
      "sweepErc20(address)": {
        "details": "sweep given ERC20 token to treasury pool"
      },
      "transferGovernorship(address)": {
        "details": "Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner."
      },
      "transferVaultOwnership(address)": {
        "params": {
          "_newOwner": "Address of new owner of vault"
        }
      },
      "transferVaultOwnership(uint256,address,address)": {
        "params": {
          "_newOwner": "Address of new owner of vault",
          "_owner": "Address of owner of vault",
          "_vaultNum": "Number of vault being transferred"
        }
      },
      "updateMCDAddresses(address,address,address,address)": {
        "details": "Update MCD addresses."
      },
      "whatWouldWithdrawDo(address,uint256)": {
        "details": "Calculate state based on withdraw amount.",
        "params": {
          "_amount": "Collateral amount to withdraw.",
          "_vaultOwner": "Address of vault owner"
        }
      },
      "withdrawCollateral(uint256)": {
        "details": "Withdraw collateral.",
        "params": {
          "_amount": "Collateral amount to withdraw."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(uint256)": {
        "notice": "Borrow DAI."
      },
      "createVault(bytes32)": {
        "notice": "Create new Maker vault"
      },
      "maxAvailableDai(bytes32)": {
        "notice": "Get max available DAI safe to borrow for given collateral type."
      },
      "transferVaultOwnership(address)": {
        "notice": "Transfer vault ownership to another address/strategy"
      },
      "transferVaultOwnership(uint256,address,address)": {
        "notice": "Transfer vault ownership to another address/strategy"
      },
      "updateTreasury(address)": {
        "notice": "Update treasure address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 938,
        "contract": "contracts/strategies/maker/CollateralManager.sol:CollateralManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 887,
        "contract": "contracts/strategies/maker/CollateralManager.sol:CollateralManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 890,
        "contract": "contracts/strategies/maker/CollateralManager.sol:CollateralManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3080,
        "contract": "contracts/strategies/maker/CollateralManager.sol:CollateralManager",
        "label": "governor",
        "offset": 2,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3082,
        "contract": "contracts/strategies/maker/CollateralManager.sol:CollateralManager",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 15418,
        "contract": "contracts/strategies/maker/CollateralManager.sol:CollateralManager",
        "label": "collateralType",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 15423,
        "contract": "contracts/strategies/maker/CollateralManager.sol:CollateralManager",
        "label": "vaultNum",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15427,
        "contract": "contracts/strategies/maker/CollateralManager.sol:CollateralManager",
        "label": "mcdGemJoin",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 15434,
        "contract": "contracts/strategies/maker/CollateralManager.sol:CollateralManager",
        "label": "mcdManager",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 15437,
        "contract": "contracts/strategies/maker/CollateralManager.sol:CollateralManager",
        "label": "mcdDaiJoin",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 15440,
        "contract": "contracts/strategies/maker/CollateralManager.sol:CollateralManager",
        "label": "mcdSpot",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 15443,
        "contract": "contracts/strategies/maker/CollateralManager.sol:CollateralManager",
        "label": "mcdJug",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 15445,
        "contract": "contracts/strategies/maker/CollateralManager.sol:CollateralManager",
        "label": "treasury",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}