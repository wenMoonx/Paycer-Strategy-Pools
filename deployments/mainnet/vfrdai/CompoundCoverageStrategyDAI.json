{
  "address": "0x0f0600C5a32BBFEA0495bAfACA551D7a13565281",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRouterIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOracleConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSwapSlippage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "convertFrom18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressListFactory",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRouterIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setupOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValueCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "updateOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a2a128b4fd56f0c6654c2c1b82fd64b631e77f92f63d329f6663c321d20eaaf",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0x0f0600C5a32BBFEA0495bAfACA551D7a13565281",
    "transactionIndex": 101,
    "gasUsed": "3583944",
    "logsBloom": "0x
    "blockHash": "0x4d838d119247d710333eaf14c4102c03b765fff4f6181f17abc5aad3c9fad0f7",
    "transactionHash": "0x3a2a128b4fd56f0c6654c2c1b82fd64b631e77f92f63d329f6663c321d20eaaf",
    "logs": [],
    "blockNumber": 13090800,
    "cumulativeGasUsed": "12705950",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0b1E5e449CA0d7D8937d038e298737e023e86Dc5",
    "0xe382d9f2394A359B01006faa8A1864b8a60d2710"
  ],
  "solcInputHash": "1b24176c26d26ad371c283ded0d788b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertFrom18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressListFactory\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"convertFrom18(uint256)\":{\"details\":\"Convert from 18 decimals to token defined decimals. Default no conversion.\"},\"init(address)\":{\"params\":{\"_addressListFactory\":\"To support same code in eth side chain, user _addressListFactory as param ethereum- 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3 polygon-0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291\"}},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"details\":\"Rebalance profit, loss and investment of this strategy\"},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweepERC20(address)\":{\"details\":\"sweep given token to feeCollector of strategy\",\"params\":{\"_fromToken\":\"token address to sweep\"}},\"totalValue()\":{\"details\":\"Report total value in collateral token\"},\"totalValueCurrent()\":{\"details\":\"Report total value in collateral token\"},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapManager(address)\":{\"params\":{\"_swapManager\":\"swap manager address\"}},\"withdraw(uint256)\":{\"details\":\"Withdraw collateral token from lending pool.\",\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"init(address)\":{\"notice\":\"Create keeper list NOTE: Any function with onlyKeeper modifier will not work until this function is called. NOTE: Due to gas constraint this function cannot be called in constructor.\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"token()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"totalValue()\":{\"notice\":\"Calculate total value using COMP accrued and cToken\"},\"totalValueCurrent()\":{\"notice\":\"Calculate total value of asset under management (in real-time)\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/compound/vfr/CompoundCoverageStrategyDAI.sol\":\"CompoundCoverageStrategyDAI\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/interfaces/bloq/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    function add(address a) external returns (bool);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function length() external view returns (uint256);\\n\\n    function grantRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x573e4beae1fcf79639afaf2ab3eb606b599fb71d678ca64e69f07620a3091af3\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressListFactory {\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0x150ffedb5ad13b6f3ed4802b9eb4400567aecbac4faf9615be0f46d27ac40087\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0xbfaebdde57187f71c2c9f430002c310cd51638967deb4cc9d58877e1f2bf562e\",\"license\":\"MIT\"},\"contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface CToken {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function repayBorrow() external payable; // For ETH\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256); // For ERC20\\n\\n    function transfer(address user, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address owner,\\n        address user,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function underlying() external view returns (address);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function markets(address market)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isCompted\\n        );\\n}\\n\",\"keccak256\":\"0xbddf3558f41799585ee600fe07e73c4cb27e9d226485f75b55087a87455e8ca8\",\"license\":\"MIT\"},\"contracts/interfaces/paycer/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalValueCurrent() external returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7187d0e7ed2af48c8f603b0dd5b34afd7e2c0792d8089cc909e765c478c20b8c\",\"license\":\"MIT\"},\"contracts/interfaces/paycer/IVFRBuffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IVFRBuffer {\\n    function target() external view returns (uint256);\\n\\n    function request(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xefb7c65b441a6e110be6d0fa32c0f9872b2acf0b6a8a4a61152eb3dc2e01835b\",\"license\":\"MIT\"},\"contracts/interfaces/paycer/IVFRCoveragePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./IPaycerPool.sol\\\";\\n\\ninterface IVFRCoveragePool is IPaycerPool {\\n    function buffer() external view returns (address);\\n}\\n\",\"keccak256\":\"0x99d3a035592baa04b8dbc58bb48ee0c0dedb447ede1c0e6ccf39e11c46b101e0\",\"license\":\"MIT\"},\"contracts/interfaces/paycer/IPaycerPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../bloq/IAddressList.sol\\\";\\n\\ninterface IPaycerPool is IERC20 {\\n    function deposit() external payable;\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function poolRewards() external returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function resetApproval() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawETH(uint256 _amount) external;\\n\\n    function whitelistedWithdraw(uint256 _amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function keepers() external view returns (IAddressList);\\n\\n    function maintainers() external view returns (IAddressList);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee,\\n            uint256 _debtRate,\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio\\n        );\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0725eb59a54238cbdcf2d14d2759a2fb4bd7550b9e4183c9350ff72e46a2b674\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../interfaces/bloq/IAddressList.sol\\\";\\nimport \\\"../interfaces/bloq/IAddressListFactory.sol\\\";\\nimport \\\"../interfaces/paycer/IStrategy.sol\\\";\\nimport \\\"../interfaces/paycer/IPaycerPool.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    IAddressList public keepers;\\n    address public override feeCollector;\\n    ISwapManager public swapManager;\\n\\n    uint256 public oraclePeriod = 3600; // 1h\\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        swapManager = ISwapManager(_swapManager);\\n        pool = _pool;\\n        collateralToken = IPaycerPool(_pool).token();\\n        receiptToken = _receiptToken;\\n    }\\n\\n    modifier onlyGovernor {\\n        require(_msgSender() == IPaycerPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-paycer-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Create keeper list\\n     * NOTE: Any function with onlyKeeper modifier will not work until this function is called.\\n     * NOTE: Due to gas constraint this function cannot be called in constructor.\\n     * @param _addressListFactory To support same code in eth side chain, user _addressListFactory as param\\n     * ethereum- 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3\\n     * polygon-0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291\\n     */\\n    function init(address _addressListFactory) external onlyGovernor {\\n        require(address(keepers) == address(0), \\\"keeper-list-already-created\\\");\\n        // Prepare keeper list\\n        IAddressListFactory _factory = IAddressListFactory(_addressListFactory);\\n        keepers = IAddressList(_factory.createList());\\n        require(keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyGovernor {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\\n        require(_newSwapSlippage <= 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\\n        swapSlippage = _newSwapSlippage;\\n    }\\n\\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\\n        require(_newRouterIdx < swapManager.N_DEX(), \\\"invalid-router-index\\\");\\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\\n        require(_newPeriod > 59, \\\"invalid-oracle-period\\\");\\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\\n        oraclePeriod = _newPeriod;\\n        oracleRouterIdx = _newRouterIdx;\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function setupOracles() external onlyKeeper {\\n        _setupOracles();\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral token from lending pool.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Rebalance profit, loss and investment of this strategy\\n     */\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IPaycerPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n    }\\n\\n    /**\\n     * @dev sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @dev Convert from 18 decimals to token defined decimals. Default no conversion.\\n    function convertFrom18(uint256 amount) public pure virtual returns (uint256) {\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _value);\\n\\n    /**\\n     * @notice Calculate total value of asset under management (in real-time)\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValueCurrent() external virtual override returns (uint256) {\\n        return totalValue();\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration. \\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\\n     * excess debt, if any.\\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IPaycerPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IPaycerPool(pool).totalDebtOf(address(this));\\n        _profit = _realizeProfit(_totalDebt);\\n        _loss = _realizeLoss(_totalDebt);\\n        _payback = _liquidate(_excessDebt);\\n    }\\n\\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\\n        return (_amount * (10000 - _slippage)) / (10000);\\n    }\\n\\n    function _simpleOraclePath(address _from, address _to) internal pure returns (address[] memory path) {\\n        if (_from == WETH || _to == WETH) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WETH;\\n            path[2] = _to;\\n        }\\n    }\\n\\n    function _consultOracle(\\n        address _from,\\n        address _to,\\n        uint256 _amt\\n    ) internal returns (uint256, bool) {\\n        // from, to, amountIn, period, router\\n        (uint256 rate, uint256 lastUpdate, ) = swapManager.consult(_from, _to, _amt, oraclePeriod, oracleRouterIdx);\\n        // We're looking at a TWAP ORACLE with a 1 hr Period that has been updated within the last hour\\n        if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\\n        return (0, false);\\n    }\\n\\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\\n        require(path.length > 1, \\\"invalid-oracle-path\\\");\\n        amountOut = _amountIn;\\n        bool isValid;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\\n            require(isValid, \\\"invalid-oracle-rate\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\\n     * however, this method will throw minAmountOut is not met\\n     * @param _from address of from token\\n     * @param _to address of to token\\n     * @param _amountIn Amount to be swapped\\n     * @param _minAmountOut minimum amount out\\n     */\\n    function _safeSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) internal {\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\\n        if (_minAmountOut == 0) _minAmountOut = 1;\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _amountIn,\\n                _minAmountOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    // These methods can be implemented by the inheriting strategy.\\n    /* solhint-disable no-empty-blocks */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\\n\\n    /**\\n     * @notice Set up any oracles that are needed for this strategy.\\n     */\\n    function _setupOracles() internal virtual {}\\n\\n    /* solhint-enable */\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _approveToken(uint256 _amount) internal virtual;\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\\n\\n    /**\\n     * @notice Calculate earning and withdraw/convert it into collateral token.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _profit Profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\\n\\n    /**\\n     * @notice Calculate loss\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\\n\\n    /**\\n     * @notice Reinvest collateral.\\n     * @dev Once we file report back in pool, we might have some collateral in hand\\n     * which we want to reinvest aka deposit in lender/provider.\\n     */\\n    function _reinvest() internal virtual;\\n}\\n\",\"keccak256\":\"0x16d264ec864209c8cbd6d9bd70d3fbfb58490cae0d4a2c2789672cebb8e74362\",\"license\":\"MIT\"},\"contracts/strategies/compound/CompoundStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"../../interfaces/compound/ICompound.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Compound and earn interest.\\nabstract contract CompoundStrategy is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    CToken internal cToken;\\n    address internal constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\\n    Comptroller internal constant COMPTROLLER = Comptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) Strategy(_pool, _swapManager, _receiptToken) {\\n        require(_receiptToken != address(0), \\\"cToken-address-is-zero\\\");\\n        cToken = CToken(_receiptToken);\\n        swapSlippage = 10000; // disable oracles on reward swaps by default\\n    }\\n\\n    /**\\n     * @notice Calculate total value using COMP accrued and cToken\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\\n        _totalValue = _calculateTotalValue(COMPTROLLER.compAccrued(address(this)));\\n    }\\n\\n    function totalValueCurrent() external override returns (uint256 _totalValue) {\\n        _claimComp();\\n        _totalValue = _calculateTotalValue(IERC20(COMP).balanceOf(address(this)));\\n    }\\n\\n    function _calculateTotalValue(uint256 _compAccrued) internal view returns (uint256 _totalValue) {\\n        if (_compAccrued != 0) {\\n            (, _totalValue) = swapManager.bestPathFixedInput(COMP, address(collateralToken), _compAccrued, 0);\\n        }\\n        _totalValue += _convertToCollateral(cToken.balanceOf(address(this)));\\n    }\\n\\n    function isReservedToken(address _token) public view virtual override returns (bool) {\\n        return _token == address(cToken) || _token == COMP;\\n    }\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        collateralToken.safeApprove(pool, _amount);\\n        collateralToken.safeApprove(address(cToken), _amount);\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            IERC20(COMP).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim COMP and transfer to new strategy\\n     * @param _newStrategy Address of new strategy.\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual override {\\n        _claimComp();\\n        IERC20(COMP).safeTransfer(_newStrategy, IERC20(COMP).balanceOf(address(this)));\\n    }\\n\\n    /// @notice Claim comp\\n    function _claimComp() internal {\\n        address[] memory _markets = new address[](1);\\n        _markets[0] = address(cToken);\\n        COMPTROLLER.claimComp(address(this), _markets);\\n    }\\n\\n    /// @notice Claim COMP and convert COMP into collateral token.\\n    function _claimRewardsAndConvertTo(address _toToken) internal override {\\n        _claimComp();\\n        uint256 _compAmount = IERC20(COMP).balanceOf(address(this));\\n        if (_compAmount != 0) {\\n            uint256 minAmtOut =\\n                (swapSlippage != 10000)\\n                    ? _calcAmtOutAfterSlippage(\\n                        _getOracleRate(_simpleOraclePath(COMP, _toToken), _compAmount),\\n                        swapSlippage\\n                    )\\n                    : 1;\\n            _safeSwap(COMP, _toToken, _compAmount, minAmtOut);\\n        }\\n    }\\n\\n    /// @notice Withdraw collateral to payback excess debt\\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\\n        if (_excessDebt != 0) {\\n            _payback = _safeWithdraw(_excessDebt);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate earning and withdraw it from Compound.\\n     * @dev Claim COMP and convert into collateral\\n     * @dev If somehow we got some collateral token in strategy then we want to\\n     *  include those in profit. That's why we used 'return' outside 'if' condition.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\\n        if (_collateralBalance > _totalDebt) {\\n            _withdrawHere(_collateralBalance - _totalDebt);\\n        }\\n        return collateralToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Calculate realized loss.\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\\n        if (_collateralBalance < _totalDebt) {\\n            _loss = _totalDebt - _collateralBalance;\\n        }\\n    }\\n\\n    /// @notice Deposit collateral in Compound\\n    function _reinvest() internal virtual override {\\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\\n        if (_collateralBalance != 0) {\\n            require(cToken.mint(_collateralBalance) == 0, \\\"deposit-to-compound-failed\\\");\\n        }\\n    }\\n\\n    /// @dev Withdraw collateral and transfer it to pool\\n    function _withdraw(uint256 _amount) internal override {\\n        _safeWithdraw(_amount);\\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\\n     * @param _amount Amount of collateral to withdraw.\\n     * @return Actual collateral withdrawn\\n     */\\n    function _safeWithdraw(uint256 _amount) internal returns (uint256) {\\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\\n        // Get minimum of _amount and _collateralBalance\\n        return _withdrawHere(_amount < _collateralBalance ? _amount : _collateralBalance);\\n    }\\n\\n    /// @dev Withdraw collateral here. Do not transfer to pool\\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\\n        if (_amount != 0) {\\n            require(cToken.redeemUnderlying(_amount) == 0, \\\"withdraw-from-compound-failed\\\");\\n            _afterRedeem();\\n        }\\n        return _amount;\\n    }\\n\\n    function _setupOracles() internal override {\\n        swapManager.createOrUpdateOracle(COMP, WETH, oraclePeriod, oracleRouterIdx);\\n        if (address(collateralToken) != WETH) {\\n            swapManager.createOrUpdateOracle(WETH, address(collateralToken), oraclePeriod, oracleRouterIdx);\\n        }\\n    }\\n\\n    /**\\n     * @dev Compound support ETH as collateral not WETH. This hook will take\\n     * care of conversion from WETH to ETH and vice versa.\\n     * @dev This will be used in ETH strategy only, hence empty implementation\\n     */\\n    //solhint-disable-next-line no-empty-blocks\\n    function _afterRedeem() internal virtual {}\\n\\n    function _convertToCollateral(uint256 _cTokenAmount) internal view returns (uint256) {\\n        return (_cTokenAmount * cToken.exchangeRateStored()) / 1e18;\\n    }\\n}\\n\",\"keccak256\":\"0x4491cf82188d43a4a251ad30e59748292e59e0ca956ee55800d48544d9f1b275\",\"license\":\"MIT\"},\"contracts/strategies/compound/vfr/CompoundCoverageStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../CompoundStrategy.sol\\\";\\nimport \\\"../../../interfaces/paycer/IVFRBuffer.sol\\\";\\nimport \\\"../../../interfaces/paycer/IVFRCoveragePool.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\nabstract contract CompoundCoverageStrategy is CompoundStrategy {\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) CompoundStrategy(_pool, _swapManager, _receiptToken) {}\\n\\n    function _realizeProfit(uint256 _totalDebt) internal override returns (uint256) {\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\\n        if (_collateralBalance > _totalDebt) {\\n            _withdrawHere(_collateralBalance - _totalDebt);\\n        }\\n\\n        uint256 balance = collateralToken.balanceOf(address(this));\\n        // If the buffer is not set, this will work exactly like a regular strategy\\n        address buffer = IVFRCoveragePool(pool).buffer();\\n        if (buffer != address(0)) {\\n            uint256 target = IVFRBuffer(buffer).target();\\n            uint256 inBuffer = collateralToken.balanceOf(buffer);\\n            if (inBuffer > target) {\\n                // If the buffer is above target, then request any additional funds\\n                IVFRBuffer(buffer).request(inBuffer - target);\\n            } else {\\n                // If the buffer is below target, send funds to it\\n                uint256 needed = target - inBuffer;\\n                if (balance >= needed) {\\n                    collateralToken.transfer(buffer, needed);\\n                } else {\\n                    collateralToken.transfer(buffer, balance);\\n                    return 0;\\n                }\\n            }\\n        }\\n        return collateralToken.balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x69eb6ff742e41fb88a8fe6d2c3f59eb4503505edd4a40c5dc6e7b65922d9ba63\",\"license\":\"MIT\"},\"contracts/strategies/compound/vfr/CompoundCoverageStrategyDAI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./CompoundCoverageStrategy.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\ncontract CompoundCoverageStrategyDAI is CompoundCoverageStrategy {\\n    string public constant NAME = \\\"Compound-Coverage-Strategy-DAI\\\";\\n    string public constant VERSION = \\\"3.0.0\\\";\\n\\n    constructor(address _pool, address _swapManager)\\n        CompoundCoverageStrategy(_pool, _swapManager, 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643)\\n    {}\\n}\\n\",\"keccak256\":\"0xbe27f1a5dc2fee2ca26c64c9cbbeb1f31a046a9f721489d7fe5059ecce6b6f0a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052610e1060045560006005556127106006553480156200002257600080fd5b506040516200417738038062004177833981016040819052620000459162000269565b8181735d3a536e4d6dbd6114cc1ead35777bab948e36438282828282826001600160a01b038316620000be5760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b0382166200010b5760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401620000b5565b600380546001600160a01b0319166001600160a01b0384811691909117909155606084901b6001600160601b03191660a05260408051637e062a3560e11b815290519185169163fc0c546a91600480820192602092909190829003018186803b1580156200017857600080fd5b505afa1580156200018d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b39190620002a7565b60601b6001600160601b031916608052600080546001600160a01b0319166001600160a01b039283161790558316151591506200023590505760405162461bcd60e51b815260206004820152601660248201527f63546f6b656e2d616464726573732d69732d7a65726f000000000000000000006044820152606401620000b5565b600780546001600160a01b0319166001600160a01b0392909216919091179055505061271060065550620002e69350505050565b600080604083850312156200027c578182fd5b82516200028981620002cd565b60208401519092506200029c81620002cd565b809150509250929050565b600060208284031215620002b9578081fd5b8151620002c681620002cd565b9392505050565b6001600160a01b0381168114620002e357600080fd5b50565b60805160601c60a05160601c613d85620003f2600039600081816101ee01528181610450015281816105df0152818161085a015281816108d601528181610a9901528181610c4c01528181610e7c01528181610fa3015281816112860152818161134f015281816115a501528181611b0301528181611b8201528181611c1f01528181611e5f015261277801526000818161036e015281816114f70152818161157c015281816118f701528181611b2d01528181611cdb01528181611e3d01528181611e95015281816120b2015281816121390152818161230601528181612664015281816126f0015281816128b0015281816129dd01528181612a850152612b2b0152613d856000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063a3f4df7e11610104578063d2c35ce8116100a2578063ec78e83211610071578063ec78e832146103f5578063fb589de214610408578063fc0c546a14610419578063ffa1ad741461042a576101cf565b8063d2c35ce8146103bf578063d4c3eea0146103d2578063e00af4a7146103da578063e645c202146103ed576101cf565b8063b2016bd4116100de578063b2016bd414610369578063c415b95c14610390578063cd2d7ebe146103a3578063ce5494bb146103ac576101cf565b8063a3f4df7e14610305578063a923b2a61461034e578063aa10188614610361576101cf565b8063440d724811610171578063709d039d1161014b578063709d039d146102cf5780637d7c2a1c146102e2578063951dc22c146102ea57806399b71d5c146102fd576101cf565b8063440d7248146102865780634c36fad7146102a957806367f5e4b8146102bc576101cf565b80631aedeabe116101ad5780631aedeabe146102405780632e1a7d4d146102575780634032b72b1461026a57806342189c8f1461027d576101cf565b806314ae9f2e146101d457806316f0115b146101e957806319ab453c1461022d575b600080fd5b6101e76101e2366004613881565b61044e565b005b6102107f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101e761023b366004613881565b6105dd565b61024960065481565b604051908152602001610224565b6101e76102653660046139f9565b610857565b6101e7610278366004613881565b6108d4565b61024960045481565b610299610294366004613881565b610a54565b6040519015158152602001610224565b6101e76102b7366004613881565b610a97565b6101e76102ca3660046139f9565b610c4a565b600354610210906001600160a01b031681565b6101e7610d96565b600154610210906001600160a01b031681565b6101e7610ee5565b6103416040518060400160405280601e81526020017f436f6d706f756e642d436f7665726167652d53747261746567792d444149000081525081565b6040516102249190613b2a565b6101e761035c366004613a29565b610fa1565b6101e76111d6565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b600254610210906001600160a01b031681565b61024960055481565b6101e76103ba366004613881565b611283565b6101e76103cd366004613881565b6115a3565b61024961176c565b6101e76103e8366004613881565b611800565b610249611a9b565b600054610210906001600160a01b031681565b6102496104163660046139f9565b90565b6000546001600160a01b0316610210565b610341604051806040016040528060058152602001640332e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a757600080fd5b505afa1580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df919061389d565b6001600160a01b0316336001600160a01b0316146105185760405162461bcd60e51b815260040161050f90613b8d565b60405180910390fd5b600154604051631484968760e11b81526001600160a01b038381166004830152909116906329092d0e90602401602060405180830381600087803b15801561055f57600080fd5b505af1158015610573573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059791906139df565b6105da5760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b604482015260640161050f565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561063657600080fd5b505afa15801561064a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066e919061389d565b6001600160a01b0316336001600160a01b03161461069e5760405162461bcd60e51b815260040161050f90613b8d565b6001546001600160a01b0316156106f75760405162461bcd60e51b815260206004820152601b60248201527f6b65657065722d6c6973742d616c72656164792d637265617465640000000000604482015260640161050f565b6000819050806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561073757600080fd5b505af115801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f919061389d565b600180546001600160a01b0319166001600160a01b03929092169182179055630a3b0a4f61079a3390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b1580156107db57600080fd5b505af11580156107ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081391906139df565b6108535760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640161050f565b5050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146108cb5760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604482015260640161050f565b6105da81611ae0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561092d57600080fd5b505afa158015610941573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610965919061389d565b6001600160a01b0316336001600160a01b0316146109955760405162461bcd60e51b815260040161050f90613b8d565b600154604051630a3b0a4f60e01b81526001600160a01b03838116600483015290911690630a3b0a4f90602401602060405180830381600087803b1580156109dc57600080fd5b505af11580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1491906139df565b6105da5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640161050f565b6007546000906001600160a01b0383811691161480610a8f57506001600160a01b03821673c00e94cb662c3520282e6f5717214004a7f26888145b90505b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610af057600080fd5b505afa158015610b04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b28919061389d565b6001600160a01b0316336001600160a01b031614610b585760405162461bcd60e51b815260040161050f90613b8d565b6001600160a01b038116610ba35760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b604482015260640161050f565b6003546001600160a01b0382811691161415610bee5760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b604482015260640161050f565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610ca357600080fd5b505afa158015610cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdb919061389d565b6001600160a01b0316336001600160a01b031614610d0b5760405162461bcd60e51b815260040161050f90613b8d565b612710811115610d565760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b604482015260640161050f565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610de757600080fd5b505afa158015610dfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1f91906139df565b610e3b5760405162461bcd60e51b815260040161050f90613b5d565b6000806000610e48611b5c565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b158015610ec057600080fd5b505af1158015610ed4573d6000803e3d6000fd5b50505050610ee0611cc3565b505050565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610f3657600080fd5b505afa158015610f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6e91906139df565b610f8a5760405162461bcd60e51b815260040161050f90613b5d565b610f946000611e30565b610f9f600019611e30565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610ffa57600080fd5b505afa15801561100e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611032919061389d565b6001600160a01b0316336001600160a01b0316146110625760405162461bcd60e51b815260040161050f90613b8d565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156110b057600080fd5b505afa1580156110c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e89190613a11565b811061112d5760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b604482015260640161050f565b816111385760045491505b603b82116111805760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b604482015260640161050f565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561122757600080fd5b505afa15801561123b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125f91906139df565b61127b5760405162461bcd60e51b815260040161050f90613b5d565b610f9f611ffa565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146112f75760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604482015260640161050f565b6001600160a01b03811661134d5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f00000000604482015260640161050f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113b057600080fd5b505afa1580156113c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e8919061389d565b6001600160a01b0316146114375760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b604482015260640161050f565b611440816121b5565b6000546040516370a0823160e01b81523060048201526114d49183916001600160a01b03909116906370a082319060240160206040518083038186803b15801561148957600080fd5b505afa15801561149d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c19190613a11565b6000546001600160a01b0316919061225d565b6040516370a0823160e01b81523060048201526105da9082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906024015b60206040518083038186803b15801561153a57600080fd5b505afa15801561154e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115729190613a11565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061225d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156115fc57600080fd5b505afa158015611610573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611634919061389d565b6001600160a01b0316336001600160a01b0316146116645760405162461bcd60e51b815260040161050f90613b8d565b6001600160a01b0381166116ba5760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f000000604482015260640161050f565b6002546001600160a01b03828116911614156117105760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b604482015260640161050f565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b60405163331faf7160e21b81523060048201526000906117fb90733d9819210a31b4961b30ef54be2aed79b9c9cd3b9063cc7ebdc4906024015b60206040518083038186803b1580156117be57600080fd5b505afa1580156117d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f69190613a11565b6122c0565b905090565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561185157600080fd5b505afa158015611865573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188991906139df565b6118a55760405162461bcd60e51b815260040161050f90613b5d565b6002546001600160a01b03166118f55760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b604482015260640161050f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156119775760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c00604482015260640161050f565b61198081610a54565b156119c45760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b604482015260640161050f565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611a04576002546119ff906001600160a01b031647612418565b6105da565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611a4657600080fd5b505afa158015611a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7e9190613a11565b600254909150610853906001600160a01b0384811691168361225d565b6000611aa5612531565b6040516370a0823160e01b81523060048201526117fb9073c00e94cb662c3520282e6f5717214004a7f26888906370a08231906024016117a6565b611ae981612606565b506040516370a0823160e01b81523060048201526105da907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401611522565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b158015611bc457600080fd5b505afa158015611bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfc9190613a11565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b158015611c6157600080fd5b505afa158015611c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c999190613a11565b9050611ca48161265d565b9450611caf81612bb6565b9350611cba82612c07565b92505050909192565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611d2557600080fd5b505afa158015611d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5d9190613a11565b905080156105da5760075460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b158015611dab57600080fd5b505af1158015611dbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de39190613a11565b156105da5760405162461bcd60e51b815260206004820152601a60248201527f6465706f7369742d746f2d636f6d706f756e642d6661696c6564000000000000604482015260640161050f565b611e846001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612c18565b600754611ebe906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683612c18565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0f57600080fd5b505afa158015611f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f479190613a11565b81101561085357600354604051636e74a6f760e01b815260048101839052611fe8916001600160a01b031690636e74a6f79060240160206040518083038186803b158015611f9457600080fd5b505afa158015611fa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fcc919061389d565b73c00e94cb662c3520282e6f5717214004a7f268889084612c18565b80611ff281613cf3565b915050611ec1565b60035460048054600554604051630f30f2d360e21b81526001600160a01b0390941693633cc3cb4c9361205d9373c00e94cb662c3520282e6f5717214004a7f268889373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2939192909101613add565b602060405180830381600087803b15801561207757600080fd5b505af115801561208b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120af919061389d565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214610f9f5760035460048054600554604051630f30f2d360e21b81526001600160a01b0390941693633cc3cb4c936121639373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2937f0000000000000000000000000000000000000000000000000000000000000000939192909101613add565b602060405180830381600087803b15801561217d57600080fd5b505af1158015612191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105da919061389d565b6121bd612531565b6040516370a0823160e01b81523060048201526105da90829073c00e94cb662c3520282e6f5717214004a7f26888906370a082319060240160206040518083038186803b15801561220d57600080fd5b505afa158015612221573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122459190613a11565b73c00e94cb662c3520282e6f5717214004a7f2688891905b6040516001600160a01b038316602482015260448101829052610ee090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612d3c565b6000811561238b576003546040516340b4c54560e11b81526001600160a01b03909116906381698a8a906123339073c00e94cb662c3520282e6f5717214004a7f26888907f0000000000000000000000000000000000000000000000000000000000000000908790600090600401613add565b60006040518083038186803b15801561234b57600080fd5b505afa15801561235f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261238791908101906138b9565b9150505b6007546040516370a0823160e01b815230600482015261240e916001600160a01b0316906370a08231906024015b60206040518083038186803b1580156123d157600080fd5b505afa1580156123e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124099190613a11565b612e0e565b610a8f9082613c55565b804710156124685760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161050f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146124b5576040519150601f19603f3d011682016040523d82523d6000602084013e6124ba565b606091505b5050905080610ee05760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161050f565b60408051600180825281830190925260009160208083019080368337505060075482519293506001600160a01b03169183915060009061258157634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015260405162e1ed9760e51b8152733d9819210a31b4961b30ef54be2aed79b9c9cd3b90631c3db2e0906125d19030908590600401613b06565b600060405180830381600087803b1580156125eb57600080fd5b505af11580156125ff573d6000803e3d6000fd5b5050505050565b6007546040516370a0823160e01b8152306004820152600091829161263d916001600160a01b0316906370a08231906024016123b9565b905061265681841061264f5781612651565b835b612eb3565b9392505050565b60006126887f0000000000000000000000000000000000000000000000000000000000000000612f8a565b6007546040516370a0823160e01b81523060048201526000916126bf916001600160a01b03909116906370a08231906024016123b9565b9050828111156126d8576126d66126518483613cac565b505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561273a57600080fd5b505afa15801561274e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127729190613a11565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663edaafe206040518163ffffffff1660e01b815260040160206040518083038186803b1580156127cf57600080fd5b505afa1580156127e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612807919061389d565b90506001600160a01b03811615612b16576000816001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b15801561285357600080fd5b505afa158015612867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288b9190613a11565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156128f257600080fd5b505afa158015612906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292a9190613a11565b9050818111156129a2576001600160a01b03831663d845a4b361294d8484613cac565b6040518263ffffffff1660e01b815260040161296b91815260200190565b600060405180830381600087803b15801561298557600080fd5b505af1158015612999573d6000803e3d6000fd5b50505050612b13565b60006129ae8284613cac565b9050808510612a5f5760405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b158015612a2157600080fd5b505af1158015612a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5991906139df565b50612b11565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018790527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b158015612ac957600080fd5b505af1158015612add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0191906139df565b5060009650505050505050610a92565b505b50505b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612b7557600080fd5b505afa158015612b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bad9190613a11565b95945050505050565b6007546040516370a0823160e01b81523060048201526000918291612bed916001600160a01b0316906370a08231906024016123b9565b905082811015612c01576126568184613cac565b50919050565b60008115610a9257610a8f82612606565b801580612ca15750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612c6757600080fd5b505afa158015612c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9f9190613a11565b155b612d0c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161050f565b6040516001600160a01b038316602482015260448101829052610ee090849063095ea7b360e01b90606401612289565b6000612d91826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130889092919063ffffffff16565b805190915015610ee05780806020019051810190612daf91906139df565b610ee05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161050f565b6000670de0b6b3a7640000600760009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015612e6757600080fd5b505afa158015612e7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9f9190613a11565b612ea99084613c8d565b610a8f9190613c6d565b60008115612f865760075460405163852a12e360e01b8152600481018490526001600160a01b039091169063852a12e390602401602060405180830381600087803b158015612f0157600080fd5b505af1158015612f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f399190613a11565b15612f865760405162461bcd60e51b815260206004820152601d60248201527f77697468647261772d66726f6d2d636f6d706f756e642d6661696c6564000000604482015260640161050f565b5090565b612f92612531565b6040516370a0823160e01b815230600482015260009073c00e94cb662c3520282e6f5717214004a7f26888906370a082319060240160206040518083038186803b158015612fdf57600080fd5b505afa158015612ff3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130179190613a11565b905080156108535760006006546127101415613034576001613066565b61306661305e61305873c00e94cb662c3520282e6f5717214004a7f268888661309f565b84613298565b6006546133c3565b9050610ee073c00e94cb662c3520282e6f5717214004a7f268888484846133e6565b606061309784846000856135a7565b949350505050565b60606001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214806130e857506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b15613196576040805160028082526060820183529091602083019080368337019050509050828160008151811061312f57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050818160018151811061317157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050613292565b60408051600380825260808201909252906020820160608036833701905050905082816000815181106131d957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160018151811061322f57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050818160028151811061327157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b92915050565b600060018351116132e15760405162461bcd60e51b81526020600482015260136024820152720d2dcecc2d8d2c85adee4c2c6d8ca5ae0c2e8d606b1b604482015260640161050f565b50806000805b600185516132f59190613cac565b8110156133bb5761336185828151811061331f57634e487b7160e01b600052603260045260246000fd5b6020026020010151868360016133359190613c55565b8151811061335357634e487b7160e01b600052603260045260246000fd5b6020026020010151856136cf565b9093509150816133a95760405162461bcd60e51b8152602060048201526013602482015272696e76616c69642d6f7261636c652d7261746560681b604482015260640161050f565b806133b381613cf3565b9150506132e7565b505092915050565b60006127106133d28382613cac565b6133dc9085613c8d565b6126569190613c6d565b600354604051631d1f307960e31b81526001600160a01b038681166004830152858116602483015260448201859052600092839283929091169063e8f983c89060640160006040518083038186803b15801561344157600080fd5b505afa158015613455573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261347d91908101906138fe565b925092509250836000141561349157600193505b811561359e57600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b1580156134db57600080fd5b505afa1580156134ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613513919061389d565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b8152600401613546959493929190613bc4565b600060405180830381600087803b15801561356057600080fd5b505af1158015613574573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261359c919081019061394c565b505b50505050505050565b6060824710156136085760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161050f565b843b6136565760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161050f565b600080866001600160a01b031685876040516136729190613ac1565b60006040518083038185875af1925050503d80600081146136af576040519150601f19603f3d011682016040523d82523d6000602084013e6136b4565b606091505b50915091506136c48282866137c0565b979650505050505050565b6003546004805460055460405163b67bb24d60e01b81526001600160a01b038881169482019490945286841660248201526044810186905260648101929092526084820152600092839283928392919091169063b67bb24d9060a401606060405180830381600087803b15801561374557600080fd5b505af1158015613759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377d9190613a4a565b5091509150600454426137909190613cac565b8111801561379d57508115155b156137ae57509150600190506137b8565b6000809350935050505b935093915050565b606083156137cf575081612656565b8251156137df5782518084602001fd5b8160405162461bcd60e51b815260040161050f9190613b2a565b600082601f830112613809578081fd5b8151602061381e61381983613c31565b613c00565b80838252828201915082860187848660051b890101111561383d578586fd5b855b8581101561386457815161385281613d3a565b8452928401929084019060010161383f565b5090979650505050505050565b80518015158114610a9257600080fd5b600060208284031215613892578081fd5b813561265681613d3a565b6000602082840312156138ae578081fd5b815161265681613d3a565b600080604083850312156138cb578081fd5b825167ffffffffffffffff8111156138e1578182fd5b6138ed858286016137f9565b925050602083015190509250929050565b600080600060608486031215613912578081fd5b835167ffffffffffffffff811115613928578182fd5b613934868287016137f9565b93505060208401519150604084015190509250925092565b6000602080838503121561395e578182fd5b825167ffffffffffffffff811115613974578283fd5b8301601f81018513613984578283fd5b805161399261381982613c31565b80828252848201915084840188868560051b87010111156139b1578687fd5b8694505b838510156139d35780518352600194909401939185019185016139b5565b50979650505050505050565b6000602082840312156139f0578081fd5b61265682613871565b600060208284031215613a0a578081fd5b5035919050565b600060208284031215613a22578081fd5b5051919050565b60008060408385031215613a3b578182fd5b50508035926020909101359150565b600080600060608486031215613a5e578283fd5b8351925060208401519150613a7560408501613871565b90509250925092565b6000815180845260208085019450808401835b83811015613ab65781516001600160a01b031687529582019590820190600101613a91565b509495945050505050565b60008251613ad3818460208701613cc3565b9190910192915050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b038316815260406020820181905260009061309790830184613a7e565b6000602082528251806020840152613b49816040850160208701613cc3565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b600086825285602083015260a06040830152613be360a0830186613a7e565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613c2957613c29613d24565b604052919050565b600067ffffffffffffffff821115613c4b57613c4b613d24565b5060051b60200190565b60008219821115613c6857613c68613d0e565b500190565b600082613c8857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613ca757613ca7613d0e565b500290565b600082821015613cbe57613cbe613d0e565b500390565b60005b83811015613cde578181015183820152602001613cc6565b83811115613ced576000848401525b50505050565b6000600019821415613d0757613d07613d0e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146105da57600080fdfea264697066735822122041387e16f52e02e2f47fb79377ba61af9ac8a0d0b96fdd1680593155a66e3ad464736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063a3f4df7e11610104578063d2c35ce8116100a2578063ec78e83211610071578063ec78e832146103f5578063fb589de214610408578063fc0c546a14610419578063ffa1ad741461042a576101cf565b8063d2c35ce8146103bf578063d4c3eea0146103d2578063e00af4a7146103da578063e645c202146103ed576101cf565b8063b2016bd4116100de578063b2016bd414610369578063c415b95c14610390578063cd2d7ebe146103a3578063ce5494bb146103ac576101cf565b8063a3f4df7e14610305578063a923b2a61461034e578063aa10188614610361576101cf565b8063440d724811610171578063709d039d1161014b578063709d039d146102cf5780637d7c2a1c146102e2578063951dc22c146102ea57806399b71d5c146102fd576101cf565b8063440d7248146102865780634c36fad7146102a957806367f5e4b8146102bc576101cf565b80631aedeabe116101ad5780631aedeabe146102405780632e1a7d4d146102575780634032b72b1461026a57806342189c8f1461027d576101cf565b806314ae9f2e146101d457806316f0115b146101e957806319ab453c1461022d575b600080fd5b6101e76101e2366004613881565b61044e565b005b6102107f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101e761023b366004613881565b6105dd565b61024960065481565b604051908152602001610224565b6101e76102653660046139f9565b610857565b6101e7610278366004613881565b6108d4565b61024960045481565b610299610294366004613881565b610a54565b6040519015158152602001610224565b6101e76102b7366004613881565b610a97565b6101e76102ca3660046139f9565b610c4a565b600354610210906001600160a01b031681565b6101e7610d96565b600154610210906001600160a01b031681565b6101e7610ee5565b6103416040518060400160405280601e81526020017f436f6d706f756e642d436f7665726167652d53747261746567792d444149000081525081565b6040516102249190613b2a565b6101e761035c366004613a29565b610fa1565b6101e76111d6565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b600254610210906001600160a01b031681565b61024960055481565b6101e76103ba366004613881565b611283565b6101e76103cd366004613881565b6115a3565b61024961176c565b6101e76103e8366004613881565b611800565b610249611a9b565b600054610210906001600160a01b031681565b6102496104163660046139f9565b90565b6000546001600160a01b0316610210565b610341604051806040016040528060058152602001640332e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a757600080fd5b505afa1580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df919061389d565b6001600160a01b0316336001600160a01b0316146105185760405162461bcd60e51b815260040161050f90613b8d565b60405180910390fd5b600154604051631484968760e11b81526001600160a01b038381166004830152909116906329092d0e90602401602060405180830381600087803b15801561055f57600080fd5b505af1158015610573573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059791906139df565b6105da5760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b604482015260640161050f565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561063657600080fd5b505afa15801561064a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066e919061389d565b6001600160a01b0316336001600160a01b03161461069e5760405162461bcd60e51b815260040161050f90613b8d565b6001546001600160a01b0316156106f75760405162461bcd60e51b815260206004820152601b60248201527f6b65657065722d6c6973742d616c72656164792d637265617465640000000000604482015260640161050f565b6000819050806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561073757600080fd5b505af115801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f919061389d565b600180546001600160a01b0319166001600160a01b03929092169182179055630a3b0a4f61079a3390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b1580156107db57600080fd5b505af11580156107ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081391906139df565b6108535760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640161050f565b5050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146108cb5760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604482015260640161050f565b6105da81611ae0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561092d57600080fd5b505afa158015610941573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610965919061389d565b6001600160a01b0316336001600160a01b0316146109955760405162461bcd60e51b815260040161050f90613b8d565b600154604051630a3b0a4f60e01b81526001600160a01b03838116600483015290911690630a3b0a4f90602401602060405180830381600087803b1580156109dc57600080fd5b505af11580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1491906139df565b6105da5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640161050f565b6007546000906001600160a01b0383811691161480610a8f57506001600160a01b03821673c00e94cb662c3520282e6f5717214004a7f26888145b90505b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610af057600080fd5b505afa158015610b04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b28919061389d565b6001600160a01b0316336001600160a01b031614610b585760405162461bcd60e51b815260040161050f90613b8d565b6001600160a01b038116610ba35760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b604482015260640161050f565b6003546001600160a01b0382811691161415610bee5760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b604482015260640161050f565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610ca357600080fd5b505afa158015610cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdb919061389d565b6001600160a01b0316336001600160a01b031614610d0b5760405162461bcd60e51b815260040161050f90613b8d565b612710811115610d565760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b604482015260640161050f565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610de757600080fd5b505afa158015610dfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1f91906139df565b610e3b5760405162461bcd60e51b815260040161050f90613b5d565b6000806000610e48611b5c565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b158015610ec057600080fd5b505af1158015610ed4573d6000803e3d6000fd5b50505050610ee0611cc3565b505050565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610f3657600080fd5b505afa158015610f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6e91906139df565b610f8a5760405162461bcd60e51b815260040161050f90613b5d565b610f946000611e30565b610f9f600019611e30565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610ffa57600080fd5b505afa15801561100e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611032919061389d565b6001600160a01b0316336001600160a01b0316146110625760405162461bcd60e51b815260040161050f90613b8d565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156110b057600080fd5b505afa1580156110c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e89190613a11565b811061112d5760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b604482015260640161050f565b816111385760045491505b603b82116111805760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b604482015260640161050f565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561122757600080fd5b505afa15801561123b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125f91906139df565b61127b5760405162461bcd60e51b815260040161050f90613b5d565b610f9f611ffa565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146112f75760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604482015260640161050f565b6001600160a01b03811661134d5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f00000000604482015260640161050f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113b057600080fd5b505afa1580156113c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e8919061389d565b6001600160a01b0316146114375760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b604482015260640161050f565b611440816121b5565b6000546040516370a0823160e01b81523060048201526114d49183916001600160a01b03909116906370a082319060240160206040518083038186803b15801561148957600080fd5b505afa15801561149d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c19190613a11565b6000546001600160a01b0316919061225d565b6040516370a0823160e01b81523060048201526105da9082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906024015b60206040518083038186803b15801561153a57600080fd5b505afa15801561154e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115729190613a11565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061225d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156115fc57600080fd5b505afa158015611610573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611634919061389d565b6001600160a01b0316336001600160a01b0316146116645760405162461bcd60e51b815260040161050f90613b8d565b6001600160a01b0381166116ba5760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f000000604482015260640161050f565b6002546001600160a01b03828116911614156117105760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b604482015260640161050f565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b60405163331faf7160e21b81523060048201526000906117fb90733d9819210a31b4961b30ef54be2aed79b9c9cd3b9063cc7ebdc4906024015b60206040518083038186803b1580156117be57600080fd5b505afa1580156117d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f69190613a11565b6122c0565b905090565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561185157600080fd5b505afa158015611865573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188991906139df565b6118a55760405162461bcd60e51b815260040161050f90613b5d565b6002546001600160a01b03166118f55760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b604482015260640161050f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156119775760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c00604482015260640161050f565b61198081610a54565b156119c45760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b604482015260640161050f565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611a04576002546119ff906001600160a01b031647612418565b6105da565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611a4657600080fd5b505afa158015611a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7e9190613a11565b600254909150610853906001600160a01b0384811691168361225d565b6000611aa5612531565b6040516370a0823160e01b81523060048201526117fb9073c00e94cb662c3520282e6f5717214004a7f26888906370a08231906024016117a6565b611ae981612606565b506040516370a0823160e01b81523060048201526105da907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401611522565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b158015611bc457600080fd5b505afa158015611bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfc9190613a11565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b158015611c6157600080fd5b505afa158015611c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c999190613a11565b9050611ca48161265d565b9450611caf81612bb6565b9350611cba82612c07565b92505050909192565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611d2557600080fd5b505afa158015611d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5d9190613a11565b905080156105da5760075460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b158015611dab57600080fd5b505af1158015611dbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de39190613a11565b156105da5760405162461bcd60e51b815260206004820152601a60248201527f6465706f7369742d746f2d636f6d706f756e642d6661696c6564000000000000604482015260640161050f565b611e846001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612c18565b600754611ebe906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683612c18565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0f57600080fd5b505afa158015611f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f479190613a11565b81101561085357600354604051636e74a6f760e01b815260048101839052611fe8916001600160a01b031690636e74a6f79060240160206040518083038186803b158015611f9457600080fd5b505afa158015611fa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fcc919061389d565b73c00e94cb662c3520282e6f5717214004a7f268889084612c18565b80611ff281613cf3565b915050611ec1565b60035460048054600554604051630f30f2d360e21b81526001600160a01b0390941693633cc3cb4c9361205d9373c00e94cb662c3520282e6f5717214004a7f268889373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2939192909101613add565b602060405180830381600087803b15801561207757600080fd5b505af115801561208b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120af919061389d565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214610f9f5760035460048054600554604051630f30f2d360e21b81526001600160a01b0390941693633cc3cb4c936121639373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2937f0000000000000000000000000000000000000000000000000000000000000000939192909101613add565b602060405180830381600087803b15801561217d57600080fd5b505af1158015612191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105da919061389d565b6121bd612531565b6040516370a0823160e01b81523060048201526105da90829073c00e94cb662c3520282e6f5717214004a7f26888906370a082319060240160206040518083038186803b15801561220d57600080fd5b505afa158015612221573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122459190613a11565b73c00e94cb662c3520282e6f5717214004a7f2688891905b6040516001600160a01b038316602482015260448101829052610ee090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612d3c565b6000811561238b576003546040516340b4c54560e11b81526001600160a01b03909116906381698a8a906123339073c00e94cb662c3520282e6f5717214004a7f26888907f0000000000000000000000000000000000000000000000000000000000000000908790600090600401613add565b60006040518083038186803b15801561234b57600080fd5b505afa15801561235f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261238791908101906138b9565b9150505b6007546040516370a0823160e01b815230600482015261240e916001600160a01b0316906370a08231906024015b60206040518083038186803b1580156123d157600080fd5b505afa1580156123e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124099190613a11565b612e0e565b610a8f9082613c55565b804710156124685760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161050f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146124b5576040519150601f19603f3d011682016040523d82523d6000602084013e6124ba565b606091505b5050905080610ee05760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161050f565b60408051600180825281830190925260009160208083019080368337505060075482519293506001600160a01b03169183915060009061258157634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015260405162e1ed9760e51b8152733d9819210a31b4961b30ef54be2aed79b9c9cd3b90631c3db2e0906125d19030908590600401613b06565b600060405180830381600087803b1580156125eb57600080fd5b505af11580156125ff573d6000803e3d6000fd5b5050505050565b6007546040516370a0823160e01b8152306004820152600091829161263d916001600160a01b0316906370a08231906024016123b9565b905061265681841061264f5781612651565b835b612eb3565b9392505050565b60006126887f0000000000000000000000000000000000000000000000000000000000000000612f8a565b6007546040516370a0823160e01b81523060048201526000916126bf916001600160a01b03909116906370a08231906024016123b9565b9050828111156126d8576126d66126518483613cac565b505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561273a57600080fd5b505afa15801561274e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127729190613a11565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663edaafe206040518163ffffffff1660e01b815260040160206040518083038186803b1580156127cf57600080fd5b505afa1580156127e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612807919061389d565b90506001600160a01b03811615612b16576000816001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b15801561285357600080fd5b505afa158015612867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288b9190613a11565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156128f257600080fd5b505afa158015612906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292a9190613a11565b9050818111156129a2576001600160a01b03831663d845a4b361294d8484613cac565b6040518263ffffffff1660e01b815260040161296b91815260200190565b600060405180830381600087803b15801561298557600080fd5b505af1158015612999573d6000803e3d6000fd5b50505050612b13565b60006129ae8284613cac565b9050808510612a5f5760405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b158015612a2157600080fd5b505af1158015612a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5991906139df565b50612b11565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018790527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b158015612ac957600080fd5b505af1158015612add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0191906139df565b5060009650505050505050610a92565b505b50505b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612b7557600080fd5b505afa158015612b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bad9190613a11565b95945050505050565b6007546040516370a0823160e01b81523060048201526000918291612bed916001600160a01b0316906370a08231906024016123b9565b905082811015612c01576126568184613cac565b50919050565b60008115610a9257610a8f82612606565b801580612ca15750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612c6757600080fd5b505afa158015612c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9f9190613a11565b155b612d0c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161050f565b6040516001600160a01b038316602482015260448101829052610ee090849063095ea7b360e01b90606401612289565b6000612d91826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130889092919063ffffffff16565b805190915015610ee05780806020019051810190612daf91906139df565b610ee05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161050f565b6000670de0b6b3a7640000600760009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015612e6757600080fd5b505afa158015612e7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9f9190613a11565b612ea99084613c8d565b610a8f9190613c6d565b60008115612f865760075460405163852a12e360e01b8152600481018490526001600160a01b039091169063852a12e390602401602060405180830381600087803b158015612f0157600080fd5b505af1158015612f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f399190613a11565b15612f865760405162461bcd60e51b815260206004820152601d60248201527f77697468647261772d66726f6d2d636f6d706f756e642d6661696c6564000000604482015260640161050f565b5090565b612f92612531565b6040516370a0823160e01b815230600482015260009073c00e94cb662c3520282e6f5717214004a7f26888906370a082319060240160206040518083038186803b158015612fdf57600080fd5b505afa158015612ff3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130179190613a11565b905080156108535760006006546127101415613034576001613066565b61306661305e61305873c00e94cb662c3520282e6f5717214004a7f268888661309f565b84613298565b6006546133c3565b9050610ee073c00e94cb662c3520282e6f5717214004a7f268888484846133e6565b606061309784846000856135a7565b949350505050565b60606001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214806130e857506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b15613196576040805160028082526060820183529091602083019080368337019050509050828160008151811061312f57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050818160018151811061317157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050613292565b60408051600380825260808201909252906020820160608036833701905050905082816000815181106131d957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160018151811061322f57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050818160028151811061327157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b92915050565b600060018351116132e15760405162461bcd60e51b81526020600482015260136024820152720d2dcecc2d8d2c85adee4c2c6d8ca5ae0c2e8d606b1b604482015260640161050f565b50806000805b600185516132f59190613cac565b8110156133bb5761336185828151811061331f57634e487b7160e01b600052603260045260246000fd5b6020026020010151868360016133359190613c55565b8151811061335357634e487b7160e01b600052603260045260246000fd5b6020026020010151856136cf565b9093509150816133a95760405162461bcd60e51b8152602060048201526013602482015272696e76616c69642d6f7261636c652d7261746560681b604482015260640161050f565b806133b381613cf3565b9150506132e7565b505092915050565b60006127106133d28382613cac565b6133dc9085613c8d565b6126569190613c6d565b600354604051631d1f307960e31b81526001600160a01b038681166004830152858116602483015260448201859052600092839283929091169063e8f983c89060640160006040518083038186803b15801561344157600080fd5b505afa158015613455573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261347d91908101906138fe565b925092509250836000141561349157600193505b811561359e57600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b1580156134db57600080fd5b505afa1580156134ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613513919061389d565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b8152600401613546959493929190613bc4565b600060405180830381600087803b15801561356057600080fd5b505af1158015613574573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261359c919081019061394c565b505b50505050505050565b6060824710156136085760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161050f565b843b6136565760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161050f565b600080866001600160a01b031685876040516136729190613ac1565b60006040518083038185875af1925050503d80600081146136af576040519150601f19603f3d011682016040523d82523d6000602084013e6136b4565b606091505b50915091506136c48282866137c0565b979650505050505050565b6003546004805460055460405163b67bb24d60e01b81526001600160a01b038881169482019490945286841660248201526044810186905260648101929092526084820152600092839283928392919091169063b67bb24d9060a401606060405180830381600087803b15801561374557600080fd5b505af1158015613759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377d9190613a4a565b5091509150600454426137909190613cac565b8111801561379d57508115155b156137ae57509150600190506137b8565b6000809350935050505b935093915050565b606083156137cf575081612656565b8251156137df5782518084602001fd5b8160405162461bcd60e51b815260040161050f9190613b2a565b600082601f830112613809578081fd5b8151602061381e61381983613c31565b613c00565b80838252828201915082860187848660051b890101111561383d578586fd5b855b8581101561386457815161385281613d3a565b8452928401929084019060010161383f565b5090979650505050505050565b80518015158114610a9257600080fd5b600060208284031215613892578081fd5b813561265681613d3a565b6000602082840312156138ae578081fd5b815161265681613d3a565b600080604083850312156138cb578081fd5b825167ffffffffffffffff8111156138e1578182fd5b6138ed858286016137f9565b925050602083015190509250929050565b600080600060608486031215613912578081fd5b835167ffffffffffffffff811115613928578182fd5b613934868287016137f9565b93505060208401519150604084015190509250925092565b6000602080838503121561395e578182fd5b825167ffffffffffffffff811115613974578283fd5b8301601f81018513613984578283fd5b805161399261381982613c31565b80828252848201915084840188868560051b87010111156139b1578687fd5b8694505b838510156139d35780518352600194909401939185019185016139b5565b50979650505050505050565b6000602082840312156139f0578081fd5b61265682613871565b600060208284031215613a0a578081fd5b5035919050565b600060208284031215613a22578081fd5b5051919050565b60008060408385031215613a3b578182fd5b50508035926020909101359150565b600080600060608486031215613a5e578283fd5b8351925060208401519150613a7560408501613871565b90509250925092565b6000815180845260208085019450808401835b83811015613ab65781516001600160a01b031687529582019590820190600101613a91565b509495945050505050565b60008251613ad3818460208701613cc3565b9190910192915050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b038316815260406020820181905260009061309790830184613a7e565b6000602082528251806020840152613b49816040850160208701613cc3565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b600086825285602083015260a06040830152613be360a0830186613a7e565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613c2957613c29613d24565b604052919050565b600067ffffffffffffffff821115613c4b57613c4b613d24565b5060051b60200190565b60008219821115613c6857613c68613d0e565b500190565b600082613c8857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613ca757613ca7613d0e565b500290565b600082821015613cbe57613cbe613d0e565b500390565b60005b83811015613cde578181015183820152602001613cc6565b83811115613ced576000848401525b50505050565b6000600019821415613d0757613d07613d0e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146105da57600080fdfea264697066735822122041387e16f52e02e2f47fb79377ba61af9ac8a0d0b96fdd1680593155a66e3ad464736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "convertFrom18(uint256)": {
        "details": "Convert from 18 decimals to token defined decimals. Default no conversion."
      },
      "init(address)": {
        "params": {
          "_addressListFactory": "To support same code in eth side chain, user _addressListFactory as param ethereum- 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3 polygon-0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291"
        }
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "details": "Rebalance profit, loss and investment of this strategy"
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweepERC20(address)": {
        "details": "sweep given token to feeCollector of strategy",
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "totalValue()": {
        "details": "Report total value in collateral token"
      },
      "totalValueCurrent()": {
        "details": "Report total value in collateral token"
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_swapManager": "swap manager address"
        }
      },
      "withdraw(uint256)": {
        "details": "Withdraw collateral token from lending pool.",
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "init(address)": {
        "notice": "Create keeper list NOTE: Any function with onlyKeeper modifier will not work until this function is called. NOTE: Due to gas constraint this function cannot be called in constructor."
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "token()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "totalValue()": {
        "notice": "Calculate total value using COMP accrued and cToken"
      },
      "totalValueCurrent()": {
        "notice": "Calculate total value of asset under management (in real-time)"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11050,
        "contract": "contracts/strategies/compound/vfr/CompoundCoverageStrategyDAI.sol:CompoundCoverageStrategyDAI",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11056,
        "contract": "contracts/strategies/compound/vfr/CompoundCoverageStrategyDAI.sol:CompoundCoverageStrategyDAI",
        "label": "keepers",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAddressList)3647"
      },
      {
        "astId": 11059,
        "contract": "contracts/strategies/compound/vfr/CompoundCoverageStrategyDAI.sol:CompoundCoverageStrategyDAI",
        "label": "feeCollector",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 11062,
        "contract": "contracts/strategies/compound/vfr/CompoundCoverageStrategyDAI.sol:CompoundCoverageStrategyDAI",
        "label": "swapManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISwapManager)3950"
      },
      {
        "astId": 11065,
        "contract": "contracts/strategies/compound/vfr/CompoundCoverageStrategyDAI.sol:CompoundCoverageStrategyDAI",
        "label": "oraclePeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 11068,
        "contract": "contracts/strategies/compound/vfr/CompoundCoverageStrategyDAI.sol:CompoundCoverageStrategyDAI",
        "label": "oracleRouterIdx",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 11071,
        "contract": "contracts/strategies/compound/vfr/CompoundCoverageStrategyDAI.sol:CompoundCoverageStrategyDAI",
        "label": "swapSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 15251,
        "contract": "contracts/strategies/compound/vfr/CompoundCoverageStrategyDAI.sol:CompoundCoverageStrategyDAI",
        "label": "cToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(CToken)4062"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(CToken)4062": {
        "encoding": "inplace",
        "label": "contract CToken",
        "numberOfBytes": "20"
      },
      "t_contract(IAddressList)3647": {
        "encoding": "inplace",
        "label": "contract IAddressList",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)3950": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}