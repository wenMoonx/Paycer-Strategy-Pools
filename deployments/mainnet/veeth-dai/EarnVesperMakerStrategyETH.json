{
  "address": "0x3533053a07B0127368841240eFEd9bAE973a429E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDripPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDripPeriod",
          "type": "uint256"
        }
      ],
      "name": "DripPeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRouterIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOracleConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSwapSlippage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveGrowToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cm",
      "outputs": [
        {
          "internalType": "contract ICollateralManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralType",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "convertFrom18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highWater",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressListFactory",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUnderwater",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lowWater",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRouterIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resurface",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setupOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEarned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValueCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_highWater",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lowWater",
          "type": "uint256"
        }
      ],
      "name": "updateBalancingFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dripPeriod",
          "type": "uint256"
        }
      ],
      "name": "updateDripPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "updateOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2adf254c64253e10c66efa9d7d0a659ee7d71cbdb2f81af051c5303b05588f3e",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0x3533053a07B0127368841240eFEd9bAE973a429E",
    "transactionIndex": 225,
    "gasUsed": "4560484",
    "logsBloom": "0x
    "blockHash": "0xb99644e783f628b93ea5adf8797a749e87a4ff715623d75fefed38eab654985a",
    "transactionHash": "0x2adf254c64253e10c66efa9d7d0a659ee7d71cbdb2f81af051c5303b05588f3e",
    "logs": [],
    "blockNumber": 13462364,
    "cumulativeGasUsed": "18040172",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA89566489E932a2d334b9eFF7884Feb21a07d2B3",
    "0xaBC64889601F01e7B26277Ef8756250d6ABf8c18",
    "0xe382d9f2394A359B01006faa8A1864b8a60d2710",
    "0x0538C8bAc84E95A9dF8aC10Aad17DbE81b9E36ee"
  ],
  "solcInputHash": "f9fef1ebc8a531bad2606f7a50f9c3c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDripPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDripPeriod\",\"type\":\"uint256\"}],\"name\":\"DripPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveGrowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cm\",\"outputs\":[{\"internalType\":\"contract ICollateralManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertFrom18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highWater\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressListFactory\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnderwater\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowWater\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resurface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_highWater\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lowWater\",\"type\":\"uint256\"}],\"name\":\"updateBalancingFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dripPeriod\",\"type\":\"uint256\"}],\"name\":\"updateDripPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveGrowToken()\":{\"details\":\"Approves EarnDrip' Grow token to spend dripToken\"},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"convertFrom18(uint256)\":{\"details\":\"Convert from 18 decimals to token defined decimals. Default no conversion.\"},\"init(address)\":{\"params\":{\"_addressListFactory\":\"To support same code in eth side chain, user _addressListFactory as param ethereum- 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3 polygon-0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291\"}},\"isReservedToken(address)\":{\"details\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"details\":\"Rebalance profit, loss and investment of this strategy\"},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"resurface()\":{\"details\":\"If pool is underwater this function will resolve underwater condition. If Debt in Maker is greater than Dai balance in lender then pool is underwater. Lowering DAI debt in Maker will resolve underwater condition. Resolve: Calculate required collateral token to lower DAI debt. Withdraw required collateral token from Maker and convert those to DAI via Uniswap. Finally payback debt in Maker using DAI.Also report loss in pool.\"},\"sweepERC20(address)\":{\"details\":\"sweep given token to feeCollector of strategy\",\"params\":{\"_fromToken\":\"token address to sweep\"}},\"totalValue()\":{\"details\":\"Make sure to return value in collateral token and in order to do that we are using Uniswap to get collateral amount for earned DAI.\"},\"totalValueCurrent()\":{\"details\":\"Report total value in collateral token\"},\"updateBalancingFactor(uint256,uint256)\":{\"params\":{\"_highWater\":\"Value for high water mark.\",\"_lowWater\":\"Value for low water mark.\"}},\"updateDripPeriod(uint256)\":{\"details\":\"_dripPeriod in seconds\"},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapManager(address)\":{\"params\":{\"_swapManager\":\"swap manager address\"}},\"withdraw(uint256)\":{\"details\":\"Withdraw collateral token from lending pool.\",\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"createVault()\":{\"notice\":\"Create new Maker vault\"},\"init(address)\":{\"notice\":\"Create keeper list NOTE: Any function with onlyKeeper modifier will not work until this function is called. NOTE: Due to gas constraint this function cannot be called in constructor.\"},\"isUnderwater()\":{\"notice\":\"Returns true if pool is underwater.Underwater - If debt is greater than earning of pool.Earning - Sum of DAI balance and DAI from accrued reward, if any, in lending pool.\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"token()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"totalValue()\":{\"notice\":\"Report total value of this strategy\"},\"totalValueCurrent()\":{\"notice\":\"Calculate total value of asset under management (in real-time)\"},\"updateBalancingFactor(uint256,uint256)\":{\"notice\":\"Update balancing factors aka high water and low water values. Water mark values represent Collateral Ratio in Maker. For example 300 as high water means 300% collateral ratio.\"},\"updateDripPeriod(uint256)\":{\"notice\":\"Update update period of distribution of earning done in one rebalance\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/maker/earn/EarnPaycerMakerStrategyETH.sol\":\"EarnPaycerMakerStrategyETH\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/interfaces/bloq/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    function add(address a) external returns (bool);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function length() external view returns (uint256);\\n\\n    function grantRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x573e4beae1fcf79639afaf2ab3eb606b599fb71d678ca64e69f07620a3091af3\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressListFactory {\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0x150ffedb5ad13b6f3ed4802b9eb4400567aecbac4faf9615be0f46d27ac40087\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0xbfaebdde57187f71c2c9f430002c310cd51638967deb4cc9d58877e1f2bf562e\",\"license\":\"MIT\"},\"contracts/interfaces/paycer/ICollateralManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface ICollateralManager {\\n    function addGemJoin(address[] calldata _gemJoins) external;\\n\\n    function borrow(uint256 _amount) external;\\n\\n    function createVault(bytes32 _collateralType) external returns (uint256 _vaultNum);\\n\\n    function depositCollateral(uint256 _amount) external;\\n\\n    function payback(uint256 _amount) external;\\n\\n    function transferVaultOwnership(address _newOwner) external;\\n\\n    function withdrawCollateral(uint256 _amount) external;\\n\\n    function getVaultBalance(address _vaultOwner) external view returns (uint256 collateralLocked);\\n\\n    function getVaultDebt(address _vaultOwner) external view returns (uint256 daiDebt);\\n\\n    function getVaultInfo(address _vaultOwner)\\n        external\\n        view\\n        returns (\\n            uint256 collateralLocked,\\n            uint256 daiDebt,\\n            uint256 collateralUsdRate,\\n            uint256 collateralRatio,\\n            uint256 minimumDebt\\n        );\\n\\n    function mcdManager() external view returns (address);\\n\\n    function vaultNum(address _vaultOwner) external view returns (uint256 _vaultNum);\\n\\n    function whatWouldWithdrawDo(address _vaultOwner, uint256 _amount)\\n        external\\n        view\\n        returns (\\n            uint256 collateralLocked,\\n            uint256 daiDebt,\\n            uint256 collateralUsdRate,\\n            uint256 collateralRatio,\\n            uint256 minimumDebt\\n        );\\n}\\n\",\"keccak256\":\"0xedf3e2ac8ce311ac2b11686597eea017fce8ddae04cc3b5b5c46f81f3aa0ea11\",\"license\":\"MIT\"},\"contracts/interfaces/paycer/IEarnDrip.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./IPoolRewards.sol\\\";\\n\\ninterface IEarnDrip is IPoolRewards {\\n    function rewardTokens(uint256 _index) external view returns (address);\\n\\n    function growToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb58666a8838a99086dacecbac9701043a8b0535eea03d077eac240ae943fdc4b\",\"license\":\"MIT\"},\"contracts/interfaces/paycer/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IPoolRewards {\\n    /// Emitted after reward added\\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\\n    /// Emitted whenever any user claim rewards\\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n    /// Emitted after adding new rewards token into rewardTokens array\\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\\n\\n    function claimReward(address) external;\\n\\n    function notifyRewardAmount(\\n        address _rewardToken,\\n        uint256 _rewardAmount,\\n        uint256 _rewardDuration\\n    ) external;\\n\\n    function notifyRewardAmount(\\n        address[] memory _rewardTokens,\\n        uint256[] memory _rewardAmounts,\\n        uint256[] memory _rewardDurations\\n    ) external;\\n\\n    function updateReward(address) external;\\n\\n    function claimable(address _account)\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\\n\\n    function lastTimeRewardApplicable(address _rewardToken) external view returns (uint256);\\n\\n    function rewardForDuration()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\\n\\n    function rewardPerToken()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\\n}\\n\",\"keccak256\":\"0x2c32aea3476eebd75122915430df1c37e7a40778402f3c72aa3b6a40301cb485\",\"license\":\"MIT\"},\"contracts/interfaces/paycer/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalValueCurrent() external returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7187d0e7ed2af48c8f603b0dd5b34afd7e2c0792d8089cc909e765c478c20b8c\",\"license\":\"MIT\"},\"contracts/interfaces/paycer/IPaycerPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../bloq/IAddressList.sol\\\";\\n\\ninterface IPaycerPool is IERC20 {\\n    function deposit() external payable;\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function poolRewards() external returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function resetApproval() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawETH(uint256 _amount) external;\\n\\n    function whitelistedWithdraw(uint256 _amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function keepers() external view returns (IAddressList);\\n\\n    function maintainers() external view returns (IAddressList);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee,\\n            uint256 _debtRate,\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio\\n        );\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0725eb59a54238cbdcf2d14d2759a2fb4bd7550b9e4183c9350ff72e46a2b674\",\"license\":\"MIT\"},\"contracts/strategies/Earn.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/paycer/IEarnDrip.sol\\\";\\nimport \\\"../interfaces/paycer/IPaycerPool.sol\\\";\\nimport \\\"./Strategy.sol\\\";\\n\\nabstract contract Earn is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable dripToken;\\n\\n    uint256 public dripPeriod = 48 hours;\\n    uint256 public totalEarned; // accounting total stable coin earned. This amount is not reported to pool.\\n\\n    event DripPeriodUpdated(uint256 oldDripPeriod, uint256 newDripPeriod);\\n\\n    constructor(address _dripToken) {\\n        require(_dripToken != address(0), \\\"dripToken-zero\\\");\\n        dripToken = _dripToken;\\n    }\\n\\n    /**\\n     * @notice Update update period of distribution of earning done in one rebalance\\n     * @dev _dripPeriod in seconds\\n     */\\n    function updateDripPeriod(uint256 _dripPeriod) external onlyGovernor {\\n        require(_dripPeriod != 0, \\\"dripPeriod-zero\\\");\\n        require(_dripPeriod != dripPeriod, \\\"same-dripPeriod\\\");\\n        emit DripPeriodUpdated(dripPeriod, _dripPeriod);\\n        dripPeriod = _dripPeriod;\\n    }\\n\\n    /// @dev Approves EarnDrip' Grow token to spend dripToken\\n    function approveGrowToken() external onlyKeeper {\\n        address _dripContract = IPaycerPool(pool).poolRewards();\\n        address _growPool = IEarnDrip(_dripContract).growToken();\\n        // Checks that the Grow Pool supports dripToken as underlying\\n        require(address(IPaycerPool(_growPool).token()) == dripToken, \\\"invalid-grow-pool\\\");\\n        IERC20(dripToken).safeApprove(_growPool, 0);\\n        IERC20(dripToken).safeApprove(_growPool, MAX_UINT_VALUE);\\n    }\\n\\n    /// @notice Converts excess collateral earned to drip token\\n    function _convertCollateralToDrip() internal {\\n        uint256 _collateralAmount = collateralToken.balanceOf(address(this));\\n        _convertCollateralToDrip(_collateralAmount);\\n    }\\n\\n    function _convertCollateralToDrip(uint256 _collateralAmount) internal {\\n        if (_collateralAmount != 0) {\\n            uint256 minAmtOut =\\n                (swapSlippage != 10000)\\n                    ? _calcAmtOutAfterSlippage(\\n                        _getOracleRate(_simpleOraclePath(address(collateralToken), dripToken), _collateralAmount),\\n                        swapSlippage\\n                    )\\n                    : 1;\\n            _safeSwap(address(collateralToken), dripToken, _collateralAmount, minAmtOut);\\n        }\\n    }\\n\\n    /**\\n     * @notice Send this earning to drip contract.\\n     */\\n    function _forwardEarning() internal {\\n        (, uint256 _interestFee, , , , , , ) = IPaycerPool(pool).strategy(address(this));\\n        address _dripContract = IPaycerPool(pool).poolRewards();\\n        uint256 _earned = IERC20(dripToken).balanceOf(address(this));\\n        if (_earned != 0) {\\n            // Fetches which rewardToken collects the drip\\n            address _growPool = IEarnDrip(_dripContract).growToken();\\n            // Checks that the Grow Pool supports dripToken as underlying\\n            require(address(IPaycerPool(_growPool).token()) == dripToken, \\\"invalid-grow-pool\\\");\\n            totalEarned += _earned;\\n            uint256 _growPoolBalanceBefore = IERC20(_growPool).balanceOf(address(this));\\n            IPaycerPool(_growPool).deposit(_earned);\\n            uint256 _growPoolShares = IERC20(_growPool).balanceOf(address(this)) - _growPoolBalanceBefore;\\n            uint256 _fee = (_growPoolShares * _interestFee) / 10000;\\n            if (_fee != 0) {\\n                IERC20(_growPool).safeTransfer(feeCollector, _fee);\\n                _growPoolShares -= _fee;\\n            }\\n            IERC20(_growPool).safeTransfer(_dripContract, _growPoolShares);\\n            IEarnDrip(_dripContract).notifyRewardAmount(_growPool, _growPoolShares, dripPeriod);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x85ce242ea8e9652cf9d6358d34e4ff4b2aa9b0a3302b5e8a665b29331d6ba2b4\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../interfaces/bloq/IAddressList.sol\\\";\\nimport \\\"../interfaces/bloq/IAddressListFactory.sol\\\";\\nimport \\\"../interfaces/paycer/IStrategy.sol\\\";\\nimport \\\"../interfaces/paycer/IPaycerPool.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    IAddressList public keepers;\\n    address public override feeCollector;\\n    ISwapManager public swapManager;\\n\\n    uint256 public oraclePeriod = 3600; // 1h\\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        swapManager = ISwapManager(_swapManager);\\n        pool = _pool;\\n        collateralToken = IPaycerPool(_pool).token();\\n        receiptToken = _receiptToken;\\n    }\\n\\n    modifier onlyGovernor {\\n        require(_msgSender() == IPaycerPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-paycer-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Create keeper list\\n     * NOTE: Any function with onlyKeeper modifier will not work until this function is called.\\n     * NOTE: Due to gas constraint this function cannot be called in constructor.\\n     * @param _addressListFactory To support same code in eth side chain, user _addressListFactory as param\\n     * ethereum- 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3\\n     * polygon-0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291\\n     */\\n    function init(address _addressListFactory) external onlyGovernor {\\n        require(address(keepers) == address(0), \\\"keeper-list-already-created\\\");\\n        // Prepare keeper list\\n        IAddressListFactory _factory = IAddressListFactory(_addressListFactory);\\n        keepers = IAddressList(_factory.createList());\\n        require(keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyGovernor {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\\n        require(_newSwapSlippage <= 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\\n        swapSlippage = _newSwapSlippage;\\n    }\\n\\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\\n        require(_newRouterIdx < swapManager.N_DEX(), \\\"invalid-router-index\\\");\\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\\n        require(_newPeriod > 59, \\\"invalid-oracle-period\\\");\\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\\n        oraclePeriod = _newPeriod;\\n        oracleRouterIdx = _newRouterIdx;\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function setupOracles() external onlyKeeper {\\n        _setupOracles();\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral token from lending pool.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Rebalance profit, loss and investment of this strategy\\n     */\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IPaycerPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n    }\\n\\n    /**\\n     * @dev sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @dev Convert from 18 decimals to token defined decimals. Default no conversion.\\n    function convertFrom18(uint256 amount) public pure virtual returns (uint256) {\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _value);\\n\\n    /**\\n     * @notice Calculate total value of asset under management (in real-time)\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValueCurrent() external virtual override returns (uint256) {\\n        return totalValue();\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration. \\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\\n     * excess debt, if any.\\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IPaycerPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IPaycerPool(pool).totalDebtOf(address(this));\\n        _profit = _realizeProfit(_totalDebt);\\n        _loss = _realizeLoss(_totalDebt);\\n        _payback = _liquidate(_excessDebt);\\n    }\\n\\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\\n        return (_amount * (10000 - _slippage)) / (10000);\\n    }\\n\\n    function _simpleOraclePath(address _from, address _to) internal pure returns (address[] memory path) {\\n        if (_from == WETH || _to == WETH) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WETH;\\n            path[2] = _to;\\n        }\\n    }\\n\\n    function _consultOracle(\\n        address _from,\\n        address _to,\\n        uint256 _amt\\n    ) internal returns (uint256, bool) {\\n        // from, to, amountIn, period, router\\n        (uint256 rate, uint256 lastUpdate, ) = swapManager.consult(_from, _to, _amt, oraclePeriod, oracleRouterIdx);\\n        // We're looking at a TWAP ORACLE with a 1 hr Period that has been updated within the last hour\\n        if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\\n        return (0, false);\\n    }\\n\\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\\n        require(path.length > 1, \\\"invalid-oracle-path\\\");\\n        amountOut = _amountIn;\\n        bool isValid;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\\n            require(isValid, \\\"invalid-oracle-rate\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\\n     * however, this method will throw minAmountOut is not met\\n     * @param _from address of from token\\n     * @param _to address of to token\\n     * @param _amountIn Amount to be swapped\\n     * @param _minAmountOut minimum amount out\\n     */\\n    function _safeSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) internal {\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\\n        if (_minAmountOut == 0) _minAmountOut = 1;\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _amountIn,\\n                _minAmountOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    // These methods can be implemented by the inheriting strategy.\\n    /* solhint-disable no-empty-blocks */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\\n\\n    /**\\n     * @notice Set up any oracles that are needed for this strategy.\\n     */\\n    function _setupOracles() internal virtual {}\\n\\n    /* solhint-enable */\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _approveToken(uint256 _amount) internal virtual;\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\\n\\n    /**\\n     * @notice Calculate earning and withdraw/convert it into collateral token.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _profit Profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\\n\\n    /**\\n     * @notice Calculate loss\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\\n\\n    /**\\n     * @notice Reinvest collateral.\\n     * @dev Once we file report back in pool, we might have some collateral in hand\\n     * which we want to reinvest aka deposit in lender/provider.\\n     */\\n    function _reinvest() internal virtual;\\n}\\n\",\"keccak256\":\"0x16d264ec864209c8cbd6d9bd70d3fbfb58490cae0d4a2c2789672cebb8e74362\",\"license\":\"MIT\"},\"contracts/strategies/maker/MakerStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"../../interfaces/paycer/ICollateralManager.sol\\\";\\n\\n/// @dev This strategy will deposit collateral token in Maker, borrow Dai and\\n/// deposit borrowed DAI in other lending pool to earn interest.\\nabstract contract MakerStrategy is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    ICollateralManager public immutable cm;\\n    bytes32 public immutable collateralType;\\n    uint256 public highWater;\\n    uint256 public lowWater;\\n    uint256 private constant WAT = 10**16;\\n\\n    constructor(\\n        address _pool,\\n        address _cm,\\n        address _swapManager,\\n        address _receiptToken,\\n        bytes32 _collateralType\\n    ) Strategy(_pool, _swapManager, _receiptToken) {\\n        require(_cm != address(0), \\\"cm-address-is-zero\\\");\\n        collateralType = _collateralType;\\n        cm = ICollateralManager(_cm);\\n    }\\n\\n    /// @notice Create new Maker vault\\n    function createVault() external onlyGovernor {\\n        cm.createVault(collateralType);\\n    }\\n\\n    /**\\n     * @dev If pool is underwater this function will resolve underwater condition.\\n     * If Debt in Maker is greater than Dai balance in lender then pool is underwater.\\n     * Lowering DAI debt in Maker will resolve underwater condition.\\n     * Resolve: Calculate required collateral token to lower DAI debt. Withdraw required\\n     * collateral token from Maker and convert those to DAI via Uniswap.\\n     * Finally payback debt in Maker using DAI.\\n     * @dev Also report loss in pool.\\n     */\\n    function resurface() external onlyKeeper {\\n        _resurface();\\n    }\\n\\n    /**\\n     * @notice Update balancing factors aka high water and low water values.\\n     * Water mark values represent Collateral Ratio in Maker. For example 300 as high water\\n     * means 300% collateral ratio.\\n     * @param _highWater Value for high water mark.\\n     * @param _lowWater Value for low water mark.\\n     */\\n    function updateBalancingFactor(uint256 _highWater, uint256 _lowWater) external onlyGovernor {\\n        require(_lowWater != 0, \\\"lowWater-is-zero\\\");\\n        require(_highWater > _lowWater, \\\"highWater-less-than-lowWater\\\");\\n        highWater = _highWater * WAT;\\n        lowWater = _lowWater * WAT;\\n    }\\n\\n    /**\\n     * @notice Report total value of this strategy\\n     * @dev Make sure to return value in collateral token and in order to do that\\n     * we are using Uniswap to get collateral amount for earned DAI.\\n     */\\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\\n        uint256 _daiBalance = _getDaiBalance();\\n        uint256 _debt = cm.getVaultDebt(address(this));\\n        if (_daiBalance > _debt) {\\n            uint256 _daiEarned = _daiBalance - _debt;\\n            (, _totalValue) = swapManager.bestPathFixedInput(DAI, address(collateralToken), _daiEarned, 0);\\n        }\\n        _totalValue += convertFrom18(cm.getVaultBalance(address(this)));\\n    }\\n\\n    function vaultNum() external view returns (uint256) {\\n        return cm.vaultNum(address(this));\\n    }\\n\\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool) {\\n        return _token == receiptToken;\\n    }\\n\\n    /**\\n     * @notice Returns true if pool is underwater.\\n     * @notice Underwater - If debt is greater than earning of pool.\\n     * @notice Earning - Sum of DAI balance and DAI from accrued reward, if any, in lending pool.\\n     */\\n    function isUnderwater() public view virtual returns (bool) {\\n        return cm.getVaultDebt(address(this)) > _getDaiBalance();\\n    }\\n\\n    /**\\n     * @notice Before migration hook. It will be called during migration\\n     * @dev Transfer Maker vault ownership to new strategy\\n     * @param _newStrategy Address of new strategy.\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual override {\\n        cm.transferVaultOwnership(_newStrategy);\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        IERC20(DAI).safeApprove(address(cm), _amount);\\n        collateralToken.safeApprove(address(cm), _amount);\\n        collateralToken.safeApprove(pool, _amount);\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            collateralToken.safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n            IERC20(DAI).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n        }\\n    }\\n\\n    function _moveDaiToMaker(uint256 _amount) internal {\\n        if (_amount != 0) {\\n            _withdrawDaiFromLender(_amount);\\n            cm.payback(_amount);\\n        }\\n    }\\n\\n    function _moveDaiFromMaker(uint256 _amount) internal virtual {\\n        cm.borrow(_amount);\\n        _amount = IERC20(DAI).balanceOf(address(this));\\n        _depositDaiToLender(_amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @return payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt) internal virtual override returns (uint256) {\\n        _withdrawHere(_excessDebt);\\n        return _excessDebt;\\n    }\\n\\n    /**\\n     * @notice Calculate earning and convert it to collateral token\\n     * @dev Also claim rewards if available.\\n     *      Withdraw excess DAI from lender.\\n     *      Swap net earned DAI to collateral token\\n     * @return profit in collateral token\\n     */\\n    function _realizeProfit(\\n        uint256 /*_totalDebt*/\\n    ) internal virtual override returns (uint256) {\\n        _claimRewardsAndConvertTo(DAI);\\n        _rebalanceDaiInLender();\\n        uint256 _daiBalance = IERC20(DAI).balanceOf(address(this));\\n        if (_daiBalance != 0) {\\n            _safeSwap(DAI, address(collateralToken), _daiBalance, 1);\\n        }\\n        return collateralToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Calculate collateral loss from resurface, if any\\n     * @dev Difference of total debt of strategy in pool and collateral locked\\n     *      in Maker vault is the loss.\\n     * @return loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal virtual override returns (uint256) {\\n        uint256 _collateralLocked = convertFrom18(cm.getVaultBalance(address(this)));\\n        return _totalDebt > _collateralLocked ? _totalDebt - _collateralLocked : 0;\\n    }\\n\\n    /**\\n     * @notice Deposit collateral in Maker and rebalance collateral and debt in Maker.\\n     * @dev Based on defined risk parameter either borrow more DAI from Maker or\\n     * payback some DAI in Maker. It will try to mitigate risk of liquidation.\\n     */\\n    function _reinvest() internal virtual override {\\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\\n        if (_collateralBalance != 0) {\\n            cm.depositCollateral(_collateralBalance);\\n        }\\n\\n        (\\n            uint256 _collateralLocked,\\n            uint256 _currentDebt,\\n            uint256 _collateralUsdRate,\\n            uint256 _collateralRatio,\\n            uint256 _minimumAllowedDebt\\n        ) = cm.getVaultInfo(address(this));\\n        uint256 _maxDebt = (_collateralLocked * _collateralUsdRate) / highWater;\\n        if (_maxDebt < _minimumAllowedDebt) {\\n            // Dusting Scenario:: Based on collateral locked, if our max debt is less\\n            // than Maker defined minimum debt then payback whole debt and wind up.\\n            _moveDaiToMaker(_currentDebt);\\n        } else {\\n            if (_collateralRatio > highWater) {\\n                require(!isUnderwater(), \\\"pool-is-underwater\\\");\\n                // Safe to borrow more DAI\\n                _moveDaiFromMaker(_maxDebt - _currentDebt);\\n            } else if (_collateralRatio < lowWater) {\\n                // Being below low water brings risk of liquidation in Maker.\\n                // Withdraw DAI from Lender and deposit in Maker\\n                _moveDaiToMaker(_currentDebt - _maxDebt);\\n            }\\n        }\\n    }\\n\\n    function _resurface() internal virtual {\\n        require(isUnderwater(), \\\"pool-is-above-water\\\");\\n        uint256 _daiNeeded = cm.getVaultDebt(address(this)) - _getDaiBalance();\\n        (address[] memory _path, uint256 _collateralNeeded, uint256 rIdx) =\\n            swapManager.bestInputFixedOutput(address(collateralToken), DAI, _daiNeeded);\\n        if (_collateralNeeded != 0) {\\n            cm.withdrawCollateral(_collateralNeeded);\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _collateralNeeded,\\n                1,\\n                _path,\\n                address(this),\\n                block.timestamp\\n            );\\n            cm.payback(IERC20(DAI).balanceOf(address(this)));\\n            IPaycerPool(pool).reportLoss(_collateralNeeded);\\n        }\\n    }\\n\\n    function _withdraw(uint256 _amount) internal override {\\n        _withdrawHere(_amount);\\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    // TODO do we need a safe withdraw\\n    function _withdrawHere(uint256 _amount) internal {\\n        (\\n            uint256 collateralLocked,\\n            uint256 debt,\\n            uint256 collateralUsdRate,\\n            uint256 collateralRatio,\\n            uint256 minimumDebt\\n        ) = cm.whatWouldWithdrawDo(address(this), _amount);\\n        if (debt != 0 && collateralRatio < lowWater) {\\n            // If this withdraw results in Low Water scenario.\\n            uint256 maxDebt = (collateralLocked * collateralUsdRate) / highWater;\\n            if (maxDebt < minimumDebt) {\\n                // This is Dusting scenario\\n                _moveDaiToMaker(debt);\\n            } else if (maxDebt < debt) {\\n                _moveDaiToMaker(debt - maxDebt);\\n            }\\n        }\\n        cm.withdrawCollateral(_amount);\\n    }\\n\\n    function _depositDaiToLender(uint256 _amount) internal virtual;\\n\\n    function _rebalanceDaiInLender() internal virtual;\\n\\n    function _withdrawDaiFromLender(uint256 _amount) internal virtual;\\n\\n    function _getDaiBalance() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x62884a48ae986ec8526ca1b3bf3841d6b29153d25b34054b28186a62bd85a94d\",\"license\":\"MIT\"},\"contracts/strategies/maker/PaycerMakerStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./MakerStrategy.sol\\\";\\nimport \\\"../../interfaces/paycer/IPoolRewards.sol\\\";\\n\\n/// @dev This strategy will deposit collateral token in Maker, borrow Dai and\\n/// deposit borrowed DAI in Paycer DAI pool to earn interest.\\n//solhint-disable no-empty-blocks\\nabstract contract PaycerMakerStrategy is MakerStrategy {\\n    using SafeERC20 for IERC20;\\n    address internal constant VSP = 0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421;\\n\\n    constructor(\\n        address _pool,\\n        address _cm,\\n        address _swapManager,\\n        address _vPool,\\n        bytes32 _collateralType\\n    ) MakerStrategy(_pool, _cm, _swapManager, _vPool, _collateralType) {\\n        require(address(IPaycerPool(_vPool).token()) == DAI, \\\"not-a-valid-dai-pool\\\");\\n    }\\n\\n    function _approveToken(uint256 _amount) internal override {\\n        super._approveToken(_amount);\\n        IERC20(DAI).safeApprove(address(receiptToken), _amount);\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            IERC20(VSP).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n        }\\n    }\\n\\n    function _getDaiBalance() internal view override returns (uint256) {\\n        return (IPaycerPool(receiptToken).pricePerShare() * IPaycerPool(receiptToken).balanceOf(address(this))) / 1e18;\\n    }\\n\\n    function _depositDaiToLender(uint256 _amount) internal override {\\n        IPaycerPool(receiptToken).deposit(_amount);\\n    }\\n\\n    function _withdrawDaiFromLender(uint256 _amount) internal override {\\n        uint256 _pricePerShare = IPaycerPool(receiptToken).pricePerShare();\\n        uint256 _share = (_amount * 1e18) / _pricePerShare;\\n        // Should not withdraw less than requested amount\\n        _share = _amount > ((_share * _pricePerShare) / 1e18) ? _share + 1 : _share;\\n        IPaycerPool(receiptToken).whitelistedWithdraw(_share);\\n    }\\n\\n    function _rebalanceDaiInLender() internal virtual override {\\n        uint256 _daiDebt = cm.getVaultDebt(address(this));\\n        uint256 _daiBalance = _getDaiBalance();\\n        if (_daiBalance > _daiDebt) {\\n            _withdrawDaiFromLender(_daiBalance - _daiDebt);\\n        }\\n    }\\n\\n    /// @notice Claim rewardToken from lender and convert it into DAI\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\\n        uint256 _vspAmount = IERC20(VSP).balanceOf(address(this));\\n        if (_vspAmount > 0) {\\n            _safeSwap(VSP, _toToken, _vspAmount, 1);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3c07fd9ddd644c8b08362e197396000e27aaf76766f5ff19eb0f0d8a72b3473\",\"license\":\"MIT\"},\"contracts/strategies/maker/earn/EarnPaycerMakerStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../PaycerMakerStrategy.sol\\\";\\nimport \\\"../../Earn.sol\\\";\\n\\n/// @dev This strategy will deposit collateral token in Maker, borrow Dai and\\n/// deposit borrowed DAI in Paycer pool to earn interest.\\nabstract contract EarnPaycerMakerStrategy is PaycerMakerStrategy, Earn {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        address _pool,\\n        address _cm,\\n        address _swapManager,\\n        address _vPool,\\n        bytes32 _collateralType,\\n        address _dripToken\\n    ) PaycerMakerStrategy(_pool, _cm, _swapManager, _vPool, _collateralType) Earn(_dripToken) {\\n        require(address(IPaycerPool(_vPool).token()) == DAI, \\\"not-a-valid-dai-pool\\\");\\n        address _dripContract = IPaycerPool(_pool).poolRewards();\\n        address _growPool = IEarnDrip(_dripContract).growToken();\\n        // underlying vPool of MakerStrategy must be equal to the growToken\\n        // Otherwise we cannot forward earnings without withdrawing/redepositing first\\n        // Example: Underlying vPool is vDAI v2 and growToken is vDAI v3 won't work\\n        require(receiptToken == _growPool, \\\"not-a-valid-grow-pool\\\");\\n    }\\n\\n    function _claimRewardsAndConvertTo(address _toToken) internal override(Strategy, PaycerMakerStrategy) {\\n        PaycerMakerStrategy._claimRewardsAndConvertTo(_toToken);\\n    }\\n\\n    function _rebalanceDaiInLender() internal override {\\n        uint256 _daiDebt = cm.getVaultDebt(address(this));\\n\\n        // DAI balance collected from _claimRewardsAndConvertTo (VSP rewards)\\n        uint256 _daiFromRewards = IERC20(dripToken).balanceOf(address(this));\\n\\n        address _dripContract = IPaycerPool(pool).poolRewards();\\n        address _growPool = IEarnDrip(_dripContract).growToken();\\n\\n        if (_daiFromRewards != 0) {\\n            // If we have any spare DAI collected from _claimRewardsAndConvertTo\\n            // We want to deposit them in vPool\\n            IPaycerPool(_growPool).deposit(_daiFromRewards);\\n        }\\n\\n        // DAI balance deposited in vPool\\n        uint256 _daiBalance = _getDaiBalance();\\n\\n        if (_daiBalance > _daiDebt) {\\n            // If actual DAI balance in vPool has increased we want to forward this to EarnDrip\\n            uint256 _daiEarned = _daiBalance - _daiDebt;\\n            uint256 _vAmount = (_daiEarned * 1e18) / IPaycerPool(receiptToken).pricePerShare();\\n\\n            if (_vAmount != 0) {\\n                totalEarned += _daiEarned;\\n\\n                (, uint256 _interestFee, , , , , , ) = IPaycerPool(pool).strategy(address(this));\\n                uint256 _growPoolBalance = IERC20(_growPool).balanceOf(address(this));\\n                uint256 _growPoolShares = (_vAmount > _growPoolBalance) ? _growPoolBalance : _vAmount;\\n                uint256 _fee = (_growPoolShares * _interestFee) / 10000;\\n                if (_fee != 0) {\\n                    IERC20(_growPool).safeTransfer(feeCollector, _fee);\\n                    _growPoolShares = _growPoolShares - _fee;\\n                }\\n                IERC20(_growPool).safeTransfer(_dripContract, _growPoolShares);\\n                IEarnDrip(_dripContract).notifyRewardAmount(_growPool, _growPoolShares, dripPeriod);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate earning and convert it to collateral token\\n     * @dev Also claim rewards if available.\\n     *      Withdraw excess DAI from lender.\\n     *      Swap net earned DAI to collateral token\\n     * @return profit in collateral token\\n     */\\n    function _realizeProfit(\\n        uint256 /*_totalDebt*/\\n    ) internal virtual override(Strategy, MakerStrategy) returns (uint256) {\\n        _claimRewardsAndConvertTo(dripToken);\\n        _rebalanceDaiInLender();\\n        return collateralToken.balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xf6a7652318ee5af37828cd0f80f0519da8ad74ea829fd4365910b7628becbb90\",\"license\":\"MIT\"},\"contracts/strategies/maker/earn/EarnPaycerMakerStrategyETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./EarnPaycerMakerStrategy.sol\\\";\\n\\n//solhint-disable no-empty-blocks\\ncontract EarnPaycerMakerStrategyETH is EarnPaycerMakerStrategy {\\n    string public constant NAME = \\\"Earn-Paycer-Maker-Strategy-ETH\\\";\\n    string public constant VERSION = \\\"3.0.16\\\";\\n\\n    constructor(\\n        address _pool,\\n        address _cm,\\n        address _swapManager,\\n        address _vPool\\n    ) EarnPaycerMakerStrategy(_pool, _cm, _swapManager, _vPool, \\\"ETH-C\\\", DAI) {}\\n}\\n\",\"keccak256\":\"0xd477b70fafbad547dac6432a3145d14d54a169f04df27ca984d1c7f7f779a2eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102695760003560e01c80637d7c2a1c11610151578063cd2d7ebe116100c3578063e645c20211610087578063e645c20214610547578063e824600f1461054f578063ec78e83214610576578063fb589de214610589578063fc0c546a1461059a578063ffa1ad74146105ab57610269565b8063cd2d7ebe146104fd578063ce5494bb14610506578063d2c35ce814610519578063d4c3eea01461052c578063e00af4a71461053457610269565b8063a923b2a611610115578063a923b2a61461048c578063aa1018861461049f578063b09e8797146104a7578063b2016bd4146104b0578063b442bb23146104d7578063c415b95c146104ea57610269565b80637d7c2a1c146103f95780639318162014610401578063951dc22c1461042857806399b71d5c1461043b578063a3f4df7e1461044357610269565b80634032b72b116101ea5780635d12928b116101ae5780635d12928b146103b157806367f5e4b8146103b95780636dfa8d99146103cc578063709d039d146103d557806371506414146103e85780637737b672146103f157610269565b80634032b72b14610367578063415eea1b1461037a57806342189c8f14610382578063440d72481461038b5780634c36fad71461039e57610269565b806325afda831161023157806325afda83146103045780632e1a7d4d1461030d5780632ecd89d414610320578063335bbf11146103385780633e9182611461035f57610269565b806314ae9f2e1461026e57806316f0115b146102835780631960d116146102c757806319ab453c146102da5780631aedeabe146102ed575b600080fd5b61028161027c366004614957565b6105d0565b005b6102aa7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6102816102d5366004614b34565b61075f565b6102816102e8366004614957565b6108e4565b6102f660065481565b6040519081526020016102be565b6102f660085481565b61028161031b366004614b34565b610b5e565b610328610bdb565b60405190151581526020016102be565b6102aa7f000000000000000000000000000000000000000000000000000000000000000081565b610281610c82565b610281610375366004614957565b610d31565b6102f6610eb1565b6102f660045481565b610328610399366004614957565b610f50565b6102816103ac366004614957565b610f67565b61028161111a565b6102816103c7366004614b34565b611294565b6102f6600a5481565b6003546102aa906001600160a01b031681565b6102f660095481565b6102816113e0565b6102816116e1565b6102aa7f000000000000000000000000000000000000000000000000000000000000000081565b6001546102aa906001600160a01b031681565b610281611830565b61047f6040518060400160405280601e81526020017f4561726e2d5665737065722d4d616b65722d53747261746567792d455448000081525081565b6040516102be9190614c23565b61028161049a366004614b64565b6118ea565b610281611b1f565b6102f660075481565b6102aa7f000000000000000000000000000000000000000000000000000000000000000081565b6102816104e5366004614b64565b611bc9565b6002546102aa906001600160a01b031681565b6102f660055481565b610281610514366004614957565b611d45565b610281610527366004614957565b612065565b6102f661222e565b610281610542366004614957565b612469565b6102f6612704565b6102f67f000000000000000000000000000000000000000000000000000000000000000081565b6000546102aa906001600160a01b031681565b6102f6610597366004614b34565b90565b6000546001600160a01b03166102aa565b61047f6040518060400160405280600681526020016519971817189b60d11b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561062957600080fd5b505afa15801561063d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106619190614973565b6001600160a01b0316336001600160a01b03161461069a5760405162461bcd60e51b815260040161069190614c86565b60405180910390fd5b600154604051631484968760e11b81526001600160a01b038381166004830152909116906329092d0e90602401602060405180830381600087803b1580156106e157600080fd5b505af11580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107199190614ab5565b61075c5760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610691565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156107b857600080fd5b505afa1580156107cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f09190614973565b6001600160a01b0316336001600160a01b0316146108205760405162461bcd60e51b815260040161069190614c86565b8061085f5760405162461bcd60e51b815260206004820152600f60248201526e64726970506572696f642d7a65726f60881b6044820152606401610691565b6009548114156108a35760405162461bcd60e51b815260206004820152600f60248201526e1cd85b594b591c9a5c14195c9a5bd9608a1b6044820152606401610691565b60095460408051918252602082018390527f6a4a78fe36e2d43bd20405835c6211b888cc77a834e32ddc9ac64ded78f4b328910160405180910390a1600955565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561093d57600080fd5b505afa158015610951573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109759190614973565b6001600160a01b0316336001600160a01b0316146109a55760405162461bcd60e51b815260040161069190614c86565b6001546001600160a01b0316156109fe5760405162461bcd60e51b815260206004820152601b60248201527f6b65657065722d6c6973742d616c72656164792d6372656174656400000000006044820152606401610691565b6000819050806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610a3e57600080fd5b505af1158015610a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a769190614973565b600180546001600160a01b0319166001600160a01b03929092169182179055630a3b0a4f610aa13390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b158015610ae257600080fd5b505af1158015610af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1a9190614ab5565b610b5a5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610691565b5050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610bd25760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b6044820152606401610691565b61075c8161270e565b6000610be5612789565b60405163c0af0d3b60e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c0af0d3b9060240160206040518083038186803b158015610c4457600080fd5b505afa158015610c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7c9190614b4c565b11905090565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610cd357600080fd5b505afa158015610ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0b9190614ab5565b610d275760405162461bcd60e51b815260040161069190614c56565b610d2f6128a5565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8a57600080fd5b505afa158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc29190614973565b6001600160a01b0316336001600160a01b031614610df25760405162461bcd60e51b815260040161069190614c86565b600154604051630a3b0a4f60e01b81526001600160a01b03838116600483015290911690630a3b0a4f90602401602060405180830381600087803b158015610e3957600080fd5b505af1158015610e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e719190614ab5565b61075c5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610691565b60405163cd1adb6160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cd1adb619060240160206040518083038186803b158015610f1357600080fd5b505afa158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190614b4c565b905090565b6000546001600160a01b038281169116145b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc057600080fd5b505afa158015610fd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff89190614973565b6001600160a01b0316336001600160a01b0316146110285760405162461bcd60e51b815260040161069190614c86565b6001600160a01b0381166110735760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401610691565b6003546001600160a01b03828116911614156110be5760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b6044820152606401610691565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561117357600080fd5b505afa158015611187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ab9190614973565b6001600160a01b0316336001600160a01b0316146111db5760405162461bcd60e51b815260040161069190614c86565b604051630bbccf9b60e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906317799f3690602401602060405180830381600087803b15801561125c57600080fd5b505af1158015611270573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075c9190614b4c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156112ed57600080fd5b505afa158015611301573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113259190614973565b6001600160a01b0316336001600160a01b0316146113555760405162461bcd60e51b815260040161069190614c86565b6127108111156113a05760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b6044820152606401610691565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561143157600080fd5b505afa158015611445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114699190614ab5565b6114855760405162461bcd60e51b815260040161069190614c56565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156114e257600080fd5b505af11580156114f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151a9190614973565b90506000816001600160a01b031663e49e463b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561155757600080fd5b505afa15801561156b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158f9190614973565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115f457600080fd5b505afa158015611608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162c9190614973565b6001600160a01b0316146116765760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a590b59dc9bddcb5c1bdbdb607a1b6044820152606401610691565b6116ab6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016826000612d78565b610b5a6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682600019612d78565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561173257600080fd5b505afa158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190614ab5565b6117865760405162461bcd60e51b815260040161069190614c56565b6000806000611793612ecf565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b15801561180b57600080fd5b505af115801561181f573d6000803e3d6000fd5b5050505061182b613036565b505050565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561188157600080fd5b505afa158015611895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b99190614ab5565b6118d55760405162461bcd60e51b815260040161069190614c56565b6118df60006132bd565b610d2f6000196132bd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561194357600080fd5b505afa158015611957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197b9190614973565b6001600160a01b0316336001600160a01b0316146119ab5760405162461bcd60e51b815260040161069190614c86565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156119f957600080fd5b505afa158015611a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a319190614b4c565b8110611a765760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b6044820152606401610691565b81611a815760045491505b603b8211611ac95760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b6044820152606401610691565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611b7057600080fd5b505afa158015611b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba89190614ab5565b611bc45760405162461bcd60e51b815260040161069190614c56565b610d2f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611c2257600080fd5b505afa158015611c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5a9190614973565b6001600160a01b0316336001600160a01b031614611c8a5760405162461bcd60e51b815260040161069190614c86565b80611cca5760405162461bcd60e51b815260206004820152601060248201526f6c6f7757617465722d69732d7a65726f60801b6044820152606401610691565b808211611d195760405162461bcd60e51b815260206004820152601c60248201527f6869676857617465722d6c6573732d7468616e2d6c6f775761746572000000006044820152606401610691565b611d2a662386f26fc1000083614d86565b600755611d3e662386f26fc1000082614d86565b6008555050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611db95760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b6044820152606401610691565b6001600160a01b038116611e0f5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610691565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e7257600080fd5b505afa158015611e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eaa9190614973565b6001600160a01b031614611ef95760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610691565b611f028161342e565b6000546040516370a0823160e01b8152306004820152611f969183916001600160a01b03909116906370a082319060240160206040518083038186803b158015611f4b57600080fd5b505afa158015611f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f839190614b4c565b6000546001600160a01b031691906134ad565b6040516370a0823160e01b815230600482015261075c9082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906024015b60206040518083038186803b158015611ffc57600080fd5b505afa158015612010573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120349190614b4c565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906134ad565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156120be57600080fd5b505afa1580156120d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f69190614973565b6001600160a01b0316336001600160a01b0316146121265760405162461bcd60e51b815260040161069190614c86565b6001600160a01b03811661217c5760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610691565b6002546001600160a01b03828116911614156121d25760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610691565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b600080612239612789565b60405163c0af0d3b60e01b81523060048201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c0af0d3b9060240160206040518083038186803b15801561229e57600080fd5b505afa1580156122b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d69190614b4c565b9050808211156123bc5760006122ec8284614da5565b6003546040516340b4c54560e11b8152736b175474e89094c44da98b954eedeac495271d0f60048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116602483015260448201849052600060648301529293509116906381698a8a9060840160006040518083038186803b15801561237b57600080fd5b505afa15801561238f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123b7919081019061498f565b945050505b6040516369ebe00160e11b8152306004820152612458907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d3d7c002906024015b60206040518083038186803b15801561242057600080fd5b505afa158015612434573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105979190614b4c565b6124629084614d4e565b9250505090565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156124ba57600080fd5b505afa1580156124ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f29190614ab5565b61250e5760405162461bcd60e51b815260040161069190614c56565b6002546001600160a01b031661255e5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610691565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156125e05760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610691565b6125e981610f50565b1561262d5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610691565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561266d57600254612668906001600160a01b0316476134dd565b61075c565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b1580156126af57600080fd5b505afa1580156126c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e79190614b4c565b600254909150610b5a906001600160a01b038481169116836134ad565b6000610f4b61222e565b612717816135f6565b6040516370a0823160e01b815230600482015261075c907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401611fe4565b600080546040516370a0823160e01b8152306004820152670de0b6b3a7640000916001600160a01b0316906370a082319060240160206040518083038186803b1580156127d557600080fd5b505afa1580156127e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280d9190614b4c565b60008054906101000a90046001600160a01b03166001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561285957600080fd5b505afa15801561286d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128919190614b4c565b61289b9190614d86565b610f4b9190614d66565b6128ad610bdb565b6128ef5760405162461bcd60e51b81526020600482015260136024820152723837b7b616b4b996b0b137bb3296bbb0ba32b960691b6044820152606401610691565b60006128f9612789565b60405163c0af0d3b60e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c0af0d3b9060240160206040518083038186803b15801561295857600080fd5b505afa15801561296c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129909190614b4c565b61299a9190614da5565b600354604051637a6f237b60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152736b175474e89094c44da98b954eedeac495271d0f6024830152604482018490529293506000928392839291169063f4de46f69060640160006040518083038186803b158015612a2957600080fd5b505afa158015612a3d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a6591908101906149d4565b92509250925081600014612d72576040516330897f1760e11b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636112fe2e90602401600060405180830381600087803b158015612ad557600080fd5b505af1158015612ae9573d6000803e3d6000fd5b5050600354604051636e74a6f760e01b8152600481018590526001600160a01b039091169250636e74a6f7915060240160206040518083038186803b158015612b3157600080fd5b505afa158015612b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b699190614973565b6001600160a01b03166338ed17398360018630426040518663ffffffff1660e01b8152600401612b9d959493929190614cbd565b600060405180830381600087803b158015612bb757600080fd5b505af1158015612bcb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612bf39190810190614a22565b506040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a846c2fd90736b175474e89094c44da98b954eedeac495271d0f906370a082319060240160206040518083038186803b158015612c6f57600080fd5b505afa158015612c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca79190614b4c565b6040518263ffffffff1660e01b8152600401612cc591815260200190565b600060405180830381600087803b158015612cdf57600080fd5b505af1158015612cf3573d6000803e3d6000fd5b50506040516306eeb69360e51b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063ddd6d2609150602401600060405180830381600087803b158015612d5957600080fd5b505af1158015612d6d573d6000803e3d6000fd5b505050505b50505050565b801580612e015750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612dc757600080fd5b505afa158015612ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dff9190614b4c565b155b612e6c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610691565b6040516001600160a01b03831660248201526044810182905261182b90849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261378b565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b158015612f3757600080fd5b505afa158015612f4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6f9190614b4c565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b158015612fd457600080fd5b505afa158015612fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300c9190614b4c565b90506130178161385d565b94506130228161392d565b935061302d826139a3565b92505050909192565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561309857600080fd5b505afa1580156130ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d09190614b4c565b905080156131535760405163bad4a01f60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bad4a01f90602401600060405180830381600087803b15801561313a57600080fd5b505af115801561314e573d6000803e3d6000fd5b505050505b6040516390229af760e01b815230600482015260009081908190819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906390229af79060240160a06040518083038186803b1580156131bd57600080fd5b505afa1580156131d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f59190614b85565b94509450945094509450600060075484876132109190614d86565b61321a9190614d66565b9050818110156132325761322d856139b2565b6132b4565b60075483111561329857613244610bdb565b156132865760405162461bcd60e51b81526020600482015260126024820152713837b7b616b4b996bab73232b93bb0ba32b960711b6044820152606401610691565b61322d6132938683614da5565b613a0e565b6008548310156132b4576132b46132af8287614da5565b6139b2565b50505050505050565b6132c681613b15565b6000546132f290736b175474e89094c44da98b954eedeac495271d0f906001600160a01b031683612d78565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561334357600080fd5b505afa158015613357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061337b9190614b4c565b811015610b5a57600354604051636e74a6f760e01b81526004810183905261341c916001600160a01b031690636e74a6f79060240160206040518083038186803b1580156133c857600080fd5b505afa1580156133dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134009190614973565b731b40183efb4dd766f11bda7a7c3ad8982e9984219084612d78565b8061342681614de8565b9150506132f5565b604051637038e06560e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063e071c0ca906024015b600060405180830381600087803b15801561349257600080fd5b505af11580156134a6573d6000803e3d6000fd5b5050505050565b6040516001600160a01b03831660248201526044810182905261182b90849063a9059cbb60e01b90606401612e98565b8047101561352d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610691565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461357a576040519150601f19603f3d011682016040523d82523d6000602084013e61357f565b606091505b505090508061182b5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610691565b604051630a5ab5dd60e31b81523060048201526024810182905260009081908190819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352d5aee89060440160a06040518083038186803b15801561366757600080fd5b505afa15801561367b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061369f9190614b85565b94509450945094509450836000141580156136bb575060085482105b15613709576007546000906136d08588614d86565b6136da9190614d66565b9050818110156136f2576136ed856139b2565b613707565b84811015613707576137076132af8287614da5565b505b6040516330897f1760e11b8152600481018790527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636112fe2e90602401600060405180830381600087803b15801561376b57600080fd5b505af115801561377f573d6000803e3d6000fd5b50505050505050505050565b60006137e0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613de79092919063ffffffff16565b80519091501561182b57808060200190518101906137fe9190614ab5565b61182b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610691565b60006138887f0000000000000000000000000000000000000000000000000000000000000000613dfe565b613890613e07565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156138ef57600080fd5b505afa158015613903573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139279190614b4c565b92915050565b6040516369ebe00160e11b81523060048201526000908190613982906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d3d7c00290602401612408565b905080831161399257600061399c565b61399c8184614da5565b9392505050565b60006139ae826135f6565b5090565b801561075c576139c18161439d565b60405163a846c2fd60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a846c2fd90602401613478565b60405163317afabb60e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c5ebeaec90602401600060405180830381600087803b158015613a7057600080fd5b505af1158015613a84573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152736b175474e89094c44da98b954eedeac495271d0f92506370a08231915060240160206040518083038186803b158015613ad257600080fd5b505afa158015613ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b0a9190614b4c565b905061075c816144d9565b613b54736b175474e89094c44da98b954eedeac495271d0f7f000000000000000000000000000000000000000000000000000000000000000083612d78565b613ba86001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612d78565b613bfc6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612d78565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b158015613c4d57600080fd5b505afa158015613c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c859190614b4c565b811015610b5a57600354604051636e74a6f760e01b815260048101839052613d3b916001600160a01b031690636e74a6f79060240160206040518083038186803b158015613cd257600080fd5b505afa158015613ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d0a9190614973565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084612d78565b600354604051636e74a6f760e01b815260048101839052613dd5916001600160a01b031690636e74a6f79060240160206040518083038186803b158015613d8157600080fd5b505afa158015613d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613db99190614973565b736b175474e89094c44da98b954eedeac495271d0f9084612d78565b80613ddf81614de8565b915050613bff565b6060613df6848460008561450a565b949350505050565b61075c81614632565b60405163c0af0d3b60e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c0af0d3b9060240160206040518083038186803b158015613e6957600080fd5b505afa158015613e7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea19190614b4c565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015613f0657600080fd5b505afa158015613f1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f3e9190614b4c565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613f9d57600080fd5b505af1158015613fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fd59190614973565b90506000816001600160a01b031663e49e463b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561401257600080fd5b505afa158015614026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061404a9190614973565b905082156140ad5760405163b6b55f2560e01b8152600481018490526001600160a01b0382169063b6b55f2590602401600060405180830381600087803b15801561409457600080fd5b505af11580156140a8573d6000803e3d6000fd5b505050505b60006140b7612789565b9050848111156134a65760006140cd8683614da5565b905060008060009054906101000a90046001600160a01b03166001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561411e57600080fd5b505afa158015614132573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141569190614b4c565b61416883670de0b6b3a7640000614d86565b6141729190614d66565b905080156132b45781600a600082825461418c9190614d4e565b909155505060405163228bfd9f60e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063228bfd9f906024016101006040518083038186803b1580156141f457600080fd5b505afa158015614208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061422c9190614acf565b50506040516370a0823160e01b81523060048201529496506000955050506001600160a01b038916926370a082319250602401905060206040518083038186803b15801561427957600080fd5b505afa15801561428d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142b19190614b4c565b905060008184116142c257836142c4565b815b905060006127106142d58584614d86565b6142df9190614d66565b9050801561430e57600254614301906001600160a01b038a81169116836134ad565b61430b8183614da5565b91505b6143226001600160a01b0389168a846134ad565b6009546040516328f362b160e21b81526001600160a01b038a81166004830152602482018590526044820192909252908a169063a3cd8ac490606401600060405180830381600087803b15801561437857600080fd5b505af115801561438c573d6000803e3d6000fd5b505050505050505050505050505050565b60008060009054906101000a90046001600160a01b03166001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156143ec57600080fd5b505afa158015614400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144249190614b4c565b905060008161443b84670de0b6b3a7640000614d86565b6144459190614d66565b9050670de0b6b3a764000061445a8383614d86565b6144649190614d66565b8311614470578061447b565b61447b816001614d4e565b60005460405160016226f16160e21b03198152600481018390529192506001600160a01b03169063ff643a7c90602401600060405180830381600087803b1580156144c557600080fd5b505af11580156132b4573d6000803e3d6000fd5b60005460405163b6b55f2560e01b8152600481018390526001600160a01b039091169063b6b55f2590602401613478565b60608247101561456b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610691565b843b6145b95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610691565b600080866001600160a01b031685876040516145d59190614c07565b60006040518083038185875af1925050503d8060008114614612576040519150601f19603f3d011682016040523d82523d6000602084013e614617565b606091505b50915091506146278282866146e0565b979650505050505050565b6040516370a0823160e01b8152306004820152600090731b40183efb4dd766f11bda7a7c3ad8982e998421906370a082319060240160206040518083038186803b15801561467f57600080fd5b505afa158015614693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146b79190614b4c565b90508015610b5a57610b5a731b40183efb4dd766f11bda7a7c3ad8982e99842183836001614719565b606083156146ef57508161399c565b8251156146ff5782518084602001fd5b8160405162461bcd60e51b81526004016106919190614c23565b600354604051631d1f307960e31b81526001600160a01b038681166004830152858116602483015260448201859052600092839283929091169063e8f983c89060640160006040518083038186803b15801561477457600080fd5b505afa158015614788573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526147b091908101906149d4565b92509250925083600014156147c457600193505b81156132b457600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b15801561480e57600080fd5b505afa158015614822573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148469190614973565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b8152600401614879959493929190614cbd565b600060405180830381600087803b15801561489357600080fd5b505af11580156148a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612d6d9190810190614a22565b600082601f8301126148df578081fd5b815160206148f46148ef83614d2a565b614cf9565b80838252828201915082860187848660051b8901011115614913578586fd5b855b8581101561493a57815161492881614e2f565b84529284019290840190600101614915565b5090979650505050505050565b80518015158114610f6257600080fd5b600060208284031215614968578081fd5b813561399c81614e2f565b600060208284031215614984578081fd5b815161399c81614e2f565b600080604083850312156149a1578081fd5b825167ffffffffffffffff8111156149b7578182fd5b6149c3858286016148cf565b925050602083015190509250929050565b6000806000606084860312156149e8578081fd5b835167ffffffffffffffff8111156149fe578182fd5b614a0a868287016148cf565b93505060208401519150604084015190509250925092565b60006020808385031215614a34578182fd5b825167ffffffffffffffff811115614a4a578283fd5b8301601f81018513614a5a578283fd5b8051614a686148ef82614d2a565b80828252848201915084840188868560051b8701011115614a87578687fd5b8694505b83851015614aa9578051835260019490940193918501918501614a8b565b50979650505050505050565b600060208284031215614ac6578081fd5b61399c82614947565b600080600080600080600080610100898b031215614aeb578384fd5b614af489614947565b97506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915060e089015190509295985092959890939650565b600060208284031215614b45578081fd5b5035919050565b600060208284031215614b5d578081fd5b5051919050565b60008060408385031215614b76578182fd5b50508035926020909101359150565b600080600080600060a08688031215614b9c578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6000815180845260208085019450808401835b83811015614bfc5781516001600160a01b031687529582019590820190600101614bd7565b509495945050505050565b60008251614c19818460208701614dbc565b9190910192915050565b6000602082528251806020840152614c42816040850160208701614dbc565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b600086825285602083015260a06040830152614cdc60a0830186614bc4565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715614d2257614d22614e19565b604052919050565b600067ffffffffffffffff821115614d4457614d44614e19565b5060051b60200190565b60008219821115614d6157614d61614e03565b500190565b600082614d8157634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615614da057614da0614e03565b500290565b600082821015614db757614db7614e03565b500390565b60005b83811015614dd7578181015183820152602001614dbf565b83811115612d725750506000910152565b6000600019821415614dfc57614dfc614e03565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461075c57600080fdfea264697066735822122076975642228227e58371ecc9e6fa28efc4d89cf209120ca2e1e3e9835b31824764736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveGrowToken()": {
        "details": "Approves EarnDrip' Grow token to spend dripToken"
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "convertFrom18(uint256)": {
        "details": "Convert from 18 decimals to token defined decimals. Default no conversion."
      },
      "init(address)": {
        "params": {
          "_addressListFactory": "To support same code in eth side chain, user _addressListFactory as param ethereum- 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3 polygon-0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291"
        }
      },
      "isReservedToken(address)": {
        "details": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "details": "Rebalance profit, loss and investment of this strategy"
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "resurface()": {
        "details": "If pool is underwater this function will resolve underwater condition. If Debt in Maker is greater than Dai balance in lender then pool is underwater. Lowering DAI debt in Maker will resolve underwater condition. Resolve: Calculate required collateral token to lower DAI debt. Withdraw required collateral token from Maker and convert those to DAI via Uniswap. Finally payback debt in Maker using DAI.Also report loss in pool."
      },
      "sweepERC20(address)": {
        "details": "sweep given token to feeCollector of strategy",
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "totalValue()": {
        "details": "Make sure to return value in collateral token and in order to do that we are using Uniswap to get collateral amount for earned DAI."
      },
      "totalValueCurrent()": {
        "details": "Report total value in collateral token"
      },
      "updateBalancingFactor(uint256,uint256)": {
        "params": {
          "_highWater": "Value for high water mark.",
          "_lowWater": "Value for low water mark."
        }
      },
      "updateDripPeriod(uint256)": {
        "details": "_dripPeriod in seconds"
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_swapManager": "swap manager address"
        }
      },
      "withdraw(uint256)": {
        "details": "Withdraw collateral token from lending pool.",
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "createVault()": {
        "notice": "Create new Maker vault"
      },
      "init(address)": {
        "notice": "Create keeper list NOTE: Any function with onlyKeeper modifier will not work until this function is called. NOTE: Due to gas constraint this function cannot be called in constructor."
      },
      "isUnderwater()": {
        "notice": "Returns true if pool is underwater.Underwater - If debt is greater than earning of pool.Earning - Sum of DAI balance and DAI from accrued reward, if any, in lending pool."
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "token()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "totalValue()": {
        "notice": "Report total value of this strategy"
      },
      "totalValueCurrent()": {
        "notice": "Calculate total value of asset under management (in real-time)"
      },
      "updateBalancingFactor(uint256,uint256)": {
        "notice": "Update balancing factors aka high water and low water values. Water mark values represent Collateral Ratio in Maker. For example 300 as high water means 300% collateral ratio."
      },
      "updateDripPeriod(uint256)": {
        "notice": "Update update period of distribution of earning done in one rebalance"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13457,
        "contract": "contracts/strategies/maker/earn/EarnPaycerMakerStrategyETH.sol:EarnPaycerMakerStrategyETH",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13463,
        "contract": "contracts/strategies/maker/earn/EarnPaycerMakerStrategyETH.sol:EarnPaycerMakerStrategyETH",
        "label": "keepers",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAddressList)4320"
      },
      {
        "astId": 13466,
        "contract": "contracts/strategies/maker/earn/EarnPaycerMakerStrategyETH.sol:EarnPaycerMakerStrategyETH",
        "label": "feeCollector",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13469,
        "contract": "contracts/strategies/maker/earn/EarnPaycerMakerStrategyETH.sol:EarnPaycerMakerStrategyETH",
        "label": "swapManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISwapManager)4623"
      },
      {
        "astId": 13472,
        "contract": "contracts/strategies/maker/earn/EarnPaycerMakerStrategyETH.sol:EarnPaycerMakerStrategyETH",
        "label": "oraclePeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 13475,
        "contract": "contracts/strategies/maker/earn/EarnPaycerMakerStrategyETH.sol:EarnPaycerMakerStrategyETH",
        "label": "oracleRouterIdx",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 13478,
        "contract": "contracts/strategies/maker/earn/EarnPaycerMakerStrategyETH.sol:EarnPaycerMakerStrategyETH",
        "label": "swapSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 30891,
        "contract": "contracts/strategies/maker/earn/EarnPaycerMakerStrategyETH.sol:EarnPaycerMakerStrategyETH",
        "label": "highWater",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 30893,
        "contract": "contracts/strategies/maker/earn/EarnPaycerMakerStrategyETH.sol:EarnPaycerMakerStrategyETH",
        "label": "lowWater",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 13115,
        "contract": "contracts/strategies/maker/earn/EarnPaycerMakerStrategyETH.sol:EarnPaycerMakerStrategyETH",
        "label": "dripPeriod",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 13117,
        "contract": "contracts/strategies/maker/earn/EarnPaycerMakerStrategyETH.sol:EarnPaycerMakerStrategyETH",
        "label": "totalEarned",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAddressList)4320": {
        "encoding": "inplace",
        "label": "contract IAddressList",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)4623": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}