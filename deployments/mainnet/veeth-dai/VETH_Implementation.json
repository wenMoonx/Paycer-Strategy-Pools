{
  "address": "0x804F330F9f55623A50BEFdf4a18812a532c82EA3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Open",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Shutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousPoolRewards",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPoolRewards",
          "type": "address"
        }
      ],
      "name": "UpdatedPoolRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousWithdrawFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedWithdrawFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract TokenLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_listToUpdate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_addressToAdd",
          "type": "address"
        }
      ],
      "name": "addInList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "availableCreditLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "convertFrom18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimalConversionFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "excessDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeWhitelist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawQueue",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_poolAccountant",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_addressListFactory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maintainers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_old",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_new",
          "type": "address"
        }
      ],
      "name": "migrateStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "multiTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolAccountant",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_listToUpdate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_addressToRemove",
          "type": "address"
        }
      ],
      "name": "removeFromList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "name": "reportEarning",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        }
      ],
      "name": "reportLoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopEverything",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_interestFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debtRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastRebalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalLoss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalProfit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debtRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensHere",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "totalDebtOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposedGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newFeeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newPoolRewards",
          "type": "address"
        }
      ],
      "name": "updatePoolRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "updateWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "whitelistedWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9f8e0dfbe24b829be78768f59d2fb91db36a5029a4f562958f8639886c37c1e2",
  "receipt": {
    "to": null,
    "from": "0xB5AbDABE50b5193d4dB92a16011792B22bA3Ef51",
    "contractAddress": "0x804F330F9f55623A50BEFdf4a18812a532c82EA3",
    "transactionIndex": 56,
    "gasUsed": "4564065",
    "logsBloom": "0x
    "blockHash": "0xec12133a0ce423508fdf33f2b68716ded164f445783b4913ddbc5b3d7e86891f",
    "transactionHash": "0x9f8e0dfbe24b829be78768f59d2fb91db36a5029a4f562958f8639886c37c1e2",
    "logs": [
      {
        "transactionIndex": 56,
        "blockNumber": 12794915,
        "transactionHash": "0x9f8e0dfbe24b829be78768f59d2fb91db36a5029a4f562958f8639886c37c1e2",
        "address": "0x804F330F9f55623A50BEFdf4a18812a532c82EA3",
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b5abdabe50b5193d4db92a16011792b22ba3ef51"
        ],
        "data": "0x",
        "logIndex": 145,
        "blockHash": "0xec12133a0ce423508fdf33f2b68716ded164f445783b4913ddbc5b3d7e86891f"
      }
    ],
    "blockNumber": 12794915,
    "cumulativeGasUsed": "10307543",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "veETH-DAI Earn Pool",
    "veETH-DAI"
  ],
  "solcInputHash": "b5c6c850b992d152a2a2193209b3651e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPoolRewards\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPoolRewards\",\"type\":\"address\"}],\"name\":\"UpdatedPoolRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousWithdrawFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract TokenLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_listToUpdate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressToAdd\",\"type\":\"address\"}],\"name\":\"addInList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"availableCreditLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertFrom18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalConversionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"excessDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWhitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawQueue\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_poolAccountant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressListFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintainers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"migrateStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAccountant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_listToUpdate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressToRemove\",\"type\":\"address\"}],\"name\":\"removeFromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"name\":\"reportEarning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"}],\"name\":\"reportLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopEverything\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_interestFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastRebalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLoss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensHere\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"totalDebtOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPoolRewards\",\"type\":\"address\"}],\"name\":\"updatePoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"whitelistedWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"acceptGovernorship()\":{\"details\":\"Allows new governor to accept governorship of the contract.\"},\"addInList(address,address)\":{\"details\":\"Use it to add keeper in keepers list and to add address in feeWhitelist\",\"params\":{\"_addressToAdd\":\"address which we want to add in AddressList.\",\"_listToUpdate\":\"address of AddressList contract.\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"availableCreditLimit(address)\":{\"details\":\"Available credit limit is calculated based on current debt of pool and strategy, current debt limit of pool and strategy. credit available = min(pool's debt limit, strategy's debt limit, max debt per rebalance) when some strategy do not pay back outstanding debt, this impact credit line of other strategy if totalDebt of pool >= debtLimit of pool\",\"params\":{\"_strategy\":\"Strategy address\"}},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"convertFrom18(uint256)\":{\"details\":\"Convert from 18 decimals to token defined decimals.\"},\"decimals()\":{\"details\":\"Returns the decimals of the token. default to 18\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit()\":{\"details\":\"Receives ETH and grants new tokens/shares to the sender depending on the value of pool's share.\"},\"deposit(uint256)\":{\"params\":{\"_amount\":\"ERC20 token amount.\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"_amount\":\"ERC20 token amount.\",\"_deadline\":\"The time at which signature will expire\",\"_r\":\"Half of the ECDSA signature pair\",\"_s\":\"Half of the ECDSA signature pair\",\"_v\":\"The recovery byte of the signature\"}},\"excessDebt(address)\":{\"params\":{\"_strategy\":\"Address of strategy\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"migrateStrategy(address,address)\":{\"details\":\"Migrating strategy aka old and new strategy should be of same type.\",\"params\":{\"_new\":\"Address of new strategy\",\"_old\":\"Address of strategy being migrated\"}},\"multiTransfer(address[],uint256[])\":{\"details\":\"Address array and amount array are 1:1 and are in order.\",\"params\":{\"_amounts\":\"array of token amounts\",\"_recipients\":\"array of recipient addresses\"},\"returns\":{\"_0\":\"true/false\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"pricePerShare()\":{\"details\":\"Return value will be in token defined decimals.\"},\"removeFromList(address,address)\":{\"details\":\"Use it to remove keeper from keepers list and to remove address from feeWhitelist\",\"params\":{\"_addressToRemove\":\"address which we want to remove from AddressList.\",\"_listToUpdate\":\"address of AddressList contract.\"}},\"reportEarning(uint256,uint256,uint256)\":{\"details\":\"Strategy call this in regular interval.\",\"params\":{\"_loss\":\"Reduce debt ,also reduce debtRatio, increase loss in record.\",\"_payback\":\"strategy willing to payback outstanding above debtLimit. no performance fee on this amount.  when governance has reduced debtRatio of strategy, strategy will report profit and payback amount separately.\",\"_profit\":\"yield generated by strategy. Strategy get performance fee on this amount\"}},\"reportLoss(uint256)\":{\"details\":\"Some strategies pay deposit fee thus realizing loss at deposit. For example: Curve's 3pool has some slippage due to deposit of one asset in 3pool. Strategy may want report this loss instead of waiting for next rebalance.\",\"params\":{\"_loss\":\"Loss that strategy want to report\"}},\"sweepERC20(address)\":{\"details\":\"Transfer given ERC20 token to feeCollector\",\"params\":{\"_fromToken\":\"Token address to sweep\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"tokensHere()\":{\"details\":\"Returns the token stored in the pool. It will be in token defined decimals.\"},\"totalDebtOf(address)\":{\"params\":{\"_strategy\":\"Strategy address\"}},\"totalSupply()\":{\"details\":\"Returns total supply of the token.\"},\"totalValue()\":{\"details\":\"Returns total value of paycer pool, in terms of collateral token\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferGovernorship(address)\":{\"details\":\"Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner.\"},\"updateFeeCollector(address)\":{\"params\":{\"_newFeeCollector\":\"new fee collector address\"}},\"updatePoolRewards(address)\":{\"params\":{\"_newPoolRewards\":\"new pool rewards address\"}},\"updateWithdrawFee(uint256)\":{\"details\":\"Format: 1500 = 15% fee, 100 = 1%\",\"params\":{\"_newWithdrawFee\":\"new withdraw fee\"}},\"whitelistedWithdraw(uint256)\":{\"details\":\"Burn shares and return collateral. No withdraw fee will be assessed when this function is called. Only some white listed address can call this function.\",\"params\":{\"_shares\":\"Pool shares. It will be in 18 decimals.\"}},\"withdraw(uint256)\":{\"params\":{\"_shares\":\"Pool shares. It will be in 18 decimals.\"}},\"withdrawETH(uint256)\":{\"details\":\"Burns tokens/shares and returns the ETH value, after fee, of those.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addInList(address,address)\":{\"notice\":\"Add given address in provided address list.\"},\"availableCreditLimit(address)\":{\"notice\":\"Get available credit limit of strategy. This is the amount strategy can borrow from pool\"},\"deposit(uint256)\":{\"notice\":\"Deposit ERC20 tokens and receive pool shares depending on the current share price.\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit ERC20 tokens with permit aka gasless approval.\"},\"excessDebt(address)\":{\"notice\":\"Debt above current debt limit\"},\"migrateStrategy(address,address)\":{\"notice\":\"Migrate existing strategy to new strategy.\"},\"multiTransfer(address[],uint256[])\":{\"notice\":\"Transfer tokens to multiple recipient\"},\"pricePerShare()\":{\"notice\":\"Get price per share\"},\"removeFromList(address,address)\":{\"notice\":\"Remove given address from provided address list.\"},\"reportLoss(uint256)\":{\"notice\":\"Report loss outside of rebalance activity.\"},\"totalDebt()\":{\"notice\":\"Get total debt of pool\"},\"totalDebtOf(address)\":{\"notice\":\"Get total debt of given strategy\"},\"totalDebtRatio()\":{\"notice\":\"Get total debt ratio. Total debt ratio helps us keep buffer in pool\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector address for this pool\"},\"updatePoolRewards(address)\":{\"notice\":\"Update pool rewards address for this pool\"},\"updateWithdrawFee(uint256)\":{\"notice\":\"Update withdraw fee for this pool\"},\"whitelistedWithdraw(uint256)\":{\"notice\":\"Withdraw collateral based on given shares and the current share price.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral based on given shares and the current share price. Withdraw fee, if any, will be deduced from given shares and transferred to feeCollector. Burn remaining shares and return collateral.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/VETH.sol\":\"VETH\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd9ed084a02c5daa5bef324379ef57ebb3c930acec091a521083152e8291c95ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x2b7a01bbc90040fd4a48bc143ac5a192da3b9bfc559ac08a78eaca40bf49e436\",\"license\":\"MIT\"},\"contracts/Governed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\ncontract Governed is Context, Initializable {\\n    address public governor;\\n    address private proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * _initializeGoverned() function to initialization this contract\\n     */\\n    function _initializeGoverned() internal initializer {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor {\\n        require(governor == _msgSender(), \\\"not-the-governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(proposedGovernor == _msgSender(), \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x84da13fab3e3864d38d587d860a14f37693a14f0c585e7db9fb4d2d305d0bc0b\",\"license\":\"MIT\"},\"contracts/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n */\\ncontract Pausable is Context {\\n    event Paused(address account);\\n    event Shutdown(address account);\\n    event Unpaused(address account);\\n    event Open(address account);\\n\\n    bool public paused;\\n    bool public stopEverything;\\n\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"paused\\\");\\n        _;\\n    }\\n    modifier whenPaused() {\\n        require(paused, \\\"not-paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotShutdown() {\\n        require(!stopEverything, \\\"shutdown\\\");\\n        _;\\n    }\\n\\n    modifier whenShutdown() {\\n        require(stopEverything, \\\"not-shutdown\\\");\\n        _;\\n    }\\n\\n    /// @dev Pause contract operations, if contract is not paused.\\n    function _pause() internal virtual whenNotPaused {\\n        paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /// @dev Unpause contract operations, allow only if contract is paused and not shutdown.\\n    function _unpause() internal virtual whenPaused whenNotShutdown {\\n        paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /// @dev Shutdown contract operations, if not already shutdown.\\n    function _shutdown() internal virtual whenNotShutdown {\\n        stopEverything = true;\\n        paused = true;\\n        emit Shutdown(_msgSender());\\n    }\\n\\n    /// @dev Open contract operations, if contract is in shutdown state\\n    function _open() internal virtual whenShutdown {\\n        stopEverything = false;\\n        emit Open(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x1d36cba34900848ede921d57bbd1386bcebbf9afd5fbcdcd184d59ae2a8906db\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    function add(address a) external returns (bool);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function length() external view returns (uint256);\\n\\n    function grantRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x573e4beae1fcf79639afaf2ab3eb606b599fb71d678ca64e69f07620a3091af3\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressListFactory {\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0x150ffedb5ad13b6f3ed4802b9eb4400567aecbac4faf9615be0f46d27ac40087\",\"license\":\"MIT\"},\"contracts/interfaces/token/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface TokenLike is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x0ca44fa24917d55f54cb00a484d7826bae677747a2110203e2cfe642ba1eec5e\",\"license\":\"MIT\"},\"contracts/interfaces/paycer/IPoolAccountant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IPoolAccountant {\\n    function decreaseDebt(address _strategy, uint256 _decreaseBy) external;\\n\\n    function migrateStrategy(address _old, address _new) external;\\n\\n    function reportEarning(\\n        address _strategy,\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    )\\n        external\\n        returns (\\n            uint256 _actualPayback,\\n            uint256 _creditLine,\\n            uint256 _interestFee\\n        );\\n\\n    function reportLoss(address _strategy, uint256 _loss) external;\\n\\n    function availableCreditLimit(address _strategy) external view returns (uint256);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function getStrategies() external view returns (address[] memory);\\n\\n    function getWithdrawQueue() external view returns (address[] memory);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee,\\n            uint256 _debtRate,\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio\\n        );\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalDebtRatio() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf6767d090482408ad9cb5a382b1d55575fc7c646822ccef647b68e92e8383d73\",\"license\":\"MIT\"},\"contracts/interfaces/paycer/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IPoolRewards {\\n    /// Emitted after reward added\\n    event RewardAdded(uint256 reward);\\n    /// Emitted whenever any user claim rewards\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    function claimReward(address) external;\\n\\n    function notifyRewardAmount(uint256 rewardAmount, uint256 endTime) external;\\n\\n    function updateReward(address) external;\\n\\n    function claimable(address) external view returns (uint256);\\n\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardForDuration() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa57764e247ef990253e4cf0862715a72b2f69b3dfaa7c30590afea3c8d0bd061\",\"license\":\"MIT\"},\"contracts/interfaces/paycer/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9f1fda68c25b5ce7876b925f92600114f41dbdec3f8c38c5bfe4bbf286b17437\",\"license\":\"MIT\"},\"contracts/pool/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/// @title Errors library\\nlibrary Errors {\\n    string public constant INVALID_COLLATERAL_AMOUNT = \\\"1\\\"; // Collateral must be greater than 0\\n    string public constant INVALID_SHARE_AMOUNT = \\\"2\\\"; // Share must be greater than 0\\n    string public constant INVALID_INPUT_LENGTH = \\\"3\\\"; // Input array length must be greater than 0\\n    string public constant INPUT_LENGTH_MISMATCH = \\\"4\\\"; // Input array length mismatch with another array length\\n    string public constant NOT_WHITELISTED_ADDRESS = \\\"5\\\"; // Caller is not whitelisted to withdraw without fee\\n    string public constant MULTI_TRANSFER_FAILED = \\\"6\\\"; // Multi transfer of tokens has failed\\n    string public constant FEE_COLLECTOR_NOT_SET = \\\"7\\\"; // Fee Collector is not set\\n    string public constant NOT_ALLOWED_TO_SWEEP = \\\"8\\\"; // Token is not allowed to sweep\\n    string public constant INSUFFICIENT_BALANCE = \\\"9\\\"; // Insufficient balance to performs operations to follow\\n    string public constant INPUT_ADDRESS_IS_ZERO = \\\"10\\\"; // Input address is zero\\n    string public constant FEE_LIMIT_REACHED = \\\"11\\\"; // Fee must be less than MAX_BPS\\n    string public constant ALREADY_INITIALIZED = \\\"12\\\"; // Data structure, contract, or logic already initialized and can not be called again\\n    string public constant ADD_IN_LIST_FAILED = \\\"13\\\"; // Cannot add address in address list\\n    string public constant REMOVE_FROM_LIST_FAILED = \\\"14\\\"; // Cannot remove address from address list\\n    string public constant STRATEGY_IS_ACTIVE = \\\"15\\\"; // Strategy is already active, an inactive strategy is required\\n    string public constant STRATEGY_IS_NOT_ACTIVE = \\\"16\\\"; // Strategy is not active, an active strategy is required\\n    string public constant INVALID_STRATEGY = \\\"17\\\"; // Given strategy is not a strategy of this pool\\n    string public constant DEBT_RATIO_LIMIT_REACHED = \\\"18\\\"; // Debt ratio limit reached. It must be less than MAX_BPS\\n    string public constant TOTAL_DEBT_IS_NOT_ZERO = \\\"19\\\"; // Strategy total debt must be 0\\n    string public constant LOSS_TOO_HIGH = \\\"20\\\"; // Strategy reported loss must be less than current debt\\n}\\n\",\"keccak256\":\"0x59e834f922e4a3b2460c6a99cd313fe5c7d4d4a3c14ae9a70130cac32a807395\",\"license\":\"MIT\"},\"contracts/pool/PoolERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n// solhint-disable reason-string, no-empty-blocks\\n///@title Pool ERC20 to use with proxy. Inspired by OpenZeppelin ERC20\\nabstract contract PoolERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the decimals of the token. default to 18\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Returns total supply of the token.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev  Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _setName(string memory name_) internal {\\n        _name = name_;\\n    }\\n\\n    function _setSymbol(string memory symbol_) internal {\\n        _symbol = symbol_;\\n    }\\n}\\n\",\"keccak256\":\"0x772021de0eaf377e8b96683cb04cf67471b562277d49dc2de47735dbb95eb10a\",\"license\":\"MIT\"},\"contracts/pool/PoolERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./PoolERC20.sol\\\";\\n\\n///@title Pool ERC20 Permit to use with proxy. Inspired by OpenZeppelin ERC20Permit\\n// solhint-disable var-name-mixedcase\\nabstract contract PoolERC20Permit is PoolERC20, IERC20Permit {\\n    bytes32 private constant _EIP712_VERSION = keccak256(bytes(\\\"1\\\"));\\n    bytes32 private constant _EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    bytes32 private _CACHED_DOMAIN_SEPARATOR;\\n    bytes32 private _HASHED_NAME;\\n    uint256 private _CACHED_CHAIN_ID;\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    mapping(address => uint256) public override nonces;\\n\\n    /**\\n     * @dev Initializes the domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function _initializePermit(string memory name_) internal {\\n        _HASHED_NAME = keccak256(bytes(name_));\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(_EIP712_DOMAIN_TYPEHASH, _HASHED_NAME, _EIP712_VERSION);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n        uint256 _currentNonce = nonces[owner];\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _currentNonce, deadline));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n        nonces[owner] = _currentNonce + 1;\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() private view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_EIP712_DOMAIN_TYPEHASH, _HASHED_NAME, _EIP712_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 name,\\n        bytes32 version\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, name, version, block.chainid, address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0x399a11142ac8870745faa9a2c79cbe5689eec48ab3dfa200c4c37b3812818234\",\"license\":\"MIT\"},\"contracts/pool/PoolShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./PoolERC20Permit.sol\\\";\\nimport \\\"./PoolStorage.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"../Governed.sol\\\";\\nimport \\\"../Pausable.sol\\\";\\nimport \\\"../interfaces/bloq/IAddressList.sol\\\";\\nimport \\\"../interfaces/paycer/IPoolRewards.sol\\\";\\n\\n/// @title Holding pool share token\\n// solhint-disable no-empty-blocks\\nabstract contract PoolShareToken is Initializable, PoolERC20Permit, Governed, Pausable, ReentrancyGuard, PoolStorageV1 {\\n    using SafeERC20 for IERC20;\\n    uint256 public constant MAX_BPS = 10_000;\\n\\n    event Deposit(address indexed owner, uint256 shares, uint256 amount);\\n    event Withdraw(address indexed owner, uint256 shares, uint256 amount);\\n\\n    // We are using constructor to initialize implementation with basic details\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _token\\n    ) PoolERC20(_name, _symbol) {\\n        // 0x0 is acceptable as has no effect on functionality\\n        token = IERC20(_token);\\n    }\\n\\n    /// @dev Equivalent to constructor for proxy. It can be called only once per proxy.\\n    function _initializePool(\\n        string memory _name,\\n        string memory _symbol,\\n        address _token\\n    ) internal initializer {\\n        require(_token != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\\n        _setName(_name);\\n        _setSymbol(_symbol);\\n        _initializePermit(_name);\\n        token = IERC20(_token);\\n\\n        // Assuming token supports 18 or less decimals\\n        uint256 _decimals = IERC20Metadata(_token).decimals();\\n        decimalConversionFactor = 10**(18 - _decimals);\\n    }\\n\\n    /**\\n     * @notice Deposit ERC20 tokens and receive pool shares depending on the current share price.\\n     * @param _amount ERC20 token amount.\\n     */\\n    function deposit(uint256 _amount) external virtual nonReentrant whenNotPaused {\\n        _deposit(_amount);\\n    }\\n\\n    /**\\n     * @notice Deposit ERC20 tokens with permit aka gasless approval.\\n     * @param _amount ERC20 token amount.\\n     * @param _deadline The time at which signature will expire\\n     * @param _v The recovery byte of the signature\\n     * @param _r Half of the ECDSA signature pair\\n     * @param _s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external virtual nonReentrant whenNotPaused {\\n        IERC20Permit(address(token)).permit(_msgSender(), address(this), _amount, _deadline, _v, _r, _s);\\n        _deposit(_amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral based on given shares and the current share price.\\n     * Withdraw fee, if any, will be deduced from given shares and transferred to feeCollector.\\n     * Burn remaining shares and return collateral.\\n     * @param _shares Pool shares. It will be in 18 decimals.\\n     */\\n    function withdraw(uint256 _shares) external virtual nonReentrant whenNotShutdown {\\n        _withdraw(_shares);\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral based on given shares and the current share price.\\n     * @dev Burn shares and return collateral. No withdraw fee will be assessed\\n     * when this function is called. Only some white listed address can call this function.\\n     * @param _shares Pool shares. It will be in 18 decimals.\\n     */\\n    function whitelistedWithdraw(uint256 _shares) external virtual nonReentrant whenNotShutdown {\\n        require(IAddressList(feeWhitelist).contains(_msgSender()), Errors.NOT_WHITELISTED_ADDRESS);\\n        _withdrawWithoutFee(_shares);\\n    }\\n\\n    /**\\n     * @notice Transfer tokens to multiple recipient\\n     * @dev Address array and amount array are 1:1 and are in order.\\n     * @param _recipients array of recipient addresses\\n     * @param _amounts array of token amounts\\n     * @return true/false\\n     */\\n    function multiTransfer(address[] calldata _recipients, uint256[] calldata _amounts) external returns (bool) {\\n        require(_recipients.length == _amounts.length, Errors.INPUT_LENGTH_MISMATCH);\\n        for (uint256 i = 0; i < _recipients.length; i++) {\\n            require(transfer(_recipients[i], _amounts[i]), Errors.MULTI_TRANSFER_FAILED);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get price per share\\n     * @dev Return value will be in token defined decimals.\\n     */\\n    function pricePerShare() public view returns (uint256) {\\n        if (totalSupply() == 0 || totalValue() == 0) {\\n            return convertFrom18(1e18);\\n        }\\n        return (totalValue() * 1e18) / totalSupply();\\n    }\\n\\n    /// @dev Convert from 18 decimals to token defined decimals.\\n    function convertFrom18(uint256 _amount) public view virtual returns (uint256) {\\n        return _amount / decimalConversionFactor;\\n    }\\n\\n    /// @dev Returns the token stored in the pool. It will be in token defined decimals.\\n    function tokensHere() public view virtual returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Returns sum of token locked in other contracts and token stored in the pool.\\n     * Default tokensHere. It will be in token defined decimals.\\n     */\\n    function totalValue() public view virtual returns (uint256);\\n\\n    /**\\n     * @dev Hook that is called just before burning tokens. This withdraw collateral from withdraw queue\\n     * @param _share Pool share in 18 decimals\\n     */\\n    function _beforeBurning(uint256 _share) internal virtual returns (uint256) {}\\n\\n    /**\\n     * @dev Hook that is called just after burning tokens.\\n     * @param _amount Collateral amount in collateral token defined decimals.\\n     */\\n    function _afterBurning(uint256 _amount) internal virtual returns (uint256) {\\n        token.safeTransfer(_msgSender(), _amount);\\n        return _amount;\\n    }\\n\\n    /**\\n     * @dev Hook that is called just before minting new tokens. To be used i.e.\\n     * if the deposited amount is to be transferred from user to this contract.\\n     * @param _amount Collateral amount in collateral token defined decimals.\\n     */\\n    function _beforeMinting(uint256 _amount) internal virtual {\\n        token.safeTransferFrom(_msgSender(), address(this), _amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called just after minting new tokens. To be used i.e.\\n     * if the deposited amount is to be transferred to a different contract.\\n     * @param _amount Collateral amount in collateral token defined decimals.\\n     */\\n    function _afterMinting(uint256 _amount) internal virtual {}\\n\\n    /// @dev Update pool rewards of sender and receiver during transfer.\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        if (poolRewards != address(0)) {\\n            IPoolRewards(poolRewards).updateReward(sender);\\n            IPoolRewards(poolRewards).updateReward(recipient);\\n        }\\n        super._transfer(sender, recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Calculate shares to mint based on the current share price and given amount.\\n     * @param _amount Collateral amount in collateral token defined decimals.\\n     * @return share amount in 18 decimal\\n     */\\n    function _calculateShares(uint256 _amount) internal view returns (uint256) {\\n        require(_amount != 0, Errors.INVALID_COLLATERAL_AMOUNT);\\n        uint256 _share = ((_amount * 1e18) / pricePerShare());\\n        return _amount > ((_share * pricePerShare()) / 1e18) ? _share + 1 : _share;\\n    }\\n\\n    /// @notice claim rewards of account\\n    function _claimRewards(address _account) internal {\\n        if (poolRewards != address(0)) {\\n            IPoolRewards(poolRewards).claimReward(_account);\\n        }\\n    }\\n\\n    /// @dev Deposit incoming token and mint pool token i.e. shares.\\n    function _deposit(uint256 _amount) internal {\\n        _claimRewards(_msgSender());\\n        uint256 _shares = _calculateShares(_amount);\\n        _beforeMinting(_amount);\\n        _mint(_msgSender(), _shares);\\n        _afterMinting(_amount);\\n        emit Deposit(_msgSender(), _shares, _amount);\\n    }\\n\\n    /// @dev Burns shares and returns the collateral value, after fee, of those.\\n    function _withdraw(uint256 _shares) internal {\\n        if (withdrawFee == 0) {\\n            _withdrawWithoutFee(_shares);\\n        } else {\\n            require(_shares != 0, Errors.INVALID_SHARE_AMOUNT);\\n            _claimRewards(_msgSender());\\n            uint256 _fee = (_shares * withdrawFee) / MAX_BPS;\\n            uint256 _sharesAfterFee = _shares - _fee;\\n            uint256 _amountWithdrawn = _beforeBurning(_sharesAfterFee);\\n            // Recalculate proportional share on actual amount withdrawn\\n            uint256 _proportionalShares = _calculateShares(_amountWithdrawn);\\n\\n            // Using convertFrom18() to avoid dust.\\n            // Pool share token is in 18 decimal and collateral token decimal is <=18.\\n            // Anything less than 10**(18-collateralTokenDecimal) is dust.\\n            if (convertFrom18(_proportionalShares) < convertFrom18(_sharesAfterFee)) {\\n                // Recalculate shares to withdraw, fee and shareAfterFee\\n                _shares = (_proportionalShares * MAX_BPS) / (MAX_BPS - withdrawFee);\\n                _fee = _shares - _proportionalShares;\\n                _sharesAfterFee = _proportionalShares;\\n            }\\n            _burn(_msgSender(), _sharesAfterFee);\\n            _transfer(_msgSender(), feeCollector, _fee);\\n            _afterBurning(_amountWithdrawn);\\n            emit Withdraw(_msgSender(), _shares, _amountWithdrawn);\\n        }\\n    }\\n\\n    /// @dev Burns shares and returns the collateral value of those.\\n    function _withdrawWithoutFee(uint256 _shares) internal {\\n        require(_shares != 0, Errors.INVALID_SHARE_AMOUNT);\\n        _claimRewards(_msgSender());\\n        uint256 _amountWithdrawn = _beforeBurning(_shares);\\n        uint256 _proportionalShares = _calculateShares(_amountWithdrawn);\\n        if (convertFrom18(_proportionalShares) < convertFrom18(_shares)) {\\n            _shares = _proportionalShares;\\n        }\\n        _burn(_msgSender(), _shares);\\n        _afterBurning(_amountWithdrawn);\\n        emit Withdraw(_msgSender(), _shares, _amountWithdrawn);\\n    }\\n}\\n\",\"keccak256\":\"0x6d1a20e472468f7d161f2b3021667ecd5cbcb4ac4b417362f18badfa961a70eb\",\"license\":\"MIT\"},\"contracts/pool/PoolStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract PoolStorageV1 {\\n    IERC20 public token; // Collateral token\\n\\n    address public poolAccountant; // PoolAccountant address\\n    address public poolRewards; // PoolRewards contract address\\n    address public feeWhitelist; // sol-address-list address which contains whitelisted addresses to withdraw without fee\\n    address public keepers; // sol-address-list address which contains addresses of keepers\\n    address public maintainers; // sol-address-list address which contains addresses of maintainers\\n    address public feeCollector; // Fee collector address\\n    uint256 public withdrawFee; // Withdraw fee for this pool\\n    uint256 public decimalConversionFactor; // It can be used in converting value to/from 18 decimals\\n    bool internal withdrawInETH; // This flag will be used by VETH pool as switch to withdraw ETH or WETH\\n}\\n\",\"keccak256\":\"0x081ded51957348f93b7fcf5b2f0f9083d2d97056e6dffadd4d2a5d5b2632f5b0\",\"license\":\"MIT\"},\"contracts/pool/VETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./VPoolBase.sol\\\";\\nimport \\\"../interfaces/token/IToken.sol\\\";\\n\\n//solhint-disable no-empty-blocks\\ncontract VETH is VPoolBase {\\n    string public constant VERSION = \\\"3.0.3\\\";\\n    TokenLike public constant WETH = TokenLike(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    // WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\n    constructor(string memory _name, string memory _symbol)\\n        VPoolBase(_name, _symbol, 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)\\n    {}\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _poolAccountant,\\n        address _addressListFactory\\n    ) external initializer {\\n        _initializeBase(\\n            _name,\\n            _symbol,\\n            0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,\\n            _poolAccountant,\\n            _addressListFactory\\n        );\\n    }\\n\\n    /// @dev Handle incoming ETH to the contract address.\\n    receive() external payable {\\n        if (msg.sender != address(WETH)) {\\n            deposit();\\n        }\\n    }\\n\\n    /// @dev Burns tokens/shares and returns the ETH value, after fee, of those.\\n    function withdrawETH(uint256 _shares) external whenNotShutdown nonReentrant {\\n        withdrawInETH = true;\\n        _withdraw(_shares);\\n        withdrawInETH = false;\\n    }\\n\\n    /**\\n     * @dev After burning hook, it will be called during withdrawal process.\\n     * It will withdraw collateral from strategy and transfer it to user.\\n     */\\n    function _afterBurning(uint256 _amount) internal override returns (uint256) {\\n        if (withdrawInETH) {\\n            WETH.withdraw(_amount);\\n            Address.sendValue(payable(_msgSender()), _amount);\\n        } else {\\n            super._afterBurning(_amount);\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n     * @dev Receives ETH and grants new tokens/shares to the sender depending\\n     * on the value of pool's share.\\n     */\\n    function deposit() public payable whenNotPaused nonReentrant {\\n        _claimRewards(_msgSender());\\n        uint256 _shares = _calculateShares(msg.value);\\n        // Wraps ETH in WETH\\n        WETH.deposit{value: msg.value}();\\n        _mint(_msgSender(), _shares);\\n        emit Deposit(_msgSender(), _shares, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x5eb282c700b09af875daeed136252dc264d297ca45dd4ee8a5f1bfde5f8454b0\",\"license\":\"MIT\"},\"contracts/pool/VPoolBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./PoolShareToken.sol\\\";\\nimport \\\"../interfaces/paycer/IPoolAccountant.sol\\\";\\nimport \\\"../interfaces/paycer/IStrategy.sol\\\";\\nimport \\\"../interfaces/bloq/IAddressListFactory.sol\\\";\\n\\nabstract contract VPoolBase is PoolShareToken {\\n    using SafeERC20 for IERC20;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedPoolRewards(address indexed previousPoolRewards, address indexed newPoolRewards);\\n    event UpdatedWithdrawFee(uint256 previousWithdrawFee, uint256 newWithdrawFee);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _token // solhint-disable-next-line no-empty-blocks\\n    ) PoolShareToken(_name, _symbol, _token) {}\\n\\n    /// @dev Equivalent to constructor for proxy. It can be called only once per proxy.\\n    function _initializeBase(\\n        string memory _name,\\n        string memory _symbol,\\n        address _token,\\n        address _poolAccountant,\\n        address _addressListFactory\\n    ) internal initializer {\\n        require(_poolAccountant != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\\n        require(_addressListFactory != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\\n        _initializePool(_name, _symbol, _token);\\n        _initializeGoverned();\\n        _initializeAddressLists(_addressListFactory);\\n        poolAccountant = _poolAccountant;\\n    }\\n\\n    /**\\n     * @notice Create feeWhitelist, keeper and maintainer list\\n     * @dev Add caller into the keeper and maintainer list\\n     * @dev This function will be used as part of initializer\\n     * @param _addressListFactory To support same code in eth side chain, user _addressListFactory as param\\n     * ethereum - 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3\\n     * polygon - 0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291\\n     */\\n    function _initializeAddressLists(address _addressListFactory) internal {\\n        require(address(keepers) == address(0), Errors.ALREADY_INITIALIZED);\\n        IAddressListFactory _factory = IAddressListFactory(_addressListFactory);\\n        feeWhitelist = _factory.createList();\\n        keepers = _factory.createList();\\n        maintainers = _factory.createList();\\n        // List creator can do job of keeper and maintainer.\\n        require(IAddressList(keepers).add(_msgSender()), Errors.ADD_IN_LIST_FAILED);\\n        require(IAddressList(maintainers).add(_msgSender()), Errors.ADD_IN_LIST_FAILED);\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(IAddressList(keepers).contains(_msgSender()), \\\"not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyMaintainer() {\\n        require(IAddressList(maintainers).contains(_msgSender()), \\\"not-a-maintainer\\\");\\n        _;\\n    }\\n\\n    ////////////////////////////// Only Governor //////////////////////////////\\n\\n    /**\\n     * @notice Migrate existing strategy to new strategy.\\n     * @dev Migrating strategy aka old and new strategy should be of same type.\\n     * @param _old Address of strategy being migrated\\n     * @param _new Address of new strategy\\n     */\\n    function migrateStrategy(address _old, address _new) external onlyGovernor {\\n        require(\\n            IStrategy(_new).pool() == address(this) && IStrategy(_old).pool() == address(this),\\n            Errors.INVALID_STRATEGY\\n        );\\n        IPoolAccountant(poolAccountant).migrateStrategy(_old, _new);\\n        IStrategy(_old).migrate(_new);\\n    }\\n\\n    /**\\n     * @notice Update fee collector address for this pool\\n     * @param _newFeeCollector new fee collector address\\n     */\\n    function updateFeeCollector(address _newFeeCollector) external onlyGovernor {\\n        require(_newFeeCollector != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\\n        emit UpdatedFeeCollector(feeCollector, _newFeeCollector);\\n        feeCollector = _newFeeCollector;\\n    }\\n\\n    /**\\n     * @notice Update pool rewards address for this pool\\n     * @param _newPoolRewards new pool rewards address\\n     */\\n    function updatePoolRewards(address _newPoolRewards) external onlyGovernor {\\n        require(_newPoolRewards != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\\n        emit UpdatedPoolRewards(poolRewards, _newPoolRewards);\\n        poolRewards = _newPoolRewards;\\n    }\\n\\n    /**\\n     * @notice Update withdraw fee for this pool\\n     * @dev Format: 1500 = 15% fee, 100 = 1%\\n     * @param _newWithdrawFee new withdraw fee\\n     */\\n    function updateWithdrawFee(uint256 _newWithdrawFee) external onlyGovernor {\\n        require(feeCollector != address(0), Errors.FEE_COLLECTOR_NOT_SET);\\n        require(_newWithdrawFee <= MAX_BPS, Errors.FEE_LIMIT_REACHED);\\n        emit UpdatedWithdrawFee(withdrawFee, _newWithdrawFee);\\n        withdrawFee = _newWithdrawFee;\\n    }\\n\\n    ///////////////////////////// Only Keeper ///////////////////////////////\\n    function pause() external onlyKeeper {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyKeeper {\\n        _unpause();\\n    }\\n\\n    function shutdown() external onlyKeeper {\\n        _shutdown();\\n    }\\n\\n    function open() external onlyKeeper {\\n        _open();\\n    }\\n\\n    /**\\n     * @notice Add given address in provided address list.\\n     * @dev Use it to add keeper in keepers list and to add address in feeWhitelist\\n     * @param _listToUpdate address of AddressList contract.\\n     * @param _addressToAdd address which we want to add in AddressList.\\n     */\\n    function addInList(address _listToUpdate, address _addressToAdd) external onlyKeeper {\\n        require(IAddressList(_listToUpdate).add(_addressToAdd), Errors.ADD_IN_LIST_FAILED);\\n    }\\n\\n    /**\\n     * @notice Remove given address from provided address list.\\n     * @dev Use it to remove keeper from keepers list and to remove address from feeWhitelist\\n     * @param _listToUpdate address of AddressList contract.\\n     * @param _addressToRemove address which we want to remove from AddressList.\\n     */\\n    function removeFromList(address _listToUpdate, address _addressToRemove) external onlyKeeper {\\n        require(IAddressList(_listToUpdate).remove(_addressToRemove), Errors.REMOVE_FROM_LIST_FAILED);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Strategy call this in regular interval.\\n     * @param _profit yield generated by strategy. Strategy get performance fee on this amount\\n     * @param _loss  Reduce debt ,also reduce debtRatio, increase loss in record.\\n     * @param _payback strategy willing to payback outstanding above debtLimit. no performance fee on this amount.\\n     *  when governance has reduced debtRatio of strategy, strategy will report profit and payback amount separately.\\n     */\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external {\\n        (uint256 _actualPayback, uint256 _creditLine, uint256 _interestFee) =\\n            IPoolAccountant(poolAccountant).reportEarning(_msgSender(), _profit, _loss, _payback);\\n        uint256 _totalPayback = _profit + _actualPayback;\\n        // After payback, if strategy has credit line available then send more fund to strategy\\n        // If payback is more than available credit line then get fund from strategy\\n        if (_totalPayback < _creditLine) {\\n            token.safeTransfer(_msgSender(), _creditLine - _totalPayback);\\n        } else if (_totalPayback > _creditLine) {\\n            token.safeTransferFrom(_msgSender(), address(this), _totalPayback - _creditLine);\\n        }\\n        // Mint interest fee worth shares at strategy address\\n        if (_interestFee != 0) {\\n            _mint(_msgSender(), _calculateShares(_interestFee));\\n        }\\n    }\\n\\n    /**\\n     * @notice Report loss outside of rebalance activity.\\n     * @dev Some strategies pay deposit fee thus realizing loss at deposit.\\n     * For example: Curve's 3pool has some slippage due to deposit of one asset in 3pool.\\n     * Strategy may want report this loss instead of waiting for next rebalance.\\n     * @param _loss Loss that strategy want to report\\n     */\\n    function reportLoss(uint256 _loss) external {\\n        IPoolAccountant(poolAccountant).reportLoss(_msgSender(), _loss);\\n    }\\n\\n    /**\\n     * @dev Transfer given ERC20 token to feeCollector\\n     * @param _fromToken Token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external virtual onlyKeeper {\\n        require(_fromToken != address(token), Errors.NOT_ALLOWED_TO_SWEEP);\\n        require(feeCollector != address(0), Errors.FEE_COLLECTOR_NOT_SET);\\n        IERC20(_fromToken).safeTransfer(feeCollector, IERC20(_fromToken).balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Get available credit limit of strategy. This is the amount strategy can borrow from pool\\n     * @dev Available credit limit is calculated based on current debt of pool and strategy, current debt limit of pool and strategy.\\n     * credit available = min(pool's debt limit, strategy's debt limit, max debt per rebalance)\\n     * when some strategy do not pay back outstanding debt, this impact credit line of other strategy if totalDebt of pool >= debtLimit of pool\\n     * @param _strategy Strategy address\\n     */\\n    function availableCreditLimit(address _strategy) external view returns (uint256) {\\n        return IPoolAccountant(poolAccountant).availableCreditLimit(_strategy);\\n    }\\n\\n    /**\\n     * @notice Debt above current debt limit\\n     * @param _strategy Address of strategy\\n     */\\n    function excessDebt(address _strategy) external view returns (uint256) {\\n        return IPoolAccountant(poolAccountant).excessDebt(_strategy);\\n    }\\n\\n    function getStrategies() public view returns (address[] memory) {\\n        return IPoolAccountant(poolAccountant).getStrategies();\\n    }\\n\\n    function getWithdrawQueue() public view returns (address[] memory) {\\n        return IPoolAccountant(poolAccountant).getWithdrawQueue();\\n    }\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee,\\n            uint256 _debtRate,\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio\\n        )\\n    {\\n        return IPoolAccountant(poolAccountant).strategy(_strategy);\\n    }\\n\\n    /// @notice Get total debt of pool\\n    function totalDebt() external view returns (uint256) {\\n        return IPoolAccountant(poolAccountant).totalDebt();\\n    }\\n\\n    /**\\n     * @notice Get total debt of given strategy\\n     * @param _strategy Strategy address\\n     */\\n    function totalDebtOf(address _strategy) public view returns (uint256) {\\n        return IPoolAccountant(poolAccountant).totalDebtOf(_strategy);\\n    }\\n\\n    /// @notice Get total debt ratio. Total debt ratio helps us keep buffer in pool\\n    function totalDebtRatio() external view returns (uint256) {\\n        return IPoolAccountant(poolAccountant).totalDebtRatio();\\n    }\\n\\n    /// @dev Returns total value of paycer pool, in terms of collateral token\\n    function totalValue() public view override returns (uint256) {\\n        return IPoolAccountant(poolAccountant).totalDebt() + tokensHere();\\n    }\\n\\n    function _withdrawCollateral(uint256 _amount) internal virtual {\\n        // Withdraw amount from queue\\n        uint256 _debt;\\n        uint256 _balanceAfter;\\n        uint256 _balanceBefore;\\n        uint256 _amountWithdrawn;\\n        uint256 _amountNeeded = _amount;\\n        uint256 _totalAmountWithdrawn;\\n        address[] memory _withdrawQueue = getWithdrawQueue();\\n        uint256 _len = _withdrawQueue.length;\\n        for (uint256 i; i < _len; i++) {\\n            address _strategy = _withdrawQueue[i];\\n            _debt = totalDebtOf(_strategy);\\n            if (_debt == 0) {\\n                continue;\\n            }\\n            if (_amountNeeded > _debt) {\\n                // Should not withdraw more than current debt of strategy.\\n                _amountNeeded = _debt;\\n            }\\n            _balanceBefore = tokensHere();\\n            //solhint-disable no-empty-blocks\\n            try IStrategy(_strategy).withdraw(_amountNeeded) {} catch {\\n                continue;\\n            }\\n            _balanceAfter = tokensHere();\\n            _amountWithdrawn = _balanceAfter - _balanceBefore;\\n            // Adjusting totalDebt. Assuming that during next reportEarning(), strategy will report loss if amountWithdrawn < _amountNeeded\\n            IPoolAccountant(poolAccountant).decreaseDebt(_strategy, _amountWithdrawn);\\n            _totalAmountWithdrawn += _amountWithdrawn;\\n            if (_totalAmountWithdrawn >= _amount) {\\n                // withdraw done\\n                break;\\n            }\\n            _amountNeeded = _amount - _totalAmountWithdrawn;\\n        }\\n    }\\n\\n    /**\\n     * @dev Before burning hook.\\n     * withdraw amount from strategies\\n     */\\n    function _beforeBurning(uint256 _share) internal override returns (uint256 actualWithdrawn) {\\n        uint256 _amount = (_share * pricePerShare()) / 1e18;\\n        uint256 _balanceNow = tokensHere();\\n        if (_amount > _balanceNow) {\\n            _withdrawCollateral(_amount - _balanceNow);\\n            _balanceNow = tokensHere();\\n        }\\n        actualWithdrawn = _balanceNow < _amount ? _balanceNow : _amount;\\n    }\\n}\\n\",\"keccak256\":\"0x832ff8cc7eaa12133978970c6ff6fb8a58640205c0e42a7f6383cc63457a8706\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200528238038062005282833981016040819052620000349162000271565b818173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2828282828281600390805190602001906200006892919062000118565b5080516200007e90600490602084019062000118565b5050506000620000936200011460201b60201c565b600a80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a3506001600c55600d80546001600160a01b0319166001600160a01b0392909216919091179055506200032b95505050505050565b3390565b8280546200012690620002d8565b90600052602060002090601f0160209004810192826200014a576000855562000195565b82601f106200016557805160ff191683800117855562000195565b8280016001018555821562000195579182015b828111156200019557825182559160200191906001019062000178565b50620001a3929150620001a7565b5090565b5b80821115620001a35760008155600101620001a8565b600082601f830112620001cf578081fd5b81516001600160401b0380821115620001ec57620001ec62000315565b604051601f8301601f19908116603f0116810190828211818310171562000217576200021762000315565b8160405283815260209250868385880101111562000233578485fd5b8491505b8382101562000256578582018301518183018401529082019062000237565b838211156200026757848385830101525b9695505050505050565b6000806040838503121562000284578182fd5b82516001600160401b03808211156200029b578384fd5b620002a986838701620001be565b93506020850151915080821115620002bf578283fd5b50620002ce85828601620001be565b9150509250929050565b600181811c90821680620002ed57607f821691505b602082108114156200030f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b614f47806200033b6000396000f3fe6080604052600436106103c75760003560e01c80639f2b2833116101f2578063daf635de1161010d578063fc0c546a116100a0578063fcfff16f1161006f578063fcfff16f14610b70578063fd967f4714610b85578063ff643a7c14610b9b578063ffa1ad7414610bbb576103f1565b8063fc0c546a14610b06578063fc0e74d114610b26578063fc76781014610b3b578063fc7b9c1814610b5b576103f1565b8063e941fa78116100dc578063e941fa7814610a9b578063f14210a614610ab1578063f3b27bc314610ad1578063fb589de214610ae6576103f1565b8063daf635de146109f5578063dd62ed3e14610a15578063ddd6d26014610a5b578063e00af4a714610a7b576103f1565b8063b8cb343d11610185578063d2c35ce811610154578063d2c35ce814610980578063d4c3eea0146109a0578063d505accf146109b5578063d53ddc26146109d5576103f1565b8063b8cb343d14610923578063c12d636b14610938578063c415b95c14610958578063d0e30db014610978576103f1565b8063b49a60bb116101c1578063b49a60bb146108ae578063b64321ec146108c3578063b6aa515b146108e3578063b6b55f2514610903576103f1565b80639f2b283314610826578063a457c2d714610846578063a9059cbb14610866578063ad5c464814610886576103f1565b80634938649a116102e25780638456cb5911610275578063940c408211610244578063940c4082146107bc578063951dc22c146107dc57806395d89b41146107fc57806399530b0614610811576103f1565b80638456cb59146107515780638bc6beb2146107665780638f15b414146107865780638fe91ffb146107a6576103f1565b806367187d3d116102b157806367187d3d146106c45780636cb56d19146106e457806370a08231146107045780637ecebe0014610724576103f1565b80634938649a1461064257806349eeb860146106635780634a970be7146106835780635c975abb146106a3576103f1565b8063228bfd9f1161035a578063313ce56711610329578063313ce567146105dc5780633644e515146105f8578063395093511461060d5780633f4ba83a1461062d576103f1565b8063228bfd9f1461052a57806323b872dd146105875780632df9eab9146105a75780632e1a7d4d146105bc576103f1565b8063111830521161039657806311183052146104a957806318160ddd146104cb5780631e751ac1146104ea5780631e89d5451461050a576103f1565b806305bed046146103f657806306fdde0314610416578063095ea7b3146104415780630c340a2414610471576103f1565b366103f1573373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2146103ef576103ef610bec565b005b600080fd5b34801561040257600080fd5b506103ef610411366004614a1d565b610d18565b34801561042257600080fd5b5061042b610e4e565b6040516104389190614b42565b60405180910390f35b34801561044d57600080fd5b5061046161045c3660046147a0565b610ee1565b6040519015158152602001610438565b34801561047d57600080fd5b50600a54610491906001600160a01b031681565b6040516001600160a01b039091168152602001610438565b3480156104b557600080fd5b506104be610ef7565b6040516104389190614af5565b3480156104d757600080fd5b506002545b604051908152602001610438565b3480156104f657600080fd5b506103ef6105053660046146b8565b610f7d565b34801561051657600080fd5b506104616105253660046147cb565b6110dc565b34801561053657600080fd5b5061054a610545366004614680565b6111de565b6040805198151589526020890197909752958701949094526060860192909252608085015260a084015260c083015260e082015261010001610438565b34801561059357600080fd5b506104616105a23660046146f0565b611287565b3480156105b357600080fd5b506104dc61133a565b3480156105c857600080fd5b506103ef6105d73660046149ed565b6113b7565b3480156105e857600080fd5b5060405160128152602001610438565b34801561060457600080fd5b506104dc61141a565b34801561061957600080fd5b506104616106283660046147a0565b611424565b34801561063957600080fd5b506103ef61145b565b34801561064e57600080fd5b50600b5461046190600160a81b900460ff1681565b34801561066f57600080fd5b50601254610491906001600160a01b031681565b34801561068f57600080fd5b506103ef61069e366004614a75565b61150a565b3480156106af57600080fd5b50600b5461046190600160a01b900460ff1681565b3480156106d057600080fd5b506103ef6106df3660046146b8565b611607565b3480156106f057600080fd5b506103ef6106ff3660046146b8565b611760565b34801561071057600080fd5b506104dc61071f366004614680565b61199c565b34801561073057600080fd5b506104dc61073f366004614680565b60096020526000908152604090205481565b34801561075d57600080fd5b506103ef6119bb565b34801561077257600080fd5b50600f54610491906001600160a01b031681565b34801561079257600080fd5b506103ef6107a1366004614967565b611a68565b3480156107b257600080fd5b506104dc60155481565b3480156107c857600080fd5b506103ef6107d7366004614680565b611af9565b3480156107e857600080fd5b50601154610491906001600160a01b031681565b34801561080857600080fd5b5061042b611bc0565b34801561081d57600080fd5b506104dc611bcf565b34801561083257600080fd5b506104dc610841366004614680565b611c2f565b34801561085257600080fd5b506104616108613660046147a0565b611cb4565b34801561087257600080fd5b506104616108813660046147a0565b611d4f565b34801561089257600080fd5b5061049173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b3480156108ba57600080fd5b506104be611d5c565b3480156108cf57600080fd5b506104dc6108de366004614680565b611da1565b3480156108ef57600080fd5b506103ef6108fe366004614680565b611dd4565b34801561090f57600080fd5b506103ef61091e3660046149ed565b611e76565b34801561092f57600080fd5b506104dc611ed1565b34801561094457600080fd5b50600e54610491906001600160a01b031681565b34801561096457600080fd5b50601354610491906001600160a01b031681565b6103ef610bec565b34801561098c57600080fd5b506103ef61099b366004614680565b611f15565b3480156109ac57600080fd5b506104dc611fdc565b3480156109c157600080fd5b506103ef6109d0366004614730565b612076565b3480156109e157600080fd5b506104dc6109f0366004614680565b612236565b348015610a0157600080fd5b506103ef610a103660046149ed565b612269565b348015610a2157600080fd5b506104dc610a303660046146b8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b348015610a6757600080fd5b506103ef610a763660046149ed565b612354565b348015610a8757600080fd5b506103ef610a96366004614680565b6123b5565b348015610aa757600080fd5b506104dc60145481565b348015610abd57600080fd5b506103ef610acc3660046149ed565b61257d565b348015610add57600080fd5b506103ef6125f7565b348015610af257600080fd5b506104dc610b013660046149ed565b6126b7565b348015610b1257600080fd5b50600d54610491906001600160a01b031681565b348015610b3257600080fd5b506103ef6126c7565b348015610b4757600080fd5b50601054610491906001600160a01b031681565b348015610b6757600080fd5b506104dc612774565b348015610b7c57600080fd5b506103ef6127b9565b348015610b9157600080fd5b506104dc61271081565b348015610ba757600080fd5b506103ef610bb63660046149ed565b612866565b348015610bc757600080fd5b5061042b60405180604001604052806005815260200164332e302e3360d81b81525081565b600b54600160a01b900460ff1615610c1f5760405162461bcd60e51b8152600401610c1690614c42565b60405180910390fd5b6002600c541415610c425760405162461bcd60e51b8152600401610c1690614c0b565b6002600c55610c51335b612983565b6000610c5c346129c6565b905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610cad57600080fd5b505af1158015610cc1573d6000803e3d6000fd5b5050505050610cd6610cd03390565b82612a64565b6040805182815234602082015233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a2506001600c55565b600e54600090819081906001600160a01b031663a066654b336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018990526044810188905260648101879052608401606060405180830381600087803b158015610d8757600080fd5b505af1158015610d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbf9190614a48565b919450925090506000610dd28488614cbd565b905082811015610e0257610dfd33610dea8386614e28565b600d546001600160a01b03169190612b43565b610e2d565b82811115610e2d57610e2d3330610e198685614e28565b600d546001600160a01b0316929190612ba6565b8115610e4557610e4533610e40846129c6565b612a64565b50505050505050565b606060038054610e5d90614e6b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8990614e6b565b8015610ed65780601f10610eab57610100808354040283529160200191610ed6565b820191906000526020600020905b815481529060010190602001808311610eb957829003601f168201915b505050505090505b90565b6000610eee338484612be4565b50600192915050565b600e546040805163088c182960e11b815290516060926001600160a01b0316916311183052916004808301926000929190829003018186803b158015610f3c57600080fd5b505afa158015610f50573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f789190810190614834565b905090565b6011546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610fce57600080fd5b505afa158015610fe2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100691906148e8565b6110225760405162461bcd60e51b8152600401610c1690614bc3565b604051630a3b0a4f60e01b81526001600160a01b038281166004830152831690630a3b0a4f906024015b602060405180830381600087803b15801561106657600080fd5b505af115801561107a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109e91906148e8565b60405180604001604052806002815260200161313360f01b815250906110d75760405162461bcd60e51b8152600401610c169190614b42565b505050565b6040805180820190915260018152600d60fa1b60208201526000908483146111175760405162461bcd60e51b8152600401610c169190614b42565b5060005b848110156111d25761118786868381811061114657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061115b9190614680565b85858481811061117b57634e487b7160e01b600052603260045260246000fd5b90506020020135611d4f565b604051806040016040528060018152602001601b60f91b815250906111bf5760405162461bcd60e51b8152600401610c169190614b42565b50806111ca81614ea6565b91505061111b565b50600195945050505050565b600e5460405163228bfd9f60e01b81526001600160a01b038381166004830152600092839283928392839283928392839291169063228bfd9f906024016101006040518083038186803b15801561123457600080fd5b505afa158015611248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126c9190614902565b97509750975097509750975097509750919395975091939597565b6000611294848484612d09565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156113195760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610c16565b61132d85336113288685614e28565b612be4565b60019150505b9392505050565b600e5460408051632df9eab960e01b815290516000926001600160a01b031691632df9eab9916004808301926020929190829003018186803b15801561137f57600080fd5b505afa158015611393573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f789190614a05565b6002600c5414156113da5760405162461bcd60e51b8152600401610c1690614c0b565b6002600c55600b54600160a81b900460ff16156114095760405162461bcd60e51b8152600401610c1690614be9565b61141281612de4565b506001600c55565b6000610f78612f3c565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610eee918590611328908690614cbd565b6011546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156114ac57600080fd5b505afa1580156114c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e491906148e8565b6115005760405162461bcd60e51b8152600401610c1690614bc3565b611508612fb9565b565b6002600c54141561152d5760405162461bcd60e51b8152600401610c1690614c0b565b6002600c55600b54600160a01b900460ff161561155c5760405162461bcd60e51b8152600401610c1690614c42565b600d546001600160a01b031663d505accf336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018890526064810187905260ff8616608482015260a4810185905260c4810184905260e401600060405180830381600087803b1580156115da57600080fd5b505af11580156115ee573d6000803e3d6000fd5b505050506115fb85613076565b50506001600c55505050565b6011546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561165857600080fd5b505afa15801561166c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169091906148e8565b6116ac5760405162461bcd60e51b8152600401610c1690614bc3565b604051631484968760e11b81526001600160a01b0382811660048301528316906329092d0e90602401602060405180830381600087803b1580156116ef57600080fd5b505af1158015611703573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172791906148e8565b604051806040016040528060028152602001610c4d60f21b815250906110d75760405162461bcd60e51b8152600401610c169190614b42565b600a546001600160a01b0316331461178a5760405162461bcd60e51b8152600401610c1690614c62565b306001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117cd57600080fd5b505afa1580156117e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611805919061469c565b6001600160a01b031614801561189c5750306001600160a01b0316826001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561185957600080fd5b505afa15801561186d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611891919061469c565b6001600160a01b0316145b60405180604001604052806002815260200161313760f01b815250906118d55760405162461bcd60e51b8152600401610c169190614b42565b50600e54604051636cb56d1960e01b81526001600160a01b038481166004830152838116602483015290911690636cb56d1990604401600060405180830381600087803b15801561192557600080fd5b505af1158015611939573d6000803e3d6000fd5b505060405163ce5494bb60e01b81526001600160a01b0384811660048301528516925063ce5494bb9150602401600060405180830381600087803b15801561198057600080fd5b505af1158015611994573d6000803e3d6000fd5b505050505050565b6001600160a01b0381166000908152602081905260409020545b919050565b6011546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611a0c57600080fd5b505afa158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4491906148e8565b611a605760405162461bcd60e51b8152600401610c1690614bc3565b6115086130dd565b600554610100900460ff1680611a81575060055460ff16155b611a9d5760405162461bcd60e51b8152600401610c1690614b75565b600554610100900460ff16158015611abf576005805461ffff19166101011790555b611ae0858573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28686613142565b8015611af2576005805461ff00191690555b5050505050565b600a546001600160a01b03163314611b235760405162461bcd60e51b8152600401610c1690614c62565b604080518082019091526002815261031360f41b60208201526001600160a01b038216611b635760405162461bcd60e51b8152600401610c169190614b42565b50600f546040516001600160a01b038084169216907fe239974dad08ac696e723caf1886bd0b5afc0870088f9a1266082757f824927690600090a3600f80546001600160a01b0319166001600160a01b0392909216919091179055565b606060048054610e5d90614e6b565b6000611bda60025490565b1580611beb5750611be9611fdc565b155b15611c0857611c01670de0b6b3a76400006126b7565b9050610ede565b600254611c13611fdc565b611c2590670de0b6b3a7640000614e09565b610f789190614cd5565b600e54604051639f2b283360e01b81526001600160a01b0383811660048301526000921690639f2b2833906024015b60206040518083038186803b158015611c7657600080fd5b505afa158015611c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cae9190614a05565b92915050565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015611d365760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c16565b611d4533856113288685614e28565b5060019392505050565b6000610eee338484612d09565b600e546040805163b49a60bb60e01b815290516060926001600160a01b03169163b49a60bb916004808301926000929190829003018186803b158015610f3c57600080fd5b600e54604051632d90c87b60e21b81526001600160a01b038381166004830152600092169063b64321ec90602401611c5e565b600a546001600160a01b03163314611dfe5760405162461bcd60e51b8152600401610c1690614c62565b6001600160a01b038116611e545760405162461bcd60e51b815260206004820152601960248201527f70726f706f7365642d676f7665726e6f722d69732d7a65726f000000000000006044820152606401610c16565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6002600c541415611e995760405162461bcd60e51b8152600401610c1690614c0b565b6002600c55600b54600160a01b900460ff1615611ec85760405162461bcd60e51b8152600401610c1690614c42565b61141281613076565b600d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561137f57600080fd5b600a546001600160a01b03163314611f3f5760405162461bcd60e51b8152600401610c1690614c62565b604080518082019091526002815261031360f41b60208201526001600160a01b038216611f7f5760405162461bcd60e51b8152600401610c169190614b42565b506013546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3601380546001600160a01b0319166001600160a01b0392909216919091179055565b6000611fe6611ed1565b600e60009054906101000a90046001600160a01b03166001600160a01b031663fc7b9c186040518163ffffffff1660e01b815260040160206040518083038186803b15801561203457600080fd5b505afa158015612048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206c9190614a05565b610f789190614cbd565b834211156120c65760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610c16565b6001600160a01b0387811660008181526009602090815260408083205481517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a0840185905260c08085018a90528151808603909101815260e09094019052825192019190912090612151612f3c565b60405161190160f01b602082015260228101919091526042810183905260620160405160208183030381529060405280519060200120905060006121978288888861326b565b90508a6001600160a01b0316816001600160a01b0316146121fa5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610c16565b612205846001614cbd565b6001600160a01b038c166000908152600960205260409020556122298b8b8b612be4565b5050505050505050505050565b600e54604051636a9eee1360e11b81526001600160a01b038381166004830152600092169063d53ddc2690602401611c5e565b600a546001600160a01b031633146122935760405162461bcd60e51b8152600401610c1690614c62565b6013546040805180820190915260018152603760f81b6020820152906001600160a01b03166122d55760405162461bcd60e51b8152600401610c169190614b42565b50604080518082019091526002815261313160f01b60208201526127108211156123125760405162461bcd60e51b8152600401610c169190614b42565b5060145460408051918252602082018390527f2bf847f5692332004b0f69e0d84a8f85ed020bcf8573b3ede68afc92009965bf910160405180910390a1601455565b600e54604051633f89843760e11b8152336004820152602481018390526001600160a01b0390911690637f13086e906044015b600060405180830381600087803b1580156123a157600080fd5b505af1158015611af2573d6000803e3d6000fd5b6011546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561240657600080fd5b505afa15801561241a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243e91906148e8565b61245a5760405162461bcd60e51b8152600401610c1690614bc3565b600d546040805180820190915260018152600760fb1b6020820152906001600160a01b03838116911614156124a25760405162461bcd60e51b8152600401610c169190614b42565b506013546040805180820190915260018152603760f81b6020820152906001600160a01b03166124e55760405162461bcd60e51b8152600401610c169190614b42565b506013546040516370a0823160e01b815230600482015261257a916001600160a01b0390811691908416906370a082319060240160206040518083038186803b15801561253157600080fd5b505afa158015612545573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125699190614a05565b6001600160a01b0384169190612b43565b50565b600b54600160a81b900460ff16156125a75760405162461bcd60e51b8152600401610c1690614be9565b6002600c5414156125ca5760405162461bcd60e51b8152600401610c1690614c0b565b6002600c556016805460ff191660011790556125e581612de4565b506016805460ff191690556001600c55565b600b546001600160a01b031633146126515760405162461bcd60e51b815260206004820152601960248201527f6e6f742d7468652d70726f706f7365642d676f7665726e6f72000000000000006044820152606401610c16565b600b54600a546040516001600160a01b0392831692909116907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d090600090a3600b8054600a80546001600160a01b03199081166001600160a01b03841617909155169055565b600060155482611cae9190614cd5565b6011546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561271857600080fd5b505afa15801561272c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275091906148e8565b61276c5760405162461bcd60e51b8152600401610c1690614bc3565b611508613414565b600e5460408051631f8f738360e31b815290516000926001600160a01b03169163fc7b9c18916004808301926020929190829003018186803b15801561137f57600080fd5b6011546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561280a57600080fd5b505afa15801561281e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284291906148e8565b61285e5760405162461bcd60e51b8152600401610c1690614bc3565b61150861347b565b6002600c5414156128895760405162461bcd60e51b8152600401610c1690614c0b565b6002600c55600b54600160a81b900460ff16156128b85760405162461bcd60e51b8152600401610c1690614be9565b6010546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561290957600080fd5b505afa15801561291d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294191906148e8565b604051806040016040528060018152602001603560f81b815250906129795760405162461bcd60e51b8152600401610c169190614b42565b50611412816134f7565b600f546001600160a01b03161561257a57600f5460405163d279c19160e01b81526001600160a01b0383811660048301529091169063d279c19190602401612387565b6040805180820190915260018152603160f81b6020820152600090826129ff5760405162461bcd60e51b8152600401610c169190614b42565b506000612a0a611bcf565b612a1c84670de0b6b3a7640000614e09565b612a269190614cd5565b9050670de0b6b3a7640000612a39611bcf565b612a439083614e09565b612a4d9190614cd5565b8311612a595780611333565b611333816001614cbd565b6001600160a01b038216612aba5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610c16565b8060026000828254612acc9190614cbd565b90915550506001600160a01b03821660009081526020819052604081208054839290612af9908490614cbd565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6040516001600160a01b0383166024820152604481018290526110d790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526135c0565b6040516001600160a01b0380851660248301528316604482015260648101829052612bde9085906323b872dd60e01b90608401612b6f565b50505050565b6001600160a01b038316612c465760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c16565b6001600160a01b038216612ca75760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c16565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600f546001600160a01b031615612dd957600f5460405163632447c960e01b81526001600160a01b0385811660048301529091169063632447c990602401600060405180830381600087803b158015612d6157600080fd5b505af1158015612d75573d6000803e3d6000fd5b5050600f5460405163632447c960e01b81526001600160a01b038681166004830152909116925063632447c99150602401600060405180830381600087803b158015612dc057600080fd5b505af1158015612dd4573d6000803e3d6000fd5b505050505b6110d7838383613692565b601454612df957612df4816134f7565b61257a565b6040805180820190915260018152601960f91b602082015281612e2f5760405162461bcd60e51b8152600401610c169190614b42565b50612e3933610c4c565b600061271060145483612e4c9190614e09565b612e569190614cd5565b90506000612e648284614e28565b90506000612e718261386a565b90506000612e7e826129c6565b9050612e89836126b7565b612e92826126b7565b1015612ecf57601454612ea790612710614e28565b612eb361271083614e09565b612ebd9190614cd5565b9450612ec98186614e28565b93508092505b612eda335b846138dc565b612ef0336013546001600160a01b031686612d09565b612ef982613a2b565b50604080518681526020810184905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a25050505050565b6000600854461415612f515750600654610ede565b6007546040805180820190915260018152603160f81b602090910152611c01907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6613ac2565b600b54600160a01b900460ff16612fff5760405162461bcd60e51b815260206004820152600a6024820152691b9bdd0b5c185d5cd95960b21b6044820152606401610c16565b600b54600160a81b900460ff16156130295760405162461bcd60e51b8152600401610c1690614be9565b600b805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61307f33610c4c565b600061308a826129c6565b905061309582613b0b565b61309e33610cd0565b604080518281526020810184905233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a25050565b600b54600160a01b900460ff16156131075760405162461bcd60e51b8152600401610c1690614c42565b600b805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586130593390565b600554610100900460ff168061315b575060055460ff16155b6131775760405162461bcd60e51b8152600401610c1690614b75565b600554610100900460ff16158015613199576005805461ffff19166101011790555b604080518082019091526002815261031360f41b60208201526001600160a01b0384166131d95760405162461bcd60e51b8152600401610c169190614b42565b50604080518082019091526002815261031360f41b60208201526001600160a01b03831661321a5760405162461bcd60e51b8152600401610c169190614b42565b50613226868686613b23565b61322e613c9b565b61323782613d49565b600e80546001600160a01b0319166001600160a01b0385161790558015611994576005805461ff0019169055505050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156132e85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c16565b8360ff16601b14806132fd57508360ff16601c145b6133545760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610c16565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156133a8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661340b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610c16565b95945050505050565b600b54600160a81b900460ff161561343e5760405162461bcd60e51b8152600401610c1690614be9565b600b805461ffff60a01b191661010160a01b1790557f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a6130593390565b600b54600160a81b900460ff166134c35760405162461bcd60e51b815260206004820152600c60248201526b3737ba16b9b43aba3237bbb760a11b6044820152606401610c16565b600b805460ff60a81b191690557fece7583a70a505ef0e36d4dec768f5ae597713e09c26011022599ee01abdabfc33613059565b6040805180820190915260018152601960f91b60208201528161352d5760405162461bcd60e51b8152600401610c169190614b42565b5061353733610c4c565b60006135428261386a565b9050600061354f826129c6565b905061355a836126b7565b613563826126b7565b101561356d578092505b61357633612ed4565b61357f82613a2b565b50604080518481526020810184905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a2505050565b6000613615826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166140479092919063ffffffff16565b8051909150156110d7578080602001905181019061363391906148e8565b6110d75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c16565b6001600160a01b0383166136f65760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610c16565b6001600160a01b0382166137585760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610c16565b6001600160a01b038316600090815260208190526040902054818110156137d05760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c16565b6137da8282614e28565b6001600160a01b038086166000908152602081905260408082209390935590851681529081208054849290613810908490614cbd565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161385c91815260200190565b60405180910390a350505050565b600080670de0b6b3a764000061387e611bcf565b6138889085614e09565b6138929190614cd5565b9050600061389e611ed1565b9050808211156138c5576138ba6138b58284614e28565b614056565b6138c2611ed1565b90505b8181106138d257816138d4565b805b949350505050565b6001600160a01b03821661393c5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610c16565b6001600160a01b038216600090815260208190526040902054818110156139b05760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610c16565b6139ba8282614e28565b6001600160a01b038416600090815260208190526040812091909155600280548492906139e8908490614e28565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612cfc565b60165460009060ff1615613ab357604051632e1a7d4d60e01b81526004810183905273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290632e1a7d4d90602401600060405180830381600087803b158015613a8657600080fd5b505af1158015613a9a573d6000803e3d6000fd5b50505050613aae613aa83390565b836141ef565b613abe565b613abc82614308565b505b5090565b6040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b61257a33600d546001600160a01b0316903084612ba6565b600554610100900460ff1680613b3c575060055460ff16155b613b585760405162461bcd60e51b8152600401610c1690614b75565b600554610100900460ff16158015613b7a576005805461ffff19166101011790555b604080518082019091526002815261031360f41b60208201526001600160a01b038316613bba5760405162461bcd60e51b8152600401610c169190614b42565b50613bc484614321565b613bcd83614338565b613bd68461434b565b600d80546001600160a01b0319166001600160a01b0384169081179091556040805163313ce56760e01b815290516000929163313ce567916004808301926020929190829003018186803b158015613c2d57600080fd5b505afa158015613c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c659190614abd565b60ff169050613c75816012614e28565b613c8090600a614d3b565b601555508015612bde576005805461ff001916905550505050565b600554610100900460ff1680613cb4575060055460ff16155b613cd05760405162461bcd60e51b8152600401610c1690614b75565b600554610100900460ff16158015613cf2576005805461ffff19166101011790555b600a80546001600160a01b0319163390811790915560405181906000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a350801561257a576005805461ff001916905550565b601154604080518082019091526002815261189960f11b6020820152906001600160a01b031615613d8d5760405162461bcd60e51b8152600401610c169190614b42565b506000819050806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613dce57600080fd5b505af1158015613de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e06919061469c565b601060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613e6757600080fd5b505af1158015613e7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e9f919061469c565b601160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613f0057600080fd5b505af1158015613f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f38919061469c565b601280546001600160a01b0319166001600160a01b0392831617905560115416630a3b0a4f613f643390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b158015613fa557600080fd5b505af1158015613fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fdd91906148e8565b60405180604001604052806002815260200161313360f01b815250906140165760405162461bcd60e51b8152600401610c169190614b42565b50601254604051630a3b0a4f60e01b81523360048201526001600160a01b0390911690630a3b0a4f9060240161104c565b60606138d484846000856143ca565b6000808080848180614066610ef7565b805190915060005b818110156141e357600083828151811061409857634e487b7160e01b600052603260045260246000fd5b602002602001015190506140ab81611c2f565b9950896140b857506141d1565b898611156140c4578995505b6140cc611ed1565b604051632e1a7d4d60e01b8152600481018890529098506001600160a01b03821690632e1a7d4d90602401600060405180830381600087803b15801561411157600080fd5b505af1925050508015614122575060015b61412c57506141d1565b614134611ed1565b9850614140888a614e28565b600e54604051632fb9ba3160e01b81526001600160a01b03848116600483015260248201849052929950911690632fb9ba3190604401600060405180830381600087803b15801561419057600080fd5b505af11580156141a4573d6000803e3d6000fd5b5050505086856141b49190614cbd565b94508a85106141c357506141e3565b6141cd858c614e28565b9550505b806141db81614ea6565b91505061406e565b50505050505050505050565b8047101561423f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610c16565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461428c576040519150601f19603f3d011682016040523d82523d6000602084013e614291565b606091505b50509050806110d75760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610c16565b6000613abe33600d546001600160a01b03169084612b43565b805161433490600390602084019061452b565b5050565b805161433490600490602084019061452b565b80516020808301919091206007819055466008556040805180820190915260018152603160f81b9201919091526143c4907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6613ac2565b60065550565b60608247101561442b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610c16565b843b6144795760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c16565b600080866001600160a01b031685876040516144959190614ad9565b60006040518083038185875af1925050503d80600081146144d2576040519150601f19603f3d011682016040523d82523d6000602084013e6144d7565b606091505b50915091506144e78282866144f2565b979650505050505050565b60608315614501575081611333565b8251156145115782518084602001fd5b8160405162461bcd60e51b8152600401610c169190614b42565b82805461453790614e6b565b90600052602060002090601f016020900481019282614559576000855561459f565b82601f1061457257805160ff191683800117855561459f565b8280016001018555821561459f579182015b8281111561459f578251825591602001919060010190614584565b50613abe9291505b80821115613abe57600081556001016145a7565b60008083601f8401126145cc578182fd5b50813567ffffffffffffffff8111156145e3578182fd5b6020830191508360208260051b85010111156145fe57600080fd5b9250929050565b805180151581146119b657600080fd5b600082601f830112614625578081fd5b813567ffffffffffffffff81111561463f5761463f614ed7565b614652601f8201601f1916602001614c8c565b818152846020838601011115614666578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215614691578081fd5b813561133381614eed565b6000602082840312156146ad578081fd5b815161133381614eed565b600080604083850312156146ca578081fd5b82356146d581614eed565b915060208301356146e581614eed565b809150509250929050565b600080600060608486031215614704578081fd5b833561470f81614eed565b9250602084013561471f81614eed565b929592945050506040919091013590565b600080600080600080600060e0888a03121561474a578283fd5b873561475581614eed565b9650602088013561476581614eed565b95506040880135945060608801359350608088013561478381614f02565b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156147b2578182fd5b82356147bd81614eed565b946020939093013593505050565b600080600080604085870312156147e0578384fd5b843567ffffffffffffffff808211156147f7578586fd5b614803888389016145bb565b9096509450602087013591508082111561481b578384fd5b50614828878288016145bb565b95989497509550505050565b60006020808385031215614846578182fd5b825167ffffffffffffffff8082111561485d578384fd5b818501915085601f830112614870578384fd5b81518181111561488257614882614ed7565b8060051b9150614893848301614c8c565b8181528481019084860184860187018a10156148ad578788fd5b8795505b838610156148db57805194506148c685614eed565b848352600195909501949186019186016148b1565b5098975050505050505050565b6000602082840312156148f9578081fd5b61133382614605565b600080600080600080600080610100898b03121561491e578182fd5b61492789614605565b97506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915060e089015190509295985092959890939650565b6000806000806080858703121561497c578182fd5b843567ffffffffffffffff80821115614993578384fd5b61499f88838901614615565b955060208701359150808211156149b4578384fd5b506149c187828801614615565b93505060408501356149d281614eed565b915060608501356149e281614eed565b939692955090935050565b6000602082840312156149fe578081fd5b5035919050565b600060208284031215614a16578081fd5b5051919050565b600080600060608486031215614a31578081fd5b505081359360208301359350604090920135919050565b600080600060608486031215614a5c578081fd5b8351925060208401519150604084015190509250925092565b600080600080600060a08688031215614a8c578283fd5b85359450602086013593506040860135614aa581614f02565b94979396509394606081013594506080013592915050565b600060208284031215614ace578081fd5b815161133381614f02565b60008251614aeb818460208701614e3f565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015614b365783516001600160a01b031683529284019291840191600101614b11565b50909695505050505050565b6000602082528251806020840152614b61816040850160208701614e3f565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600c908201526b3737ba16b096b5b2b2b832b960a11b604082015260600190565b60208082526008908201526739b43aba3237bbb760c11b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600690820152651c185d5cd95960d21b604082015260600190565b60208082526010908201526f3737ba16ba343296b3b7bb32b93737b960811b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715614cb557614cb5614ed7565b604052919050565b60008219821115614cd057614cd0614ec1565b500190565b600082614cf057634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611614d075750614d32565b818704821115614d1957614d19614ec1565b80861615614d2657918102915b9490941c938002614cf8565b94509492505050565b60006113336000198484600082614d5457506001611333565b81614d6157506000611333565b8160018114614d775760028114614d8157614dae565b6001915050611333565b60ff841115614d9257614d92614ec1565b6001841b915084821115614da857614da8614ec1565b50611333565b5060208310610133831016604e8410600b8410161715614de1575081810a83811115614ddc57614ddc614ec1565b611333565b614dee8484846001614cf5565b808604821115614e0057614e00614ec1565b02949350505050565b6000816000190483118215151615614e2357614e23614ec1565b500290565b600082821015614e3a57614e3a614ec1565b500390565b60005b83811015614e5a578181015183820152602001614e42565b83811115612bde5750506000910152565b600181811c90821680614e7f57607f821691505b60208210811415614ea057634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614eba57614eba614ec1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461257a57600080fd5b60ff8116811461257a57600080fdfea2646970667358221220d5989cca2c94746d242d9687341c6e14814ce73f9522b7042bcc52d079a04bbd64736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106103c75760003560e01c80639f2b2833116101f2578063daf635de1161010d578063fc0c546a116100a0578063fcfff16f1161006f578063fcfff16f14610b70578063fd967f4714610b85578063ff643a7c14610b9b578063ffa1ad7414610bbb576103f1565b8063fc0c546a14610b06578063fc0e74d114610b26578063fc76781014610b3b578063fc7b9c1814610b5b576103f1565b8063e941fa78116100dc578063e941fa7814610a9b578063f14210a614610ab1578063f3b27bc314610ad1578063fb589de214610ae6576103f1565b8063daf635de146109f5578063dd62ed3e14610a15578063ddd6d26014610a5b578063e00af4a714610a7b576103f1565b8063b8cb343d11610185578063d2c35ce811610154578063d2c35ce814610980578063d4c3eea0146109a0578063d505accf146109b5578063d53ddc26146109d5576103f1565b8063b8cb343d14610923578063c12d636b14610938578063c415b95c14610958578063d0e30db014610978576103f1565b8063b49a60bb116101c1578063b49a60bb146108ae578063b64321ec146108c3578063b6aa515b146108e3578063b6b55f2514610903576103f1565b80639f2b283314610826578063a457c2d714610846578063a9059cbb14610866578063ad5c464814610886576103f1565b80634938649a116102e25780638456cb5911610275578063940c408211610244578063940c4082146107bc578063951dc22c146107dc57806395d89b41146107fc57806399530b0614610811576103f1565b80638456cb59146107515780638bc6beb2146107665780638f15b414146107865780638fe91ffb146107a6576103f1565b806367187d3d116102b157806367187d3d146106c45780636cb56d19146106e457806370a08231146107045780637ecebe0014610724576103f1565b80634938649a1461064257806349eeb860146106635780634a970be7146106835780635c975abb146106a3576103f1565b8063228bfd9f1161035a578063313ce56711610329578063313ce567146105dc5780633644e515146105f8578063395093511461060d5780633f4ba83a1461062d576103f1565b8063228bfd9f1461052a57806323b872dd146105875780632df9eab9146105a75780632e1a7d4d146105bc576103f1565b8063111830521161039657806311183052146104a957806318160ddd146104cb5780631e751ac1146104ea5780631e89d5451461050a576103f1565b806305bed046146103f657806306fdde0314610416578063095ea7b3146104415780630c340a2414610471576103f1565b366103f1573373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2146103ef576103ef610bec565b005b600080fd5b34801561040257600080fd5b506103ef610411366004614a1d565b610d18565b34801561042257600080fd5b5061042b610e4e565b6040516104389190614b42565b60405180910390f35b34801561044d57600080fd5b5061046161045c3660046147a0565b610ee1565b6040519015158152602001610438565b34801561047d57600080fd5b50600a54610491906001600160a01b031681565b6040516001600160a01b039091168152602001610438565b3480156104b557600080fd5b506104be610ef7565b6040516104389190614af5565b3480156104d757600080fd5b506002545b604051908152602001610438565b3480156104f657600080fd5b506103ef6105053660046146b8565b610f7d565b34801561051657600080fd5b506104616105253660046147cb565b6110dc565b34801561053657600080fd5b5061054a610545366004614680565b6111de565b6040805198151589526020890197909752958701949094526060860192909252608085015260a084015260c083015260e082015261010001610438565b34801561059357600080fd5b506104616105a23660046146f0565b611287565b3480156105b357600080fd5b506104dc61133a565b3480156105c857600080fd5b506103ef6105d73660046149ed565b6113b7565b3480156105e857600080fd5b5060405160128152602001610438565b34801561060457600080fd5b506104dc61141a565b34801561061957600080fd5b506104616106283660046147a0565b611424565b34801561063957600080fd5b506103ef61145b565b34801561064e57600080fd5b50600b5461046190600160a81b900460ff1681565b34801561066f57600080fd5b50601254610491906001600160a01b031681565b34801561068f57600080fd5b506103ef61069e366004614a75565b61150a565b3480156106af57600080fd5b50600b5461046190600160a01b900460ff1681565b3480156106d057600080fd5b506103ef6106df3660046146b8565b611607565b3480156106f057600080fd5b506103ef6106ff3660046146b8565b611760565b34801561071057600080fd5b506104dc61071f366004614680565b61199c565b34801561073057600080fd5b506104dc61073f366004614680565b60096020526000908152604090205481565b34801561075d57600080fd5b506103ef6119bb565b34801561077257600080fd5b50600f54610491906001600160a01b031681565b34801561079257600080fd5b506103ef6107a1366004614967565b611a68565b3480156107b257600080fd5b506104dc60155481565b3480156107c857600080fd5b506103ef6107d7366004614680565b611af9565b3480156107e857600080fd5b50601154610491906001600160a01b031681565b34801561080857600080fd5b5061042b611bc0565b34801561081d57600080fd5b506104dc611bcf565b34801561083257600080fd5b506104dc610841366004614680565b611c2f565b34801561085257600080fd5b506104616108613660046147a0565b611cb4565b34801561087257600080fd5b506104616108813660046147a0565b611d4f565b34801561089257600080fd5b5061049173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b3480156108ba57600080fd5b506104be611d5c565b3480156108cf57600080fd5b506104dc6108de366004614680565b611da1565b3480156108ef57600080fd5b506103ef6108fe366004614680565b611dd4565b34801561090f57600080fd5b506103ef61091e3660046149ed565b611e76565b34801561092f57600080fd5b506104dc611ed1565b34801561094457600080fd5b50600e54610491906001600160a01b031681565b34801561096457600080fd5b50601354610491906001600160a01b031681565b6103ef610bec565b34801561098c57600080fd5b506103ef61099b366004614680565b611f15565b3480156109ac57600080fd5b506104dc611fdc565b3480156109c157600080fd5b506103ef6109d0366004614730565b612076565b3480156109e157600080fd5b506104dc6109f0366004614680565b612236565b348015610a0157600080fd5b506103ef610a103660046149ed565b612269565b348015610a2157600080fd5b506104dc610a303660046146b8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b348015610a6757600080fd5b506103ef610a763660046149ed565b612354565b348015610a8757600080fd5b506103ef610a96366004614680565b6123b5565b348015610aa757600080fd5b506104dc60145481565b348015610abd57600080fd5b506103ef610acc3660046149ed565b61257d565b348015610add57600080fd5b506103ef6125f7565b348015610af257600080fd5b506104dc610b013660046149ed565b6126b7565b348015610b1257600080fd5b50600d54610491906001600160a01b031681565b348015610b3257600080fd5b506103ef6126c7565b348015610b4757600080fd5b50601054610491906001600160a01b031681565b348015610b6757600080fd5b506104dc612774565b348015610b7c57600080fd5b506103ef6127b9565b348015610b9157600080fd5b506104dc61271081565b348015610ba757600080fd5b506103ef610bb63660046149ed565b612866565b348015610bc757600080fd5b5061042b60405180604001604052806005815260200164332e302e3360d81b81525081565b600b54600160a01b900460ff1615610c1f5760405162461bcd60e51b8152600401610c1690614c42565b60405180910390fd5b6002600c541415610c425760405162461bcd60e51b8152600401610c1690614c0b565b6002600c55610c51335b612983565b6000610c5c346129c6565b905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610cad57600080fd5b505af1158015610cc1573d6000803e3d6000fd5b5050505050610cd6610cd03390565b82612a64565b6040805182815234602082015233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a2506001600c55565b600e54600090819081906001600160a01b031663a066654b336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018990526044810188905260648101879052608401606060405180830381600087803b158015610d8757600080fd5b505af1158015610d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbf9190614a48565b919450925090506000610dd28488614cbd565b905082811015610e0257610dfd33610dea8386614e28565b600d546001600160a01b03169190612b43565b610e2d565b82811115610e2d57610e2d3330610e198685614e28565b600d546001600160a01b0316929190612ba6565b8115610e4557610e4533610e40846129c6565b612a64565b50505050505050565b606060038054610e5d90614e6b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8990614e6b565b8015610ed65780601f10610eab57610100808354040283529160200191610ed6565b820191906000526020600020905b815481529060010190602001808311610eb957829003601f168201915b505050505090505b90565b6000610eee338484612be4565b50600192915050565b600e546040805163088c182960e11b815290516060926001600160a01b0316916311183052916004808301926000929190829003018186803b158015610f3c57600080fd5b505afa158015610f50573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f789190810190614834565b905090565b6011546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610fce57600080fd5b505afa158015610fe2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100691906148e8565b6110225760405162461bcd60e51b8152600401610c1690614bc3565b604051630a3b0a4f60e01b81526001600160a01b038281166004830152831690630a3b0a4f906024015b602060405180830381600087803b15801561106657600080fd5b505af115801561107a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109e91906148e8565b60405180604001604052806002815260200161313360f01b815250906110d75760405162461bcd60e51b8152600401610c169190614b42565b505050565b6040805180820190915260018152600d60fa1b60208201526000908483146111175760405162461bcd60e51b8152600401610c169190614b42565b5060005b848110156111d25761118786868381811061114657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061115b9190614680565b85858481811061117b57634e487b7160e01b600052603260045260246000fd5b90506020020135611d4f565b604051806040016040528060018152602001601b60f91b815250906111bf5760405162461bcd60e51b8152600401610c169190614b42565b50806111ca81614ea6565b91505061111b565b50600195945050505050565b600e5460405163228bfd9f60e01b81526001600160a01b038381166004830152600092839283928392839283928392839291169063228bfd9f906024016101006040518083038186803b15801561123457600080fd5b505afa158015611248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126c9190614902565b97509750975097509750975097509750919395975091939597565b6000611294848484612d09565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156113195760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610c16565b61132d85336113288685614e28565b612be4565b60019150505b9392505050565b600e5460408051632df9eab960e01b815290516000926001600160a01b031691632df9eab9916004808301926020929190829003018186803b15801561137f57600080fd5b505afa158015611393573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f789190614a05565b6002600c5414156113da5760405162461bcd60e51b8152600401610c1690614c0b565b6002600c55600b54600160a81b900460ff16156114095760405162461bcd60e51b8152600401610c1690614be9565b61141281612de4565b506001600c55565b6000610f78612f3c565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610eee918590611328908690614cbd565b6011546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156114ac57600080fd5b505afa1580156114c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e491906148e8565b6115005760405162461bcd60e51b8152600401610c1690614bc3565b611508612fb9565b565b6002600c54141561152d5760405162461bcd60e51b8152600401610c1690614c0b565b6002600c55600b54600160a01b900460ff161561155c5760405162461bcd60e51b8152600401610c1690614c42565b600d546001600160a01b031663d505accf336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018890526064810187905260ff8616608482015260a4810185905260c4810184905260e401600060405180830381600087803b1580156115da57600080fd5b505af11580156115ee573d6000803e3d6000fd5b505050506115fb85613076565b50506001600c55505050565b6011546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561165857600080fd5b505afa15801561166c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169091906148e8565b6116ac5760405162461bcd60e51b8152600401610c1690614bc3565b604051631484968760e11b81526001600160a01b0382811660048301528316906329092d0e90602401602060405180830381600087803b1580156116ef57600080fd5b505af1158015611703573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172791906148e8565b604051806040016040528060028152602001610c4d60f21b815250906110d75760405162461bcd60e51b8152600401610c169190614b42565b600a546001600160a01b0316331461178a5760405162461bcd60e51b8152600401610c1690614c62565b306001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117cd57600080fd5b505afa1580156117e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611805919061469c565b6001600160a01b031614801561189c5750306001600160a01b0316826001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561185957600080fd5b505afa15801561186d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611891919061469c565b6001600160a01b0316145b60405180604001604052806002815260200161313760f01b815250906118d55760405162461bcd60e51b8152600401610c169190614b42565b50600e54604051636cb56d1960e01b81526001600160a01b038481166004830152838116602483015290911690636cb56d1990604401600060405180830381600087803b15801561192557600080fd5b505af1158015611939573d6000803e3d6000fd5b505060405163ce5494bb60e01b81526001600160a01b0384811660048301528516925063ce5494bb9150602401600060405180830381600087803b15801561198057600080fd5b505af1158015611994573d6000803e3d6000fd5b505050505050565b6001600160a01b0381166000908152602081905260409020545b919050565b6011546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611a0c57600080fd5b505afa158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4491906148e8565b611a605760405162461bcd60e51b8152600401610c1690614bc3565b6115086130dd565b600554610100900460ff1680611a81575060055460ff16155b611a9d5760405162461bcd60e51b8152600401610c1690614b75565b600554610100900460ff16158015611abf576005805461ffff19166101011790555b611ae0858573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28686613142565b8015611af2576005805461ff00191690555b5050505050565b600a546001600160a01b03163314611b235760405162461bcd60e51b8152600401610c1690614c62565b604080518082019091526002815261031360f41b60208201526001600160a01b038216611b635760405162461bcd60e51b8152600401610c169190614b42565b50600f546040516001600160a01b038084169216907fe239974dad08ac696e723caf1886bd0b5afc0870088f9a1266082757f824927690600090a3600f80546001600160a01b0319166001600160a01b0392909216919091179055565b606060048054610e5d90614e6b565b6000611bda60025490565b1580611beb5750611be9611fdc565b155b15611c0857611c01670de0b6b3a76400006126b7565b9050610ede565b600254611c13611fdc565b611c2590670de0b6b3a7640000614e09565b610f789190614cd5565b600e54604051639f2b283360e01b81526001600160a01b0383811660048301526000921690639f2b2833906024015b60206040518083038186803b158015611c7657600080fd5b505afa158015611c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cae9190614a05565b92915050565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015611d365760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c16565b611d4533856113288685614e28565b5060019392505050565b6000610eee338484612d09565b600e546040805163b49a60bb60e01b815290516060926001600160a01b03169163b49a60bb916004808301926000929190829003018186803b158015610f3c57600080fd5b600e54604051632d90c87b60e21b81526001600160a01b038381166004830152600092169063b64321ec90602401611c5e565b600a546001600160a01b03163314611dfe5760405162461bcd60e51b8152600401610c1690614c62565b6001600160a01b038116611e545760405162461bcd60e51b815260206004820152601960248201527f70726f706f7365642d676f7665726e6f722d69732d7a65726f000000000000006044820152606401610c16565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6002600c541415611e995760405162461bcd60e51b8152600401610c1690614c0b565b6002600c55600b54600160a01b900460ff1615611ec85760405162461bcd60e51b8152600401610c1690614c42565b61141281613076565b600d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561137f57600080fd5b600a546001600160a01b03163314611f3f5760405162461bcd60e51b8152600401610c1690614c62565b604080518082019091526002815261031360f41b60208201526001600160a01b038216611f7f5760405162461bcd60e51b8152600401610c169190614b42565b506013546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3601380546001600160a01b0319166001600160a01b0392909216919091179055565b6000611fe6611ed1565b600e60009054906101000a90046001600160a01b03166001600160a01b031663fc7b9c186040518163ffffffff1660e01b815260040160206040518083038186803b15801561203457600080fd5b505afa158015612048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206c9190614a05565b610f789190614cbd565b834211156120c65760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610c16565b6001600160a01b0387811660008181526009602090815260408083205481517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a0840185905260c08085018a90528151808603909101815260e09094019052825192019190912090612151612f3c565b60405161190160f01b602082015260228101919091526042810183905260620160405160208183030381529060405280519060200120905060006121978288888861326b565b90508a6001600160a01b0316816001600160a01b0316146121fa5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610c16565b612205846001614cbd565b6001600160a01b038c166000908152600960205260409020556122298b8b8b612be4565b5050505050505050505050565b600e54604051636a9eee1360e11b81526001600160a01b038381166004830152600092169063d53ddc2690602401611c5e565b600a546001600160a01b031633146122935760405162461bcd60e51b8152600401610c1690614c62565b6013546040805180820190915260018152603760f81b6020820152906001600160a01b03166122d55760405162461bcd60e51b8152600401610c169190614b42565b50604080518082019091526002815261313160f01b60208201526127108211156123125760405162461bcd60e51b8152600401610c169190614b42565b5060145460408051918252602082018390527f2bf847f5692332004b0f69e0d84a8f85ed020bcf8573b3ede68afc92009965bf910160405180910390a1601455565b600e54604051633f89843760e11b8152336004820152602481018390526001600160a01b0390911690637f13086e906044015b600060405180830381600087803b1580156123a157600080fd5b505af1158015611af2573d6000803e3d6000fd5b6011546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561240657600080fd5b505afa15801561241a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243e91906148e8565b61245a5760405162461bcd60e51b8152600401610c1690614bc3565b600d546040805180820190915260018152600760fb1b6020820152906001600160a01b03838116911614156124a25760405162461bcd60e51b8152600401610c169190614b42565b506013546040805180820190915260018152603760f81b6020820152906001600160a01b03166124e55760405162461bcd60e51b8152600401610c169190614b42565b506013546040516370a0823160e01b815230600482015261257a916001600160a01b0390811691908416906370a082319060240160206040518083038186803b15801561253157600080fd5b505afa158015612545573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125699190614a05565b6001600160a01b0384169190612b43565b50565b600b54600160a81b900460ff16156125a75760405162461bcd60e51b8152600401610c1690614be9565b6002600c5414156125ca5760405162461bcd60e51b8152600401610c1690614c0b565b6002600c556016805460ff191660011790556125e581612de4565b506016805460ff191690556001600c55565b600b546001600160a01b031633146126515760405162461bcd60e51b815260206004820152601960248201527f6e6f742d7468652d70726f706f7365642d676f7665726e6f72000000000000006044820152606401610c16565b600b54600a546040516001600160a01b0392831692909116907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d090600090a3600b8054600a80546001600160a01b03199081166001600160a01b03841617909155169055565b600060155482611cae9190614cd5565b6011546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561271857600080fd5b505afa15801561272c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275091906148e8565b61276c5760405162461bcd60e51b8152600401610c1690614bc3565b611508613414565b600e5460408051631f8f738360e31b815290516000926001600160a01b03169163fc7b9c18916004808301926020929190829003018186803b15801561137f57600080fd5b6011546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561280a57600080fd5b505afa15801561281e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284291906148e8565b61285e5760405162461bcd60e51b8152600401610c1690614bc3565b61150861347b565b6002600c5414156128895760405162461bcd60e51b8152600401610c1690614c0b565b6002600c55600b54600160a81b900460ff16156128b85760405162461bcd60e51b8152600401610c1690614be9565b6010546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561290957600080fd5b505afa15801561291d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294191906148e8565b604051806040016040528060018152602001603560f81b815250906129795760405162461bcd60e51b8152600401610c169190614b42565b50611412816134f7565b600f546001600160a01b03161561257a57600f5460405163d279c19160e01b81526001600160a01b0383811660048301529091169063d279c19190602401612387565b6040805180820190915260018152603160f81b6020820152600090826129ff5760405162461bcd60e51b8152600401610c169190614b42565b506000612a0a611bcf565b612a1c84670de0b6b3a7640000614e09565b612a269190614cd5565b9050670de0b6b3a7640000612a39611bcf565b612a439083614e09565b612a4d9190614cd5565b8311612a595780611333565b611333816001614cbd565b6001600160a01b038216612aba5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610c16565b8060026000828254612acc9190614cbd565b90915550506001600160a01b03821660009081526020819052604081208054839290612af9908490614cbd565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6040516001600160a01b0383166024820152604481018290526110d790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526135c0565b6040516001600160a01b0380851660248301528316604482015260648101829052612bde9085906323b872dd60e01b90608401612b6f565b50505050565b6001600160a01b038316612c465760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c16565b6001600160a01b038216612ca75760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c16565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600f546001600160a01b031615612dd957600f5460405163632447c960e01b81526001600160a01b0385811660048301529091169063632447c990602401600060405180830381600087803b158015612d6157600080fd5b505af1158015612d75573d6000803e3d6000fd5b5050600f5460405163632447c960e01b81526001600160a01b038681166004830152909116925063632447c99150602401600060405180830381600087803b158015612dc057600080fd5b505af1158015612dd4573d6000803e3d6000fd5b505050505b6110d7838383613692565b601454612df957612df4816134f7565b61257a565b6040805180820190915260018152601960f91b602082015281612e2f5760405162461bcd60e51b8152600401610c169190614b42565b50612e3933610c4c565b600061271060145483612e4c9190614e09565b612e569190614cd5565b90506000612e648284614e28565b90506000612e718261386a565b90506000612e7e826129c6565b9050612e89836126b7565b612e92826126b7565b1015612ecf57601454612ea790612710614e28565b612eb361271083614e09565b612ebd9190614cd5565b9450612ec98186614e28565b93508092505b612eda335b846138dc565b612ef0336013546001600160a01b031686612d09565b612ef982613a2b565b50604080518681526020810184905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a25050505050565b6000600854461415612f515750600654610ede565b6007546040805180820190915260018152603160f81b602090910152611c01907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6613ac2565b600b54600160a01b900460ff16612fff5760405162461bcd60e51b815260206004820152600a6024820152691b9bdd0b5c185d5cd95960b21b6044820152606401610c16565b600b54600160a81b900460ff16156130295760405162461bcd60e51b8152600401610c1690614be9565b600b805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61307f33610c4c565b600061308a826129c6565b905061309582613b0b565b61309e33610cd0565b604080518281526020810184905233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a25050565b600b54600160a01b900460ff16156131075760405162461bcd60e51b8152600401610c1690614c42565b600b805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586130593390565b600554610100900460ff168061315b575060055460ff16155b6131775760405162461bcd60e51b8152600401610c1690614b75565b600554610100900460ff16158015613199576005805461ffff19166101011790555b604080518082019091526002815261031360f41b60208201526001600160a01b0384166131d95760405162461bcd60e51b8152600401610c169190614b42565b50604080518082019091526002815261031360f41b60208201526001600160a01b03831661321a5760405162461bcd60e51b8152600401610c169190614b42565b50613226868686613b23565b61322e613c9b565b61323782613d49565b600e80546001600160a01b0319166001600160a01b0385161790558015611994576005805461ff0019169055505050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156132e85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c16565b8360ff16601b14806132fd57508360ff16601c145b6133545760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610c16565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156133a8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661340b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610c16565b95945050505050565b600b54600160a81b900460ff161561343e5760405162461bcd60e51b8152600401610c1690614be9565b600b805461ffff60a01b191661010160a01b1790557f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a6130593390565b600b54600160a81b900460ff166134c35760405162461bcd60e51b815260206004820152600c60248201526b3737ba16b9b43aba3237bbb760a11b6044820152606401610c16565b600b805460ff60a81b191690557fece7583a70a505ef0e36d4dec768f5ae597713e09c26011022599ee01abdabfc33613059565b6040805180820190915260018152601960f91b60208201528161352d5760405162461bcd60e51b8152600401610c169190614b42565b5061353733610c4c565b60006135428261386a565b9050600061354f826129c6565b905061355a836126b7565b613563826126b7565b101561356d578092505b61357633612ed4565b61357f82613a2b565b50604080518481526020810184905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a2505050565b6000613615826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166140479092919063ffffffff16565b8051909150156110d7578080602001905181019061363391906148e8565b6110d75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c16565b6001600160a01b0383166136f65760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610c16565b6001600160a01b0382166137585760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610c16565b6001600160a01b038316600090815260208190526040902054818110156137d05760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c16565b6137da8282614e28565b6001600160a01b038086166000908152602081905260408082209390935590851681529081208054849290613810908490614cbd565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161385c91815260200190565b60405180910390a350505050565b600080670de0b6b3a764000061387e611bcf565b6138889085614e09565b6138929190614cd5565b9050600061389e611ed1565b9050808211156138c5576138ba6138b58284614e28565b614056565b6138c2611ed1565b90505b8181106138d257816138d4565b805b949350505050565b6001600160a01b03821661393c5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610c16565b6001600160a01b038216600090815260208190526040902054818110156139b05760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610c16565b6139ba8282614e28565b6001600160a01b038416600090815260208190526040812091909155600280548492906139e8908490614e28565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612cfc565b60165460009060ff1615613ab357604051632e1a7d4d60e01b81526004810183905273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290632e1a7d4d90602401600060405180830381600087803b158015613a8657600080fd5b505af1158015613a9a573d6000803e3d6000fd5b50505050613aae613aa83390565b836141ef565b613abe565b613abc82614308565b505b5090565b6040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b61257a33600d546001600160a01b0316903084612ba6565b600554610100900460ff1680613b3c575060055460ff16155b613b585760405162461bcd60e51b8152600401610c1690614b75565b600554610100900460ff16158015613b7a576005805461ffff19166101011790555b604080518082019091526002815261031360f41b60208201526001600160a01b038316613bba5760405162461bcd60e51b8152600401610c169190614b42565b50613bc484614321565b613bcd83614338565b613bd68461434b565b600d80546001600160a01b0319166001600160a01b0384169081179091556040805163313ce56760e01b815290516000929163313ce567916004808301926020929190829003018186803b158015613c2d57600080fd5b505afa158015613c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c659190614abd565b60ff169050613c75816012614e28565b613c8090600a614d3b565b601555508015612bde576005805461ff001916905550505050565b600554610100900460ff1680613cb4575060055460ff16155b613cd05760405162461bcd60e51b8152600401610c1690614b75565b600554610100900460ff16158015613cf2576005805461ffff19166101011790555b600a80546001600160a01b0319163390811790915560405181906000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a350801561257a576005805461ff001916905550565b601154604080518082019091526002815261189960f11b6020820152906001600160a01b031615613d8d5760405162461bcd60e51b8152600401610c169190614b42565b506000819050806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613dce57600080fd5b505af1158015613de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e06919061469c565b601060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613e6757600080fd5b505af1158015613e7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e9f919061469c565b601160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613f0057600080fd5b505af1158015613f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f38919061469c565b601280546001600160a01b0319166001600160a01b0392831617905560115416630a3b0a4f613f643390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b158015613fa557600080fd5b505af1158015613fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fdd91906148e8565b60405180604001604052806002815260200161313360f01b815250906140165760405162461bcd60e51b8152600401610c169190614b42565b50601254604051630a3b0a4f60e01b81523360048201526001600160a01b0390911690630a3b0a4f9060240161104c565b60606138d484846000856143ca565b6000808080848180614066610ef7565b805190915060005b818110156141e357600083828151811061409857634e487b7160e01b600052603260045260246000fd5b602002602001015190506140ab81611c2f565b9950896140b857506141d1565b898611156140c4578995505b6140cc611ed1565b604051632e1a7d4d60e01b8152600481018890529098506001600160a01b03821690632e1a7d4d90602401600060405180830381600087803b15801561411157600080fd5b505af1925050508015614122575060015b61412c57506141d1565b614134611ed1565b9850614140888a614e28565b600e54604051632fb9ba3160e01b81526001600160a01b03848116600483015260248201849052929950911690632fb9ba3190604401600060405180830381600087803b15801561419057600080fd5b505af11580156141a4573d6000803e3d6000fd5b5050505086856141b49190614cbd565b94508a85106141c357506141e3565b6141cd858c614e28565b9550505b806141db81614ea6565b91505061406e565b50505050505050505050565b8047101561423f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610c16565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461428c576040519150601f19603f3d011682016040523d82523d6000602084013e614291565b606091505b50509050806110d75760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610c16565b6000613abe33600d546001600160a01b03169084612b43565b805161433490600390602084019061452b565b5050565b805161433490600490602084019061452b565b80516020808301919091206007819055466008556040805180820190915260018152603160f81b9201919091526143c4907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6613ac2565b60065550565b60608247101561442b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610c16565b843b6144795760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c16565b600080866001600160a01b031685876040516144959190614ad9565b60006040518083038185875af1925050503d80600081146144d2576040519150601f19603f3d011682016040523d82523d6000602084013e6144d7565b606091505b50915091506144e78282866144f2565b979650505050505050565b60608315614501575081611333565b8251156145115782518084602001fd5b8160405162461bcd60e51b8152600401610c169190614b42565b82805461453790614e6b565b90600052602060002090601f016020900481019282614559576000855561459f565b82601f1061457257805160ff191683800117855561459f565b8280016001018555821561459f579182015b8281111561459f578251825591602001919060010190614584565b50613abe9291505b80821115613abe57600081556001016145a7565b60008083601f8401126145cc578182fd5b50813567ffffffffffffffff8111156145e3578182fd5b6020830191508360208260051b85010111156145fe57600080fd5b9250929050565b805180151581146119b657600080fd5b600082601f830112614625578081fd5b813567ffffffffffffffff81111561463f5761463f614ed7565b614652601f8201601f1916602001614c8c565b818152846020838601011115614666578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215614691578081fd5b813561133381614eed565b6000602082840312156146ad578081fd5b815161133381614eed565b600080604083850312156146ca578081fd5b82356146d581614eed565b915060208301356146e581614eed565b809150509250929050565b600080600060608486031215614704578081fd5b833561470f81614eed565b9250602084013561471f81614eed565b929592945050506040919091013590565b600080600080600080600060e0888a03121561474a578283fd5b873561475581614eed565b9650602088013561476581614eed565b95506040880135945060608801359350608088013561478381614f02565b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156147b2578182fd5b82356147bd81614eed565b946020939093013593505050565b600080600080604085870312156147e0578384fd5b843567ffffffffffffffff808211156147f7578586fd5b614803888389016145bb565b9096509450602087013591508082111561481b578384fd5b50614828878288016145bb565b95989497509550505050565b60006020808385031215614846578182fd5b825167ffffffffffffffff8082111561485d578384fd5b818501915085601f830112614870578384fd5b81518181111561488257614882614ed7565b8060051b9150614893848301614c8c565b8181528481019084860184860187018a10156148ad578788fd5b8795505b838610156148db57805194506148c685614eed565b848352600195909501949186019186016148b1565b5098975050505050505050565b6000602082840312156148f9578081fd5b61133382614605565b600080600080600080600080610100898b03121561491e578182fd5b61492789614605565b97506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915060e089015190509295985092959890939650565b6000806000806080858703121561497c578182fd5b843567ffffffffffffffff80821115614993578384fd5b61499f88838901614615565b955060208701359150808211156149b4578384fd5b506149c187828801614615565b93505060408501356149d281614eed565b915060608501356149e281614eed565b939692955090935050565b6000602082840312156149fe578081fd5b5035919050565b600060208284031215614a16578081fd5b5051919050565b600080600060608486031215614a31578081fd5b505081359360208301359350604090920135919050565b600080600060608486031215614a5c578081fd5b8351925060208401519150604084015190509250925092565b600080600080600060a08688031215614a8c578283fd5b85359450602086013593506040860135614aa581614f02565b94979396509394606081013594506080013592915050565b600060208284031215614ace578081fd5b815161133381614f02565b60008251614aeb818460208701614e3f565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015614b365783516001600160a01b031683529284019291840191600101614b11565b50909695505050505050565b6000602082528251806020840152614b61816040850160208701614e3f565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600c908201526b3737ba16b096b5b2b2b832b960a11b604082015260600190565b60208082526008908201526739b43aba3237bbb760c11b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600690820152651c185d5cd95960d21b604082015260600190565b60208082526010908201526f3737ba16ba343296b3b7bb32b93737b960811b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715614cb557614cb5614ed7565b604052919050565b60008219821115614cd057614cd0614ec1565b500190565b600082614cf057634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611614d075750614d32565b818704821115614d1957614d19614ec1565b80861615614d2657918102915b9490941c938002614cf8565b94509492505050565b60006113336000198484600082614d5457506001611333565b81614d6157506000611333565b8160018114614d775760028114614d8157614dae565b6001915050611333565b60ff841115614d9257614d92614ec1565b6001841b915084821115614da857614da8614ec1565b50611333565b5060208310610133831016604e8410600b8410161715614de1575081810a83811115614ddc57614ddc614ec1565b611333565b614dee8484846001614cf5565b808604821115614e0057614e00614ec1565b02949350505050565b6000816000190483118215151615614e2357614e23614ec1565b500290565b600082821015614e3a57614e3a614ec1565b500390565b60005b83811015614e5a578181015183820152602001614e42565b83811115612bde5750506000910152565b600181811c90821680614e7f57607f821691505b60208210811415614ea057634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614eba57614eba614ec1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461257a57600080fd5b60ff8116811461257a57600080fdfea2646970667358221220d5989cca2c94746d242d9687341c6e14814ce73f9522b7042bcc52d079a04bbd64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "acceptGovernorship()": {
        "details": "Allows new governor to accept governorship of the contract."
      },
      "addInList(address,address)": {
        "details": "Use it to add keeper in keepers list and to add address in feeWhitelist",
        "params": {
          "_addressToAdd": "address which we want to add in AddressList.",
          "_listToUpdate": "address of AddressList contract."
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "availableCreditLimit(address)": {
        "details": "Available credit limit is calculated based on current debt of pool and strategy, current debt limit of pool and strategy. credit available = min(pool's debt limit, strategy's debt limit, max debt per rebalance) when some strategy do not pay back outstanding debt, this impact credit line of other strategy if totalDebt of pool >= debtLimit of pool",
        "params": {
          "_strategy": "Strategy address"
        }
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "convertFrom18(uint256)": {
        "details": "Convert from 18 decimals to token defined decimals."
      },
      "decimals()": {
        "details": "Returns the decimals of the token. default to 18"
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit()": {
        "details": "Receives ETH and grants new tokens/shares to the sender depending on the value of pool's share."
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "ERC20 token amount."
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "_amount": "ERC20 token amount.",
          "_deadline": "The time at which signature will expire",
          "_r": "Half of the ECDSA signature pair",
          "_s": "Half of the ECDSA signature pair",
          "_v": "The recovery byte of the signature"
        }
      },
      "excessDebt(address)": {
        "params": {
          "_strategy": "Address of strategy"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "migrateStrategy(address,address)": {
        "details": "Migrating strategy aka old and new strategy should be of same type.",
        "params": {
          "_new": "Address of new strategy",
          "_old": "Address of strategy being migrated"
        }
      },
      "multiTransfer(address[],uint256[])": {
        "details": "Address array and amount array are 1:1 and are in order.",
        "params": {
          "_amounts": "array of token amounts",
          "_recipients": "array of recipient addresses"
        },
        "returns": {
          "_0": "true/false"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      },
      "pricePerShare()": {
        "details": "Return value will be in token defined decimals."
      },
      "removeFromList(address,address)": {
        "details": "Use it to remove keeper from keepers list and to remove address from feeWhitelist",
        "params": {
          "_addressToRemove": "address which we want to remove from AddressList.",
          "_listToUpdate": "address of AddressList contract."
        }
      },
      "reportEarning(uint256,uint256,uint256)": {
        "details": "Strategy call this in regular interval.",
        "params": {
          "_loss": "Reduce debt ,also reduce debtRatio, increase loss in record.",
          "_payback": "strategy willing to payback outstanding above debtLimit. no performance fee on this amount.  when governance has reduced debtRatio of strategy, strategy will report profit and payback amount separately.",
          "_profit": "yield generated by strategy. Strategy get performance fee on this amount"
        }
      },
      "reportLoss(uint256)": {
        "details": "Some strategies pay deposit fee thus realizing loss at deposit. For example: Curve's 3pool has some slippage due to deposit of one asset in 3pool. Strategy may want report this loss instead of waiting for next rebalance.",
        "params": {
          "_loss": "Loss that strategy want to report"
        }
      },
      "sweepERC20(address)": {
        "details": "Transfer given ERC20 token to feeCollector",
        "params": {
          "_fromToken": "Token address to sweep"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "tokensHere()": {
        "details": "Returns the token stored in the pool. It will be in token defined decimals."
      },
      "totalDebtOf(address)": {
        "params": {
          "_strategy": "Strategy address"
        }
      },
      "totalSupply()": {
        "details": "Returns total supply of the token."
      },
      "totalValue()": {
        "details": "Returns total value of paycer pool, in terms of collateral token"
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferGovernorship(address)": {
        "details": "Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner."
      },
      "updateFeeCollector(address)": {
        "params": {
          "_newFeeCollector": "new fee collector address"
        }
      },
      "updatePoolRewards(address)": {
        "params": {
          "_newPoolRewards": "new pool rewards address"
        }
      },
      "updateWithdrawFee(uint256)": {
        "details": "Format: 1500 = 15% fee, 100 = 1%",
        "params": {
          "_newWithdrawFee": "new withdraw fee"
        }
      },
      "whitelistedWithdraw(uint256)": {
        "details": "Burn shares and return collateral. No withdraw fee will be assessed when this function is called. Only some white listed address can call this function.",
        "params": {
          "_shares": "Pool shares. It will be in 18 decimals."
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_shares": "Pool shares. It will be in 18 decimals."
        }
      },
      "withdrawETH(uint256)": {
        "details": "Burns tokens/shares and returns the ETH value, after fee, of those."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addInList(address,address)": {
        "notice": "Add given address in provided address list."
      },
      "availableCreditLimit(address)": {
        "notice": "Get available credit limit of strategy. This is the amount strategy can borrow from pool"
      },
      "deposit(uint256)": {
        "notice": "Deposit ERC20 tokens and receive pool shares depending on the current share price."
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit ERC20 tokens with permit aka gasless approval."
      },
      "excessDebt(address)": {
        "notice": "Debt above current debt limit"
      },
      "migrateStrategy(address,address)": {
        "notice": "Migrate existing strategy to new strategy."
      },
      "multiTransfer(address[],uint256[])": {
        "notice": "Transfer tokens to multiple recipient"
      },
      "pricePerShare()": {
        "notice": "Get price per share"
      },
      "removeFromList(address,address)": {
        "notice": "Remove given address from provided address list."
      },
      "reportLoss(uint256)": {
        "notice": "Report loss outside of rebalance activity."
      },
      "totalDebt()": {
        "notice": "Get total debt of pool"
      },
      "totalDebtOf(address)": {
        "notice": "Get total debt of given strategy"
      },
      "totalDebtRatio()": {
        "notice": "Get total debt ratio. Total debt ratio helps us keep buffer in pool"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector address for this pool"
      },
      "updatePoolRewards(address)": {
        "notice": "Update pool rewards address for this pool"
      },
      "updateWithdrawFee(uint256)": {
        "notice": "Update withdraw fee for this pool"
      },
      "whitelistedWithdraw(uint256)": {
        "notice": "Withdraw collateral based on given shares and the current share price."
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral based on given shares and the current share price. Withdraw fee, if any, will be deduced from given shares and transferred to feeCollector. Burn remaining shares and return collateral."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6419,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6425,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6427,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6429,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 6431,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 887,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "_initialized",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 890,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "_initializing",
        "offset": 1,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 6960,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "_CACHED_DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 6962,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes32"
      },
      {
        "astId": 6964,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "_CACHED_CHAIN_ID",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6970,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "nonces",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3080,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "governor",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3082,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 3224,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "paused",
        "offset": 20,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 3226,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "stopEverything",
        "offset": 21,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 938,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "_status",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 8344,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "token",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IERC20)1552"
      },
      {
        "astId": 8346,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "poolAccountant",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 8348,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "poolRewards",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 8350,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "feeWhitelist",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 8352,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "keepers",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 8354,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "maintainers",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 8356,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "feeCollector",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 8358,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "withdrawFee",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 8360,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "decimalConversionFactor",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 8362,
        "contract": "contracts/pool/VETH.sol:VETH",
        "label": "withdrawInETH",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1552": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}